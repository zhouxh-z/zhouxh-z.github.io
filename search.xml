<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并发编程 之 再看 synchronized</title>
      <link href="/2021/12/22/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%B9%8B-%E5%86%8D%E7%9C%8B-synchronized/"/>
      <url>/2021/12/22/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E4%B9%8B-%E5%86%8D%E7%9C%8B-synchronized/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从客户端发送create消息到节点创建，源码分析</title>
      <link href="/2021/09/23/%E4%BB%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81create%E6%B6%88%E6%81%AF%E5%88%B0%E8%8A%82%E7%82%B9%E5%88%9B%E5%BB%BA%EF%BC%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2021/09/23/%E4%BB%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81create%E6%B6%88%E6%81%AF%E5%88%B0%E8%8A%82%E7%82%B9%E5%88%9B%E5%BB%BA%EF%BC%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文较硬，结合zookeeper源码食用更佳哦！zookeeper 源码可以直接从<a href="https://github.com/apache/zookeeper">github</a>下载编译！</p><p>zookeeper 有两种通信方式：netty、Nio；本文是基于 Netty 源码进行的解读！</p><p>建议先阅读<a href="https://juejin.cn/post/6996844613377982494"># 集群模式 zookeeper 启动时做了这些事！</a></p><h2 id="zk-咋保证集群各副本的数据一致性？"><a href="#zk-咋保证集群各副本的数据一致性？" class="headerlink" title="zk 咋保证集群各副本的数据一致性？"></a>zk 咋保证集群各副本的数据一致性？</h2><p>zookeeper 基于 <strong>ZAB 协议</strong> 实现了一种主备模式的系统架构来保证集群各副本的数据一致性！</p><p><strong>ZAB 协议</strong>：为 Zookeeper 专门设计的一种支持 <strong>崩溃恢复</strong> 和 <strong>原子广播</strong> 的协议！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c25afebb02a4560a483e2cff4495212~tplv-k3u1fbpfcp-watermark.image" alt="ZAB.png"></p><p>客户端发送请求到zk服务端时，所有客户端写入数据都是写入到Leader节点（如果请求被发到 follower 节点，会被转发到 leader 节点），由leader节点复制到其他节点上，从而保证数据一致性；</p><p>从leader复制到follower的过程有点类似 两阶段提交(2PC)，leader节点发送数据包给其他follower节点，follower节点确认接收后返回ACK，如果follow返回的ACK + leader本身的ACK，超过所有投票节点的一半，这个请求就会被commit，并写入zk内存中！</p><h2 id="zk-原子广播详细流程"><a href="#zk-原子广播详细流程" class="headerlink" title="zk 原子广播详细流程"></a>zk <strong>原子广播</strong>详细流程</h2><p>ZAB 协议的消息广播过程使用的是一个原子广播协议，类似一个 两阶段提交过程<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a31ea85092640a78d5d31b613f705f6~tplv-k3u1fbpfcp-watermark.image" alt="zk 原子广播.png"></p><blockquote><p>源码分析是按代码顺序分析的，【】为本文的源码研读内容目录编号，可以根据业务逻辑跳转学习</p><ol><li>客户端连接服务端时，所有客户端写入数据都是写入到Leader节点（如果请求被发到 follower 节点，会被转发到 leader 节点）；<br> 【源码研读目录：一 &lt;1、2&gt; + 2.2.1 】  </li><li>leader 接收到请求，将请求封装成一个事务 proposal ，并发送给所有 follower 节点；<br> 【源码研读目录：2.1.1 + 2.1.2 + 2.1.3&lt;2.1.3.1、2.1.3.2&gt;】</li><li>leader 将数据写入自身的本地文件；<br> 【源码研读目录：2.1.3.3】</li><li>leader 给自己记一次ACK确认；<br> 【源码研读目录：2.1.3.3】</li><li>follower 接收到 leader 发送的 proposal 后，将数据写入自身的本地文件中；<br> 【源码研读目录：2.2.1 + 2.2.2 + 2.2.3】</li><li>follower 写入成功后给 leader 节点发送一个ACK确认请求；<br> 【源码研读目录：2.2.5】</li><li>leader 接收到ACK确认请求时，判断是否收到了过半的投票节点（leader+follower）的ACK确认请求；如果过半，发送commit请求给follower节点；<br> 【源码研读目录：2.1.4】</li><li>leader 节点将数据写入 observer 节点保存；<br> 【源码研读目录：2.1.4】</li><li>leader 节点将数据写入内存中；<br> 【源码研读目录：2.1.4】</li><li>follower 节点接收到 leader 的 commit 请求后，将数据写入内存；<br>【源码研读目录：2.2.2 + 2.2.3】；</li></ol></blockquote><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><p>知道基本流程后，我们从如下单元测试方法开始分析源码，看看 zookeeper 从客户端发送create消息到节点创建到底怎么实现的！</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">,</span> KeeperException <span class="token punctuation">{</span>    ZooKeeper zk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">2183</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zk<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/foo_2"</span><span class="token punctuation">,</span> <span class="token string">"foobar1"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="一、客户端发送请求"><a href="#一、客户端发送请求" class="headerlink" title="一、客户端发送请求"></a>一、客户端发送请求</h2><h3 id="1-初始化-zk"><a href="#1-初始化-zk" class="headerlink" title="1. 初始化 zk"></a>1. 初始化 zk</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/828efb16094543abac5b863b1671d3f9~tplv-k3u1fbpfcp-watermark.image" alt="zk 客户端发送数据到服务端 (1).png"></p><pre class=" language-java"><code class="language-java">ZooKeeper zk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">2183</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>👇👇👇<span class="token keyword">public</span> <span class="token function">ZooKeeper</span><span class="token punctuation">(</span>····<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    cnxn <span class="token operator">=</span> <span class="token function">createConnection</span><span class="token punctuation">(</span>        connectStringParser<span class="token punctuation">.</span><span class="token function">getChrootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        hostProvider<span class="token punctuation">,</span>        sessionTimeout<span class="token punctuation">,</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clientConfig<span class="token punctuation">,</span>        watcher<span class="token punctuation">,</span>        <span class="token function">getClientCnxnSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        canBeReadOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>    cnxn<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>zookeeper 初始化时，通过调用 <strong>createConnection</strong>初始化了一个 zk 连接对象<strong>ClientCnxn</strong><br>，<strong>ClientCnxn</strong>在初始化时 new 了两个线程（SendThread、EventThread）；</p><p>并在 <strong>cnxn.start()</strong> 启动这两个线程；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>sendThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendThread</span><span class="token punctuation">(</span>clientCnxnSocket<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-发送请求"><a href="#2-发送请求" class="headerlink" title="2. 发送请求"></a>2. 发送请求</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d76b63fd10f4fbd9f2925e2c85d700e~tplv-k3u1fbpfcp-watermark.image" alt="zk 客户端发送数据到服务端.png"> </p><p><strong>发送过程</strong></p><ol><li><p>zookeeper 将create 方法的参数封装成 <strong>Request</strong> ;</p><pre class=" language-java"><code class="language-java">zk<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/foo_2"</span><span class="token punctuation">,</span> <span class="token string">"foobar1"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>👇👇👇<span class="token keyword">public</span> String <span class="token function">create</span><span class="token punctuation">(</span>···<span class="token punctuation">)</span> <span class="token keyword">throws</span> KeeperException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 封装 CreateRequest</span>    RequestHeader h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>createMode<span class="token punctuation">.</span><span class="token function">isContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> ZooDefs<span class="token punctuation">.</span>OpCode<span class="token punctuation">.</span>createContainer <span class="token operator">:</span> ZooDefs<span class="token punctuation">.</span>OpCode<span class="token punctuation">.</span>create<span class="token punctuation">)</span><span class="token punctuation">;</span>    CreateRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CreateResponse response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>createMode<span class="token punctuation">.</span><span class="token function">toFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>serverPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAcl</span><span class="token punctuation">(</span>acl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过连接器发送 CreateRequest</span>    ReplyHeader r <span class="token operator">=</span> cnxn<span class="token punctuation">.</span><span class="token function">submitRequest</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnxn<span class="token punctuation">.</span>chrootPath <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>cnxn<span class="token punctuation">.</span>chrootPath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>通过 submitRequest() 调用 queuePacket() 将 Request 加入到 <strong>ClientCnxn.outgoingQueue</strong> 队列中;</p></li><li><p>向管道写一个字节，从而唤醒阻塞在selector上的线程，该字节只为触发 netty/nio 的写事件，从而让 sendThread() 读取队列中的数据包【zk 底层使用netty/Nio通信，如果没有事件发生，netty/Nio 会阻塞在selector上等待事件发生，此处发送一个空字节，就是为了唤醒netty/Nio的selector】 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ReplyHeader <span class="token function">submitRequest</span><span class="token punctuation">(</span>···<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    ReplyHeader r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplyHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Packet packet <span class="token operator">=</span> <span class="token function">queuePacket</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>r<span class="token punctuation">,</span>request<span class="token punctuation">,</span>response<span class="token punctuation">,</span> null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>        watchRegistration<span class="token punctuation">,</span>watchDeregistration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略非主线代码</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span>👇👇👇<span class="token keyword">public</span> Packet <span class="token function">queuePacket</span><span class="token punctuation">(</span>···<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Packet packet <span class="token operator">=</span> null<span class="token punctuation">;</span>    packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Packet</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> r<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> watchRegistration<span class="token punctuation">)</span><span class="token punctuation">;</span>    packet<span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>    packet<span class="token punctuation">.</span>ctx <span class="token operator">=</span> ctx<span class="token punctuation">;</span>    packet<span class="token punctuation">.</span>clientPath <span class="token operator">=</span> clientPath<span class="token punctuation">;</span>    packet<span class="token punctuation">.</span>serverPath <span class="token operator">=</span> serverPath<span class="token punctuation">;</span>    packet<span class="token punctuation">.</span>watchDeregistration <span class="token operator">=</span> watchDeregistration<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略部分代码 </span>        <span class="token comment" spellcheck="true">// 将 Request 加入到 outgoingQueue 队列中;</span>       outgoingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 向channel 中写一个空字节，唤醒 SendThread 中的 selector</span>    sendThread<span class="token punctuation">.</span><span class="token function">getClientCnxnSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">packetAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packet<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>zookeeper 初始化中生成的 <strong>SendThread</strong> 线程会从这个队列中读取 Request 发送到服务端；</p><p> SendThread.run() 方法中有比较多的分支代码，这里我们主要看这两个关键方法；</p><pre class=" language-java"><code class="language-java">clientCnxnSocket<span class="token punctuation">.</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> sessionId<span class="token punctuation">,</span> outgoingQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>clientCnxnSocket<span class="token punctuation">.</span><span class="token function">doTransport</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> pendingQueue<span class="token punctuation">,</span> ClientCnxn<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 在<strong>2</strong>中我们发送的请求被加入到 <strong>outgoingQueue</strong> 队列中，这个队列时属于 ClientCnxn 对象；<br>  introduce 方法将这个队列赋值给 clientCnxnSocket，以便后续在 doTransport 方法中调用；</p><pre class=" language-java"><code class="language-java">clientCnxnSocket<span class="token punctuation">.</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> sessionId<span class="token punctuation">,</span> outgoingQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>👇👇👇<span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span>ClientCnxn<span class="token punctuation">.</span>SendThread sendThread<span class="token punctuation">,</span> <span class="token keyword">long</span> sessionId<span class="token punctuation">,</span> LinkedBlockingDeque<span class="token operator">&lt;</span>Packet<span class="token operator">></span> outgoingQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sendThread <span class="token operator">=</span> sendThread<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sessionId <span class="token operator">=</span> sessionId<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>outgoingQueue <span class="token operator">=</span> outgoingQueue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> doTransport 方法，是真正将请求通过 Netty/NIO 写给服务端的方法；（以下是ClientCnxnSocketNetty源码）</p><pre class=" language-java"><code class="language-java">clientCnxnSocket<span class="token punctuation">.</span><span class="token function">doTransport</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> pendingQueue<span class="token punctuation">,</span> ClientCnxn<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>👇👇👇<span class="token keyword">void</span> <span class="token function">doTransport</span><span class="token punctuation">(</span><span class="token keyword">int</span> waitTimeOut<span class="token punctuation">,</span>Queue<span class="token operator">&lt;</span>Packet<span class="token operator">></span> pendingQueue<span class="token punctuation">,</span>ClientCnxn cnxn<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略非主线代码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doWrite</span><span class="token punctuation">(</span>pendingQueue<span class="token punctuation">,</span> head<span class="token punctuation">,</span> cnxn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">updateNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>👇👇👇<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doWrite</span><span class="token punctuation">(</span>Queue<span class="token operator">&lt;</span>Packet<span class="token operator">></span> pendingQueue<span class="token punctuation">,</span> Packet p<span class="token punctuation">,</span> ClientCnxn cnxn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">updateNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> anyPacketsSent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> WakeupPacket<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>requestHeader <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>requestHeader<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ZooDefs<span class="token punctuation">.</span>OpCode<span class="token punctuation">.</span>ping<span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>requestHeader<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ZooDefs<span class="token punctuation">.</span>OpCode<span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 给请求设置 Xid</span>                p<span class="token punctuation">.</span>requestHeader<span class="token punctuation">.</span><span class="token function">setXid</span><span class="token punctuation">(</span>cnxn<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>pendingQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pendingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 发送请求</span>            <span class="token function">sendPktOnly</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            anyPacketsSent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 最终通过Netty的 channel 将数据发送到客户端<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15a667bde76f4911b98ff03445c5452d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li></ol><h2 id="二、服务端接收请求"><a href="#二、服务端接收请求" class="headerlink" title="二、服务端接收请求"></a>二、服务端接收请求</h2><h3 id="1-如何接收请求？"><a href="#1-如何接收请求？" class="headerlink" title="1. 如何接收请求？"></a>1. 如何接收请求？</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcefe84b37d84d6ea14afbdcdca29829~tplv-k3u1fbpfcp-watermark.image" alt="服务端接收消息.png"><br>在<a href="https://juejin.cn/post/6996844613377982494"># 集群模式 zookeeper 启动时做了这些事！</a>这篇文章中我们说过 zookeeper 服务端在启动时，初始化并启动了一个Netty服务器【NettyServerCnxnFactory】，用于接收客户端/其他节点的请求【Netty 处理请求类：CnxnChannelHandler】</p><ol><li>zk客户端发送的请求，通过服务端 CnxnChannelHandler.channelRead() 方法，通过cnxn.processMessage((ByteBuf) msg) → receiveMessage(buf) → zks.processPacket(this, bb) → submitRequest(si) → enqueueRequest(si) → requestThrottler.submitRequest(si);<br> 以上这段代码主要是对request的解析并没有过于复杂的逻辑，这边只做记录就不赘述了；</li><li>服务端获取请求之后，会通过 requestThrottler.submitRequest(si) 方法将解析出来的请求加入到 RequestThrottler.<strong>submittedRequests</strong> ;<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stopping<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Shutdown in progress. Request cannot be processed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dropRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        request<span class="token punctuation">.</span>requestThrottleQueueTime <span class="token operator">=</span> Time<span class="token punctuation">.</span><span class="token function">currentElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        submittedRequests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>RequestThrottler 线程的 run 方法会从<strong>2</strong>中设置的<strong>submittedRequests</strong>队列中获取请求，并通过<strong>submitRequestNow</strong>方法，将请求提交给zk请求处理责任链<strong>RequestProcessor</strong> <strong>RequestThrottler 线程</strong>：zk服务端在选举完 leader 之后，leader / follower节点 分别在 leader.lead() / follower.followLeader()方法中调用 <strong>zk.startup()</strong> 实例化并启动 RequestThrottler 线程；<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 省略非主线代码</span>            Request request <span class="token operator">=</span> submittedRequests<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 省略非主线代码</span>                zks<span class="token punctuation">.</span><span class="token function">submitRequestNow</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="2-如何处理请求？"><a href="#2-如何处理请求？" class="headerlink" title="2. 如何处理请求？"></a>2. 如何处理请求？</h3><p>zookeeper 在接收到请求后，将请求提交到责任链<strong>RequestProcessor</strong>处理；且不同属性的节点（leader/follower）实例化了不同的责任链；</p><p>zk服务端在选举完 leader 之后，leader / follower节点 分别在 leader.lead() / follower.followLeader()方法中调用 **zk.startup()**，startup()调用了 ZooKeeperServer.<strong>setupRequestProcessors()</strong> ;</p><p>ZooKeeperServer 根据节点不同存在不同实现；<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af0c23ac63884364b7505bd55bc10e3f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="2-1-leader-节点责任链接收请求如何处理？"><a href="#2-1-leader-节点责任链接收请求如何处理？" class="headerlink" title="2.1_ leader 节点责任链接收请求如何处理？"></a>2.1_ leader 节点责任链接收请求如何处理？</h4><pre class=" language-java"><code class="language-java">LeaderZooKeeperServer👇👇👇<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setupRequestProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    RequestProcessor finalProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalRequestProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RequestProcessor toBeAppliedProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leader<span class="token punctuation">.</span>ToBeAppliedRequestProcessor</span><span class="token punctuation">(</span>finalProcessor<span class="token punctuation">,</span> <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    commitProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommitProcessor</span><span class="token punctuation">(</span>toBeAppliedProcessor<span class="token punctuation">,</span> Long<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">getServerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">getZooKeeperServerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    commitProcessor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ProposalRequestProcessor proposalProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProposalRequestProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> commitProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    proposalProcessor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prepRequestProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrepRequestProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> proposalProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    prepRequestProcessor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    firstProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeaderRequestProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> prepRequestProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setupContainerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fbe40ed919e4fe7ab504cdd8be71d8b~tplv-k3u1fbpfcp-watermark.image" alt="leader责任链.png"></p><p>leader 节点构建了以上责任链，我们来看看责任链的每个节点都做了什么；</p><h5 id="2-1-1-LeaderRequestProcessor"><a href="#2-1-1-LeaderRequestProcessor" class="headerlink" title="2.1.1_ LeaderRequestProcessor"></a>2.1.1_ LeaderRequestProcessor</h5><p>LeaderRequestProcessor 的任务比较简单：</p><ol><li><p>判断请求会话是否过期，过期的话抛出异常；</p></li><li><p>调用责任链的下一个方法；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token keyword">throws</span> RequestProcessorException <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lzks<span class="token punctuation">.</span><span class="token function">authWriteRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> Request upgradeRequest <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>     upgradeRequest <span class="token operator">=</span> lzks<span class="token punctuation">.</span><span class="token function">checkUpgradeSession</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeeperException</span> ke<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>upgradeRequest <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>     nextProcessor<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>upgradeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> nextProcessor<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2-1-2-PrepRequestProcessor"><a href="#2-1-2-PrepRequestProcessor" class="headerlink" title="2.1.2_ PrepRequestProcessor"></a>2.1.2_ PrepRequestProcessor</h5><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/157ddcc8c9c240589caf10b7a6a20b1c~tplv-k3u1fbpfcp-watermark.image" alt="未命名文件 (2).png"><br>责任链的 processRequest 方法，只是将请求加入到 submittedRequests 队列中；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span> request<span class="token punctuation">.</span>prepQueueStartTime <span class="token operator">=</span> Time<span class="token punctuation">.</span><span class="token function">currentElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> submittedRequests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span> ServerMetrics<span class="token punctuation">.</span><span class="token function">getMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>PREP_PROCESSOR_QUEUED<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是PrepRequestProcessor 本质是一个 Thread，在创建责任链时，启动了该线程；</p></li></ol><p>PrepRequestProcessor.run() 将从 submittedRequests 队列中获取请求并处理；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 省略了部分非主线代码</span>            Request request <span class="token operator">=</span> submittedRequests<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span>prepStartTime <span class="token operator">=</span> Time<span class="token punctuation">.</span><span class="token function">currentElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>👇👇👇<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">pRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token keyword">throws</span> RequestProcessorException <span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token function">setHdr</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setTxn</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">isThrottled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 根据请求类型的不同（create/delete/update），对请求进行封装和特殊处理</span>      <span class="token comment" spellcheck="true">// 最终将请求放入zks.outstandingChanges</span>      <span class="token function">pRequestHelper</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 给请求设置一个 zxid </span>    request<span class="token punctuation">.</span>zxid <span class="token operator">=</span> zks<span class="token punctuation">.</span><span class="token function">getZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用下一个接口</span>    nextProcessor<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>pRequestHelper：</p><ol><li>根据请求类型的不同（create/delete/update），对请求进行封装</li><li>校验请求是否合理：未定义的请求、参数不合理</li><li>检查上级路径是否存在</li><li>检查ACL</li><li> 检查路径是否合法</li><li> 将请求装入 <strong>outstandingChanges</strong> 队列<br>然后给请求设置Zxid，并调用下一个处理器<h5 id="2-1-3-proposalProcessor-（重点-）"><a href="#2-1-3-proposalProcessor-（重点-）" class="headerlink" title="2.1.3_ proposalProcessor （重点*）"></a>2.1.3_ proposalProcessor （重点*）</h5>这个处理器是zookeeper数据文件同步和本地事务写入的关键（可以理解为两阶段提交的第一阶段）<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/202884eb804740a0847b0b1ba4cadb75~tplv-k3u1fbpfcp-watermark.image" alt="ProposalRequestProcessor (2).png"></li><li>调用责任链的下一个处理器；</li><li>通过 LearnerHandler 将请求发送到 follower 节点</li><li>启用 SyncRequestProcessor -&gt; AckRequestProcessor 责任链将数据写入文件系统，并判断是否半数以上节点返回ACK确认消息，如果超过半数，则提交数据写入内存；</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token keyword">throws</span> RequestProcessorException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否是leader的同步请求</span>    <span class="token comment" spellcheck="true">// 由于本次我们客户端直接发送消息到leader节点，</span>    <span class="token comment" spellcheck="true">// 所以 request instanceof LearnerSyncRequest = false；</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">LearnerSyncRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zks<span class="token punctuation">.</span><span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">processSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>LearnerSyncRequest<span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是否需要调用下一个处理器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldForwardToNextProcessor</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextProcessor<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 处理请求</span>                zks<span class="token punctuation">.</span><span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">propose</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">XidRolloverException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 写本地文件同步</span>            syncProcessor<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="2-1-3-1-shouldForwardToNextProcessor-request"><a href="#2-1-3-1-shouldForwardToNextProcessor-request" class="headerlink" title="2.1.3.1_ shouldForwardToNextProcessor(request)"></a>2.1.3.1_ shouldForwardToNextProcessor(request)</h6><p>shouldForwardToNextProcessor(request) 默认情况下为true；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// forwardLearnerRequestsToCommitProcessorDisabled 默认为false， </span><span class="token comment" spellcheck="true">// 需要配置 zookeeper.forward_learner_requests_to_commit_processor_disabled = true 才能更改</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">shouldForwardToNextProcessor</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>forwardLearnerRequestsToCommitProcessorDisabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">LearnerHandler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServerMetrics<span class="token punctuation">.</span><span class="token function">getMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>REQUESTS_NOT_FORWARDED_TO_COMMIT_PROCESSOR<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>nextProcessor.processRequest(request)调用下一个 CommitProcessor 处理器；</p><h6 id="2-1-3-2-zks-getLeader-propose-request"><a href="#2-1-3-2-zks-getLeader-propose-request" class="headerlink" title="2.1.3.2_ zks.getLeader().propose(request);"></a>2.1.3.2_ zks.getLeader().propose(request);</h6><p>通过 LearnerHandler 将请求发送到 follower 节点，并且将请求加入到 outstandingProposals 队列中；</p><ul><li><p>将请求封装成 QuorumPacket，并通过循环将请求发送到 LearnerHandler.queuedPackets 队列中等待处理； </p><p>  并将请求加入到 outstandingProposals 队列中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Proposal <span class="token function">propose</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token keyword">throws</span> XidRolloverException <span class="token punctuation">{</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> SerializeUtils<span class="token punctuation">.</span><span class="token function">serializeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>  proposalStats<span class="token punctuation">.</span><span class="token function">setLastBufferSize</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  QuorumPacket pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPacket</span><span class="token punctuation">(</span>Leader<span class="token punctuation">.</span>PROPOSAL<span class="token punctuation">,</span> request<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> data<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  Proposal p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proposal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span>packet <span class="token operator">=</span> pp<span class="token punctuation">;</span>  p<span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      p<span class="token punctuation">.</span><span class="token function">addQuorumVerifier</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">getQuorumVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 省略部分非主线代码</span>      lastProposed <span class="token operator">=</span> p<span class="token punctuation">.</span>packet<span class="token punctuation">.</span><span class="token function">getZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      outstandingProposals<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lastProposed<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sendPacket</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>👇👇👇<span class="token keyword">void</span> <span class="token function">sendPacket</span><span class="token punctuation">(</span>QuorumPacket qp<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>forwardingFollowers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>LearnerHandler f <span class="token operator">:</span> forwardingFollowers<span class="token punctuation">)</span> <span class="token punctuation">{</span>          f<span class="token punctuation">.</span><span class="token function">queuePacket</span><span class="token punctuation">(</span>qp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>👇👇👇<span class="token keyword">void</span> <span class="token function">queuePacket</span><span class="token punctuation">(</span>QuorumPacket p<span class="token punctuation">)</span> <span class="token punctuation">{</span>  queuedPackets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>LearnerHandler 是一个线程，LearnerHandler.run() 方法中调用了 startSendingPackets() 将数据从 LearnerHandler.queuedPackets 队列取出，并发送到 follower 节点；</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startSendingPackets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sendingThreadStarted<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 发送请求数据包到follower节点</span>                    <span class="token function">sendPackets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sendingThreadStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>👇👇👇<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendPackets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            QuorumPacket p<span class="token punctuation">;</span>            p <span class="token operator">=</span> queuedPackets<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bufferedOutput<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> queuedPackets<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Leader<span class="token punctuation">.</span>PROPOSAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>                syncLimitCheck<span class="token punctuation">.</span><span class="token function">updateProposal</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 省略部分非主线代码</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lastZxid <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            oa<span class="token punctuation">.</span><span class="token function">writeRecord</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"packet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            packetsSent<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            messageTracker<span class="token punctuation">.</span><span class="token function">trackSent</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="2-1-3-3-syncProcessor-processRequest-request"><a href="#2-1-3-3-syncProcessor-processRequest-request" class="headerlink" title="2.1.3.3 syncProcessor.processRequest(request);"></a>2.1.3.3 syncProcessor.processRequest(request);</h6><p>启用 SyncRequestProcessor -&gt; AckRequestProcessor 责任链；</p><ul><li><p>SyncRequestProcessor 将数据写入文件系统；</p><ul><li><p>processRequest 方法将请求写入到 queuedRequests 队列中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token keyword">final</span> Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>queuedRequests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>SyncRequestProcessor.run(); </p><p>zks.getZKDatabase().append(si) 将数据写入快照对象； </p><p>zks.takeSnapshot() 将数据序列化到zk底层的DataTree对象中；  </p><p>flush() 中有个commit方法，真正将数据写入文件；然后调用下一个处理器 AckRequestProcessor；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 省略大量非主线代码</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Request si <span class="token operator">=</span> queuedRequests<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>pollTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// zks.getZKDatabase().append(si) 把请求append 到快照对象中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>si<span class="token punctuation">.</span><span class="token function">isThrottled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> zks<span class="token punctuation">.</span><span class="token function">getZKDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">resetSnapshotStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    zks<span class="token punctuation">.</span><span class="token function">getZKDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>snapThreadMutex<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">new</span> <span class="token class-name">ZooKeeperThread</span><span class="token punctuation">(</span><span class="token string">"Snapshot Thread"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">try</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">// 这里将数据序列化到zk底层的DataTree对象中</span>                                    zks<span class="token punctuation">.</span><span class="token function">takeSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Unexpected exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                                    snapThreadMutex<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            toFlush<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>👇👇👇<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> RequestProcessorException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 提交写快照文件</span>    zks<span class="token punctuation">.</span><span class="token function">getZKDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextProcessor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>toFlush<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>toFlush<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Request i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>toFlush<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>nextProcessor<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextProcessor <span class="token keyword">instanceof</span> <span class="token class-name">Flushable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>Flushable<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextProcessor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>AckRequestProcessor 判断是否半数以上节点返回ACK确认消息，如果超过半数，则提交数据写入内存</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    QuorumPeer self <span class="token operator">=</span> leader<span class="token punctuation">.</span>self<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        leader<span class="token punctuation">.</span><span class="token function">processAck</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>  从过程 <strong>2</strong> 设置的 outstandingProposals 中获取请求，尝试提交； </p><p>  判断收到的ACK消息是否超过集群节点的一半；  </p><p>  如果超过一半则提交；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">processAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> sid<span class="token punctuation">,</span> <span class="token keyword">long</span> zxid<span class="token punctuation">,</span> SocketAddress followerAddr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Proposal p <span class="token operator">=</span> outstandingProposals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>zxid<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">addAck</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试提交</span>    <span class="token keyword">boolean</span> hasCommitted <span class="token operator">=</span> <span class="token function">tryToCommit</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> zxid<span class="token punctuation">,</span> followerAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasCommitted <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>request <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getHdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> OpCode<span class="token punctuation">.</span>reconfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> curZxid <span class="token operator">=</span> zxid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>allowedToCommit <span class="token operator">&amp;&amp;</span> hasCommitted <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curZxid<span class="token operator">++</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> outstandingProposals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curZxid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                hasCommitted <span class="token operator">=</span> <span class="token function">tryToCommit</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> curZxid<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>👇👇👇<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">tryToCommit</span><span class="token punctuation">(</span>Proposal p<span class="token punctuation">,</span> <span class="token keyword">long</span> zxid<span class="token punctuation">,</span> SocketAddress followerAddr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断收到的ACK消息是否超过集群节点的一半</span>    <span class="token comment" spellcheck="true">// 由于follower节点还没有返回ACK消息所以此处直接返回；</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">hasAllQuorums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    outstandingProposals<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>zxid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>request <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        toBeApplied<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>request <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getHdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> OpCode<span class="token punctuation">.</span>reconfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略部分非本次主线代码</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">logLatency</span><span class="token punctuation">(</span>ServerMetrics<span class="token punctuation">.</span><span class="token function">getMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>QUORUM_ACK_LATENCY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">commit</span><span class="token punctuation">(</span>zxid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inform</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将请求发送到 commitProcessor 的 committedRequests 队列中；</span>    zk<span class="token punctuation">.</span>commitProcessor<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>  此时由于 follower 节点收到 proposal 请求，但是还没有返回ACK消息，所以 tryToCommit 返回false；这边逻辑也就结束了；等待 follower 节点返回ACK后会再次调用该方法；</p><p>  如果 follower 节点+ leader 节点 超过半数，则 p.hasAllQuorums() = true，后续逻辑继续执行，我们发送的是create 请求，所以会执行 <strong>commit(zxid); inform(p)</strong> 以及 zk.commitProcessor.commit(p.request)；  </p><p>  commit(zxid)：leader 会发送一个 commit 请求，携带zxid，到 follower 节点，follower节点接收到请求时，会将之前在<strong>2. zks.getLeader().propose(request);</strong> 中 leader 发送给 follower 节点的数据写入到自己的内存中（该逻辑在后续follower节点处理过程中会讲到）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token keyword">long</span> zxid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lastCommitted <span class="token operator">=</span> zxid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    QuorumPacket qp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPacket</span><span class="token punctuation">(</span>Leader<span class="token punctuation">.</span>COMMIT<span class="token punctuation">,</span> zxid<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendPacket</span><span class="token punctuation">(</span>qp<span class="token punctuation">)</span><span class="token punctuation">;</span>    ServerMetrics<span class="token punctuation">.</span><span class="token function">getMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>COMMIT_COUNT<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>  inform(p)：会将请求发送到obsever节点保存起来；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inform</span><span class="token punctuation">(</span>Proposal proposal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    QuorumPacket qp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPacket</span><span class="token punctuation">(</span>Leader<span class="token punctuation">.</span>INFORM<span class="token punctuation">,</span> proposal<span class="token punctuation">.</span>request<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span>         proposal<span class="token punctuation">.</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendObserverPacket</span><span class="token punctuation">(</span>qp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>  zk.commitProcessor.commit(p.request)：将请求发送到 commitProcessor 的 committedRequests 队列中；该队列会在 commitProcessor的 run 方法中消费；</p><h5 id="2-1-4-CommitProcessor"><a href="#2-1-4-CommitProcessor" class="headerlink" title="2.1.4_ CommitProcessor"></a>2.1.4_ CommitProcessor</h5><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44bb14257b874e4786b18dea617dad4b~tplv-k3u1fbpfcp-watermark.image" alt="CommitProcessor.png"><br>总的来说 CommitProcessor 功能比较简单，CommitProcessor 接收到 leader 认为可以提交的请求，将请求进行简单处理后，转发给下一个处理器；</p></li></ul><p>但是由于 zk 追求效率，代码中存在大量的线程和队列，导致比较难读；</p><ol><li><p>LearnerHandler 线程的 run 方法 中存在一个死循环，无限等待接收 SendAckRequestProcessor 发送的 ACK 消息；</p><p>当接收到 ACK 请求时，会调用 processAck()； 后续逻辑与 <strong>2.1.3.3</strong> 中的 AckRequestProcessor 处理器相同；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    qp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPacket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ia<span class="token punctuation">.</span><span class="token function">readRecord</span><span class="token punctuation">(</span>qp<span class="token punctuation">,</span> <span class="token string">"packet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageTracker<span class="token punctuation">.</span><span class="token function">trackReceived</span><span class="token punctuation">(</span>qp<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ByteBuffer bb<span class="token punctuation">;</span>    <span class="token keyword">long</span> sessionId<span class="token punctuation">;</span>    <span class="token keyword">int</span> cxid<span class="token punctuation">;</span>    <span class="token keyword">int</span> type<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>qp<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> Leader<span class="token punctuation">.</span>ACK<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>learnerType <span class="token operator">==</span> LearnerType<span class="token punctuation">.</span>OBSERVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Received ACK from Observer {}"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        syncLimitCheck<span class="token punctuation">.</span><span class="token function">updateAck</span><span class="token punctuation">(</span>qp<span class="token punctuation">.</span><span class="token function">getZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        learnerMaster<span class="token punctuation">.</span><span class="token function">processAck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sid<span class="token punctuation">,</span> qp<span class="token punctuation">.</span><span class="token function">getZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sock<span class="token punctuation">.</span><span class="token function">getLocalSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略其他不相干的 case</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 在半数以上的节点接收到请求并发送 ACK 后，会将请求通过 zk.commitProcessor.commit(p.request); 写入到 CommitProcessor.committedRequests 队列中；</p></li><li><p>CommitProcessor.processRequest(); </p><p>将请求加入 queuedRequests 和 queuedWriteRequests 队列</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    queuedRequests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果是写请求</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">needCommit</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        queuedWriteRequests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        numWriteQueuedRequests<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        numReadQueuedRequests<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>CommitProcessor 也是一个线程，run() 方法比较长，篇幅原因直接给出大致逻辑；</p><ol><li>队列为空，线程 wait()；【CommitProcessor.processRequest() 中的 wakeup() 唤醒】</li><li>请求为写请求，将请求写入 pendingRequests 中；【类型Map&lt;sessionId,Queue&gt;】<br> 否则直接调用下一个处理器；</li><li>根据committedRequests 是否空，设置 commitIsWaiting 属性；<br> 空 false，非空 true；</li><li>从 committedRequests 和 queuedWriteRequests 中取出一个请求，判断是否是同一个请求；<br> 是继续，否 break；</li><li>从 pendingRequests 中根据 request.sessionId 获取一个队列，并从该队列头部取出一个 request；</li><li>最后通过 processWrite(request) 将请求发送给下一个处理器；</li></ol></li></ol><h5 id="2-1-5-ToBeAppliedRequestProcessor"><a href="#2-1-5-ToBeAppliedRequestProcessor" class="headerlink" title="2.1.5_ ToBeAppliedRequestProcessor"></a>2.1.5_ ToBeAppliedRequestProcessor</h5><p>该处理器主要功能就是，将处理过的请求从队列 toBeApplied 中删除；并调用下一个处理器；</p><p>toBeApplied 队列中的请求是在 tryCommit() 方法中，leader判断可以提交后写入的；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token keyword">throws</span> RequestProcessorException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用下一个处理器</span>    next<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> zxid <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>Proposal<span class="token operator">></span> iter <span class="token operator">=</span> leader<span class="token punctuation">.</span>toBeApplied<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Proposal p <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>request <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>request<span class="token punctuation">.</span>zxid <span class="token operator">==</span> zxid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-1-6-FinalRequestProcessor"><a href="#2-1-6-FinalRequestProcessor" class="headerlink" title="2.1.6_ FinalRequestProcessor"></a>2.1.6_ FinalRequestProcessor</h5><p>将请求写入到zk 自带的数据结构 DataTree 中，并根据请求类型返回不一样的响应内容；</p><h4 id="2-2-follower-节点责任链接收请求如何处理？"><a href="#2-2-follower-节点责任链接收请求如何处理？" class="headerlink" title="2.2_ follower 节点责任链接收请求如何处理？"></a>2.2_ follower 节点责任链接收请求如何处理？</h4><p>follower 节点初始化了两个调用链；<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/838dce21beb943b48e258ca39b7ac0ee~tplv-k3u1fbpfcp-watermark.image" alt="未命名文件 (3).png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6904213790c74002802c6e3df5ff94b9~tplv-k3u1fbpfcp-watermark.image" alt="未命名文件 (4).png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setupRequestProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    RequestProcessor finalProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalRequestProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    commitProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommitProcessor</span><span class="token punctuation">(</span>finalProcessor<span class="token punctuation">,</span> Long<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">getServerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">getZooKeeperServerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    commitProcessor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    firstProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FollowerRequestProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> commitProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>FollowerRequestProcessor<span class="token punctuation">)</span> firstProcessor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    syncProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncRequestProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendAckRequestProcessor</span><span class="token punctuation">(</span><span class="token function">getFollower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    syncProcessor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2-2-1-FollowerRequestProcessor"><a href="#2-2-1-FollowerRequestProcessor" class="headerlink" title="2.2.1_ FollowerRequestProcessor"></a>2.2.1_ FollowerRequestProcessor</h5><ol><li><p>FollowerRequestProcessor.processRequest() 将请求写入 queuedRequests 队列中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> <span class="token keyword">boolean</span> checkForUpgrade<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>finished<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>checkForUpgrade<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Request upgradeRequest <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                upgradeRequest <span class="token operator">=</span> zks<span class="token punctuation">.</span><span class="token function">checkUpgradeSession</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeeperException</span> ke<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>upgradeRequest <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queuedRequests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>upgradeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        queuedRequests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>FollowerRequestProcessor.run()</p><p>follower 节点在调用下一个处理器前，会判断是否是 leader 节点发送过来的消息；如果不是，将请求转发给 leader 节点；否则调用下一个处理器 CommitProcessor</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>finished<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Request request <span class="token operator">=</span> queuedRequests<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 尝试调用下一个处理器</span>            <span class="token function">maybeSendRequestToNextProcessor</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 根据请求的类型，将请求转发给 leader</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>sync<span class="token operator">:</span>                zks<span class="token punctuation">.</span>pendingSyncs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                zks<span class="token punctuation">.</span><span class="token function">getFollower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>create<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>create2<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>createTTL<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>createContainer<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>delete<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>deleteContainer<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>setData<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>reconfig<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>setACL<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>multi<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>check<span class="token operator">:</span>                zks<span class="token punctuation">.</span><span class="token function">getFollower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>createSession<span class="token operator">:</span>            <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>closeSession<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">isLocalSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    zks<span class="token punctuation">.</span><span class="token function">getFollower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>👇👇👇<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">maybeSendRequestToNextProcessor</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token keyword">throws</span> RequestProcessorException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>skipLearnerRequestToNextProcessor <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">isFromLearner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServerMetrics<span class="token punctuation">.</span><span class="token function">getMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>SKIP_LEARNER_REQUEST_TO_NEXT_PROCESSOR_COUNT<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        nextProcessor<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-2-2-CommitProcessor"><a href="#2-2-2-CommitProcessor" class="headerlink" title="2.2.2_ CommitProcessor"></a>2.2.2_ CommitProcessor</h5><p>同 leader 节点的 CommitProcessor 一致</p></li></ol><h5 id="2-2-3-FinalRequestProcessor"><a href="#2-2-3-FinalRequestProcessor" class="headerlink" title="2.2.3_ FinalRequestProcessor"></a>2.2.3_ FinalRequestProcessor</h5><p>同 leader 节点的 FinalRequestProcessor 一致</p><h5 id="2-2-4-SyncRequestProcessor"><a href="#2-2-4-SyncRequestProcessor" class="headerlink" title="2.2.4_ SyncRequestProcessor"></a>2.2.4_ SyncRequestProcessor</h5><p>同 leader 节点的 SyncRequestProcessor 一致</p><h5 id="2-2-5-SendAckRequestProcessor"><a href="#2-2-5-SendAckRequestProcessor" class="headerlink" title="2.2.5_ SendAckRequestProcessor"></a>2.2.5_ SendAckRequestProcessor</h5><p>leader 节点的AckRequestProcessor 是直接调用leader 节点的tryToCommit() 方法；</p><p>follower 节点 SendAckRequestProcessor 需要将Ack消息发送到leader节点进行统计处理；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>Request si<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>si<span class="token punctuation">.</span>type <span class="token operator">!=</span> OpCode<span class="token punctuation">.</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QuorumPacket qp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPacket</span><span class="token punctuation">(</span>Leader<span class="token punctuation">.</span>ACK<span class="token punctuation">,</span> si<span class="token punctuation">.</span><span class="token function">getHdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            learner<span class="token punctuation">.</span><span class="token function">writePacket</span><span class="token punctuation">(</span>qp<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 省略异常处理代码</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在线蹲赞环节 </p><p>老板！点个赞呗！！<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3179ae7cb2248c887f59094056ace83~tplv-k3u1fbpfcp-watermark.image" alt="1631955135(1).png"></p>]]></content>
      
      
      <categories>
          
          <category> 源码研读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper 启动过程/leader 选举</title>
      <link href="/2021/08/16/zookeeper/"/>
      <url>/2021/08/16/zookeeper/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇博文结合zookeeper源码食用更佳哦！zookeeper 源码可以直接从<a href="https://github.com/apache/zookeeper">github</a>下载编译！</p><h2 id="zookeeper-集群模式下做了哪些事情？"><a href="#zookeeper-集群模式下做了哪些事情？" class="headerlink" title="zookeeper 集群模式下做了哪些事情？"></a>zookeeper 集群模式下做了哪些事情？</h2><ol><li>初始化通信方式 netty/NIO，并在后续启动</li><li>初始化zookeeper保存自身信息的zookeeper节点</li><li>启动内嵌的 jetty 服务器（通过jetty的start方法，本文不作赘述）</li><li>选举出 leader *</li></ol><p>接下来让我们顺着源码图，从源码出发看看zookeeper到底是如何启动的。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56c338fc326e4f338653a7cc8ddc4623~tplv-k3u1fbpfcp-watermark.image" alt="zookeeper 启动 + leader选举.png"></p><p>zookeeper 集群启动入口：QuorumPeerMain.main(); </p><p>main方法中调用 initializeAndRun() 解析zookeeper配置文件，如果配置文件中配置了集群，则执行 runFromConfig() 方法；</p><p>所有关键性的代码都在这个方法中，仔细研究这个方法后我们发现以下关键性代码</p><h3 id="1、-初始化通信方式-netty-NIO，并在后续启动"><a href="#1、-初始化通信方式-netty-NIO，并在后续启动" class="headerlink" title="1、 初始化通信方式 netty/NIO，并在后续启动"></a>1、 初始化通信方式 netty/NIO，并在后续启动</h3><p>zookeeper 作为一个分布式应用的高性能协调服务，必然需要和其他分布式应用相互通信，nio/netty等基于socket的通信方式成为了他的不二之选。</p><p>zookeeper 默认使用NIO做为通信方式，但是官方推荐使用netty。</p><p>【QuorumPeerMain.runFromConfig()  中代码】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cnxnFactory <span class="token operator">=</span> ServerCnxnFactory<span class="token punctuation">.</span><span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnxnFactory<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getMaxClientCnxns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getClientPortListenBacklog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>【ServerCnxnFactory.createFactory() 中代码】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ZOOKEEPER_SERVER_CNXN_FACTORY <span class="token operator">=</span> <span class="token string">"zookeeper.serverCnxnFactory"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> ServerCnxnFactory <span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String serverCnxnFactoryName <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>ZOOKEEPER_SERVER_CNXN_FACTORY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>serverCnxnFactoryName <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverCnxnFactoryName <span class="token operator">=</span> NIOServerCnxnFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ServerCnxnFactory serverCnxnFactory <span class="token operator">=</span> <span class="token punctuation">(</span>ServerCnxnFactory<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>serverCnxnFactoryName<span class="token punctuation">)</span>                                                                       <span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                       <span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> serverCnxnFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>zookeeper 从系统配置中尝试获取 <code>zookeeper.serverCnxnFactory</code> ，如果能获取到则使用配置的通信方法，否则使用NIOServerCnxnFactory；然后通过反射实例化。<strong>此时netty还没有设置监听端口，没有开始事件监听</strong></p><p>我们可以通过系统配置<code>zookeeper.serverCnxnFactory=org.apache.zookeeper.server.NettyServerCnxnFactory</code>启用 netty；</p><p>ServerCnxnFactory 有4种实现，默认使用nio，推荐使用netty；</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce4a10c40647479ab508291c5b8c362b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="2、-初始化zookeeper保存自身信息的zookeeper节点"><a href="#2、-初始化zookeeper保存自身信息的zookeeper节点" class="headerlink" title="2、 初始化zookeeper保存自身信息的zookeeper节点"></a>2、 初始化zookeeper保存自身信息的zookeeper节点</h3><p>使用过zookeeper的同学应该会发现，zookeeper在启动后，默认会有一个zookeeper节点，这个节点是zookeeper用于储存自身信息的；</p><p>【QuorumPeerMain.runFromConfig()  中代码】</p><pre class=" language-java"><code class="language-java">quorumPeer<span class="token punctuation">.</span><span class="token function">setZKDatabase</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZKDatabase</span><span class="token punctuation">(</span>quorumPeer<span class="token punctuation">.</span><span class="token function">getTxnFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ZKDatabase  中通过createDataTree();调用 new DataTree() 新建初始化节点</p><p>【new DataTree() 中代码】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String rootZookeeper <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String procZookeeper <span class="token operator">=</span> <span class="token string">"/zookeeper"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String quotaZookeeper <span class="token operator">=</span> <span class="token string">"/zookeeper/quota"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> DataNode procDataNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>1L<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StatPersisted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> DataNode quotaDataNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>1L<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StatPersisted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">DataTree</span><span class="token punctuation">(</span>DigestCalculator digestCalculator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>digestCalculator <span class="token operator">=</span> digestCalculator<span class="token punctuation">;</span>    nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeHashMapImpl</span><span class="token punctuation">(</span>digestCalculator<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodes<span class="token punctuation">.</span><span class="token function">putWithoutDigest</span><span class="token punctuation">(</span>rootZookeeper<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>procChildZookeeper<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>procZookeeper<span class="token punctuation">,</span> procDataNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    procDataNode<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>quotaChildZookeeper<span class="token punctuation">)</span><span class="token punctuation">;</span>    nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>quotaZookeeper<span class="token punctuation">,</span> quotaDataNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addConfigNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nodeDataSize<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">approximateDataSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        dataWatches <span class="token operator">=</span> WatchManagerFactory<span class="token punctuation">.</span><span class="token function">createWatchManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        childWatches <span class="token operator">=</span> WatchManagerFactory<span class="token punctuation">.</span><span class="token function">createWatchManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、选举出-leader"><a href="#4、选举出-leader" class="headerlink" title="4、选举出 leader"></a>4、选举出 leader</h3><p>第一轮：zookeeper集群中的节点在启动时，会将自身推举为leader【生成一张自身信息的选票(myid+zxid+选举周期)】，发送给所有其他参与选举的节点，这是第一轮，这一轮肯定无法选举出leader；</p><p>第二轮：在接受到其他节点的选票时，当前节点会将接收到的选票 和 自己发出的选票 进行对比【对比规则：选举周期最大 &gt; 数据最新 &gt; id最大】，根据选举规则判断两张选票的优先级，优先级高的选票会再次被发送出去，并记录在当前节点本地缓存中，直到集群半数以上的节点的选票一致；</p><p>【QuorumPeerMain.runFromConfig()  中代码】</p><pre class=" language-java"><code class="language-java">quorumPeer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【quorumPeer.start()  中代码】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">loadDataBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">startServerCnxnFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        adminServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AdminServerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">startLeaderElection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">startJvmPauseMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>startServerCnxnFactory()</code> 方法会调用【<strong>1</strong>】中初始化的通信类的 start 方法，官方推荐netty，所以我们看下 NettyServerCnxnFactory</p><p>【NettyServerCnxnFactory.statrt() 中代码】</p><p>netty开启监听端口，接受客户端/其他节点的传输的数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>listenBacklog <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bootstrap<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> listenBacklog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    parentChannel <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>localAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">syncUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localAddress <span class="token operator">=</span> <span class="token punctuation">(</span>InetSocketAddress<span class="token punctuation">)</span> parentChannel<span class="token punctuation">.</span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>【startLeaderElection()】</p><p>将自己做为leader，新建一张选票【不是真正发送出去的选票，这是当前节点存储的自己认为的 leader信息】，可以看出选票的信息【myid+zxid+选举周期】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">startLeaderElection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPeerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ServerState<span class="token punctuation">.</span>LOOKING<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentVote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vote</span><span class="token punctuation">(</span>myid<span class="token punctuation">,</span> <span class="token function">getLastLoggedZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getCurrentEpoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>electionAlg <span class="token operator">=</span> <span class="token function">createElectionAlgorithm</span><span class="token punctuation">(</span>electionType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>本质上 quorumPeer 是一个线程，所以  super.start(); 其实调用的是 quorumPeer的 run() 方法</p><p>让我们看看run 方法到底做了什么，这个方法比较长，此处我们只看 LOOKING 状态的重点代码【省略了其他状态的代码以及异常处理代码】</p><p>【quorumPeer.run() 中代码】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> LOOKING<span class="token operator">:</span>    ······    <span class="token function">setCurrentVote</span><span class="token punctuation">(</span><span class="token function">makeLEStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookForLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ······</code></pre><p>【FastLeaderElection.lookForLeader() 中代码】</p><p>这段代码加上注释长达230行，此处也只看重点部分。</p><p><code>updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());</code>是将自身的 myid+zxid+选举周期 保存到 FastLeaderElection 类变量中；</p><p><code>sendNotifications();</code> 将数据保存到一个 LinkedBlockingQueue 中，然后有其他线程去发送给其他节点；</p><p><code>Notification n = recvqueue.poll(notTimeout, TimeUnit.MILLISECONDS);</code> 中的 <strong>recvqueue</strong> 【是实例化 quorumPeer 是注册的一个WorkerReceiver 线程去接受其他节点发送过来的选票，保存在这个队列中】</p><p><code>n.electionEpoch &gt; logicalclock.get()</code> 比较收到的选票的选举周期和自己本地记录的逻辑时钟；</p><ol><li> 如果接受到的选票 选举周期比较大，更新本地的逻辑时钟，然后对比两个选票</li><li>如果接收到的选票 选举周期小，直接跳过这个选票</li><li>如果相等，对比两个选票</li></ol><p><code>totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, getInitId(), getInitLastLoggedZxid(), getPeerEpoch())</code> 将接收到的选票和当前选票进行对比【对比规则：选举周期最大 &gt; 数据最新 &gt; id最大】，将最合适做leader的选票，保存到 FastLeaderElection  类变量中；</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/460c9dcda1874785a31f269e18b33d07~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>voteSet.hasAllQuorums()</code> 直到接收到所有节点的选票，此时 FastLeaderElection  类变量中保存的数据就是最终的leader节点数据，返回最终节点数据</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Vote<span class="token operator">></span> recvset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Vote<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Vote<span class="token operator">></span> outofelection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Vote<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    logicalclock<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">updateProposal</span><span class="token punctuation">(</span><span class="token function">getInitId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getInitLastLoggedZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getPeerEpoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sendNotifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Notification n <span class="token operator">=</span> recvqueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>notTimeout<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> LOOKING<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>electionEpoch <span class="token operator">></span> logicalclock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logicalclock<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>electionEpoch<span class="token punctuation">)</span><span class="token punctuation">;</span>            recvset<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">totalOrderPredicate</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">,</span> <span class="token function">getInitId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getInitLastLoggedZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getPeerEpoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">updateProposal</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">updateProposal</span><span class="token punctuation">(</span><span class="token function">getInitId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getInitLastLoggedZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getPeerEpoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">sendNotifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>electionEpoch <span class="token operator">&lt;</span> logicalclock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">totalOrderPredicate</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">,</span> proposedLeader<span class="token punctuation">,</span> proposedZxid<span class="token punctuation">,</span> proposedEpoch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">updateProposal</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sendNotifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        recvset<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>sid<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Vote</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>electionEpoch<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        voteSet <span class="token operator">=</span> <span class="token function">getVoteTracker</span><span class="token punctuation">(</span>recvset<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Vote</span><span class="token punctuation">(</span>proposedLeader<span class="token punctuation">,</span> proposedZxid<span class="token punctuation">,</span> logicalclock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proposedEpoch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>voteSet<span class="token punctuation">.</span><span class="token function">hasAllQuorums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> recvqueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>finalizeWait<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">totalOrderPredicate</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">,</span> proposedLeader<span class="token punctuation">,</span> proposedZxid<span class="token punctuation">,</span> proposedEpoch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    recvqueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setPeerState</span><span class="token punctuation">(</span>proposedLeader<span class="token punctuation">,</span> voteSet<span class="token punctuation">)</span><span class="token punctuation">;</span>                Vote endVote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vote</span><span class="token punctuation">(</span>proposedLeader<span class="token punctuation">,</span> proposedZxid<span class="token punctuation">,</span> logicalclock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proposedEpoch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">leaveInstance</span><span class="token punctuation">(</span>endVote<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> endVote<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/527c2f267c934d63815e2299e0db8f57~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 源码研读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列[2]--RocketMQ</title>
      <link href="/2021/04/28/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-2-RocketMQ/"/>
      <url>/2021/04/28/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-2-RocketMQ/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是消息队列，消息队列什么用"><a href="#什么是消息队列，消息队列什么用" class="headerlink" title="什么是消息队列，消息队列什么用"></a>什么是消息队列，消息队列什么用</h2><p><a href="https://juejin.cn/post/6937233988821975077">什么是消息队列？消息队列什么用？</a></p><h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><h3 id="RocketMQ的工作模型"><a href="#RocketMQ的工作模型" class="headerlink" title="RocketMQ的工作模型"></a>RocketMQ的工作模型</h3><p>下图是 rocketMQ源码中 的架构图  </p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fc70e3956d44c1cacd04f481557c1af~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li><strong>producer</strong>：生产者</li><li><strong>nameServer</strong>：轻量级的服务路由注册中心，主要提供了两大功能：<ul><li>broker管理：nameServer接受broker集群的注册，并提供心跳机制，来确定broker是否存活</li><li>路由信息管理：保存在broker集群的整个路由信息。生产者/消费者通过nameServer就可以知道整个broker集群的路由信息，并进行消息投递。<br>nameServer通常也是使用集群的部署方式【集群中的nameServer 不进行数据同步】，borker集群会向每个nameServer注册自己的路由信息，这确保了一台nameServer宕机的情况下，其他nameServer仍可以对外提供服务。</li></ul></li><li><strong>broker</strong>：消息的保存和传递，通过虚拟topic和实际的queue【一个topic下包含多个queue】保存消息。包含以下服务<ul><li><code>Remoting Module</code>：broker的子模块，用于处理客户端请求</li><li><code>Client Manager</code>：管理客户端（生产者、消费者）并维护消费者的topic订阅情况</li><li><code>Store Service</code>：提供消息的持久化服务</li><li><code>HA Service</code>：提供主从消息复制的服务</li><li><code>Index Service</code>：建立消息的索引，便于消息的快速查询</li></ul></li><li><strong>consumer</strong>：消费者</li></ul><p>前面的架构图，缺少了broker内部相关内容</p><ul><li><strong>topic</strong>：broker上的逻辑分组，仅是一个逻辑上的概念。</li><li><strong>message queue</strong>：broker上真实存在的内存区域，消息的最终目的地和消息的保存地。<h3 id="RocketMQ的7种消息"><a href="#RocketMQ的7种消息" class="headerlink" title="RocketMQ的7种消息"></a>RocketMQ的7种消息</h3></li></ul><ol><li>普通消息<ul><li>普通消息根据生产者的发送方式可以分成：同步，异步，单向消息三种。其中同/异步消息，需要RocketMQ的确认回复，单向消息无需回复。</li></ul></li><li>顺序消息<ul><li>顺序消息，其实是理用queue 先进先出的原理，将需要顺序消费的消息，发送到同一个queue中。在被消费时，由于先进先出的原则，确保消息的顺序性。实际上这个顺序只能确保局部有序。</li></ul></li><li>广播消息<ul><li>正如字面意思，有一个生产者发送的消息，所有消费者都可以进行消费且互不影响。</li></ul></li><li>延迟消息<ul><li>生产者发送消息时，设置一个延时等级，根据 rocketMQ 延时等级默认对应的时长，进行延时发送，消费者端与普通消息没什么区别</li></ul></li><li>批量消息<ul><li>生产者端在发生消息时，累积到一定数量在批量发送</li></ul></li><li>过滤消息<ul><li>在生产者发送消息时，设置过滤条件，消费者端根据过滤条件选择适合自己的消息进行消费。</li></ul></li><li>事务消息<ul><li>生产者发送的消息会被发送到<code>TOPIC</code> 为 <code>RMQ_SYS_TRANS_HALF_TOPIC</code> 对应的队列中，然后执行生产者本地事务，如果本地事务执行成功并返回成功，那么会将生产者之前发送的消息从<code>RMQ_SYS_TRANS_HALF_TOPIC</code> 对应的队列中移出，并移入生产者指定的队列。否则生产者发送的队列会被回退。</li><li>当然这只保证了本地事务和消息写入的事务一致性，如果需要确保下游消费者也达到一致性，需要分布式事务的支持。</li><li>使用场景：淘宝下单但是未付款，存在15分钟的等待支付时长。下单时，先给broker返回 unknown 信号，等待mq回查支付状态，判断15还没有支付，取消订单。</li></ul> <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aaf620bee284483e9fe9b6aec7904d0e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><h3 id="RocketMQ和spring-boot的整合"><a href="#RocketMQ和spring-boot的整合" class="headerlink" title="RocketMQ和spring_boot的整合"></a>RocketMQ和spring_boot的整合</h3>示例代码已上传至 <a href="https://github.com/zhouxh-z/spring-boot-rocketmq">GITHUB</a><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>rocketmq-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><pre class=" language-propertries"><code class="language-propertries">rocketmq.name-server=172.12.11.10:9876rocketmq.producer.group=topic_test-consumerGroup</code></pre><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerControl</span> <span class="token punctuation">{</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ProducerControl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    RocketMQTemplate rocketMQTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * convertAndSend()     *  springboot对rocketmq API 的封装     *  方法参数     *      destination：topic:tag 的拼凑，底层会根据 ":" 来分割     *      payload：荷载 ，实际发送的内容     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMSG"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sendMSG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 普通消息</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topic_test:tagXXX"</span><span class="token punctuation">,</span><span class="token string">"hello-world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"普通消息发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 顺序消息</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            SendResult sendResult <span class="token operator">=</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSendOrderly</span><span class="token punctuation">(</span><span class="token string">"topic_test"</span><span class="token punctuation">,</span> <span class="token string">"order_message_"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"顺序消息:{},发送状态:{}"</span><span class="token punctuation">,</span>sendResult<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 广播消息: 和生产者和普通发消息一致，消费者在消费时，messageModel需要设置为 BROADCASTING 广播模式         */</span>        <span class="token comment" spellcheck="true">// 延迟消息--消息发送时设置延时等级 delayLevel</span>        <span class="token comment" spellcheck="true">// syncSend(String destination, Message&lt;?> message, long timeout, int delayLevel)</span>        Message delayedMessage <span class="token operator">=</span> MessageBuilder<span class="token punctuation">.</span><span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token string">"delayed_message"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageHeaders</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token string">"topic_test"</span><span class="token punctuation">,</span>delayedMessage<span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"延时消息发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 批量消息：将多个消息合并成一个批量消息，一次发送</span>        List<span class="token operator">&lt;</span>Message<span class="token operator">></span> messageList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Message<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            messageList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>MessageBuilder<span class="token punctuation">.</span><span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token string">"batch_message_"</span><span class="token operator">+</span>i<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageHeaders</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token string">"topic_test"</span><span class="token punctuation">,</span>messageList<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"批量消息发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 过滤消息：主要是消费者端过滤，设置tag 或者 sql92 模式</span>        Message<span class="token operator">&lt;</span>String<span class="token operator">></span> tag_message <span class="token operator">=</span> MessageBuilder<span class="token punctuation">.</span><span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token string">"tag_message"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MessageHeaders</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token string">"topic_test:tag_A"</span><span class="token punctuation">,</span>tag_message<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"过滤消息发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 事务消息</span>        Message message <span class="token operator">=</span> MessageBuilder<span class="token punctuation">.</span><span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token string">"transaction_message"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageHeaders</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span><span class="token string">"topic_test"</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"事务消息发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">getProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setProducerGroup</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"发送成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="生产者-事务消息监听器-需要事务消息，才需要这个类"><a href="#生产者-事务消息监听器-需要事务消息，才需要这个类" class="headerlink" title="生产者 - 事务消息监听器(需要事务消息，才需要这个类)"></a>生产者 - 事务消息监听器(需要事务消息，才需要这个类)</h5><p>executeLocalTransaction： 本地事务方法，如果本地事务执行成功，则返回success，那么不会再调用回查方法（checkLocalTransaction）；</p><p>checkLocalTransaction：如果本地事务方法失败，rocketMQ会执行该方法，回查本地事务是否成功。如果成功，正常写入消息到对应的topic中。</p><pre class=" language-JAVA"><code class="language-JAVA">@RocketMQTransactionListener()public class MyTransactionListener implements RocketMQLocalTransactionListener {    Logger logger = LoggerFactory.getLogger(MyTransactionListener.class);    @Override    public RocketMQLocalTransactionState executeLocalTransaction(Message message, Object o) {        logger.info("executeLocalTransaction:"+message);        // 如果本地业务处理成功且返回成功，则不会在执行回查方法 checkLocalTransaction        return RocketMQLocalTransactionState.UNKNOWN;    }    @Override    public RocketMQLocalTransactionState checkLocalTransaction(Message message) {        logger.info("checkLocalTransaction:"+message);        return RocketMQLocalTransactionState.COMMIT;    }}</code></pre><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>consumerGroup <span class="token operator">=</span> <span class="token string">"topic_test-consumerGroup"</span><span class="token punctuation">,</span> topic <span class="token operator">=</span> <span class="token string">"topic_test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Consumer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费消息:"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p>由于消息队列的高可靠性要求，rocketMQ的数据必须进行持久化<br>下图是rocketMQ源码中提供的消息存储架构图<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/298ab0d578fd44a6b0951baf80f96f77~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>消息存储架构图中主要有下面三个跟消息存储相关的文件构成。</p><ol><li><p><strong>CommitLog</strong>：消息主体以及元数据的存储主体，存储Producer端写入的消息主体内容。采用顺序写的方式，预先在磁盘中划定一块存储（大小为1G），然后Producer端写入消息时，按序追加到这个文件中，直到该文件存储满。再划定新存储区域（大小为1G）；</p></li><li><p><strong>ConsumeQueue</strong>：消息消费队列，引入的目的主要是提高消息消费的性能，由于RocketMQ是基于主题topic的订阅模式，消息消费是针对主题进行的，如果要遍历commitlog文件中根据topic检索消息是非常低效的。Consumer即可根据ConsumeQueue来查找待消费的消息。其中，ConsumeQueue（逻辑消费队列）作为消费消息的索引，保存了指定Topic下的队列消息在CommitLog中的起始物理偏移量offset，消息大小size和消息Tag的HashCode值。；</p></li><li><p><strong>IndexFile</strong>：IndexFile（索引文件）提供了一种可以通过key或时间区间来查询消息的方法。文件名fileName是以创建时的时间戳命名的，固定的单个IndexFile文件大小约为400M，一个IndexFile可以保存 2000W个索引，IndexFile的底层存储设计为在文件系统中实现HashMap结构，故rocketmq的索引文件其底层实现为hash索引。</p></li></ol><p>根绝上面架构我们可以知道以下几个结论</p><ul><li>consumerQueue和IndexFile文件中保存都是消息再commitLog中的索引，【索引和数据分离】</li><li>消息从commitlog  →  consumerQueue和IndexFile，必然存在一个后台进程不停地分发请求并异步构建ConsumeQueue（逻辑消费队列）和IndexFile（索引文件）数据</li><li>基于磁盘文件的操作还能拥有如此高的吞吐量，rocketMQ 对文件的读写做出了大量优化<ul><li>利用了NIO中的FileChannel模型将磁盘上的物理文件直接映射到用户态的内存地址（<strong>MMAP</strong>），减少了文件从用户态复制到应用内存的性能开销。将对文件的操作转化为直接对内存地址进行操作。</li><li>**页缓存（PageCache)**：部分特殊的内存空间，再文件写入时，先写人pageCache，然后由操作系统的内核线程写入磁盘。<h4 id="何时持久化"><a href="#何时持久化" class="headerlink" title="何时持久化"></a>何时持久化</h4></li></ul></li></ul><ol><li>MQ在接收到一条消息时，需要将消息持久化，否则出现MQ宕机的情况，这条消息也就丢失了</li><li>消费者消费一条消息，需要给这条消息标记一个消费状态并持久化，否则当MQ重启，标记丢失，这个消息会被重复消费。<h4 id="持久化到哪儿"><a href="#持久化到哪儿" class="headerlink" title="持久化到哪儿"></a>持久化到哪儿</h4>rocketMQ 持久化的文件保存路径需要在配置文件中指定<br>配置文件地址：/rocketmq-all-4.3.2-bin-release/conf/<br>根据rocketMQ的启动方式，选择异步或者同步配置文件<pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#存储路径</span><span class="token attr-name">storePathRootDir</span><span class="token punctuation">=</span><span class="token attr-value">/opt/store</span><span class="token comment" spellcheck="true">#commitLog 存储路径</span><span class="token attr-name">storePathCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">/opt/store/commitlog</span><span class="token comment" spellcheck="true">#消费队列存储路径存储路径</span><span class="token attr-name">storePathConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">/opt/store/consumequeue</span><span class="token comment" spellcheck="true">#消息索引存储路径</span><span class="token attr-name">storePathIndex</span><span class="token punctuation">=</span><span class="token attr-value">/opt/store/index</span><span class="token comment" spellcheck="true">#checkpoint 文件存储路径</span><span class="token attr-name">storeCheckpoint</span><span class="token punctuation">=</span><span class="token attr-value">/opt/store/checkpoint</span><span class="token comment" spellcheck="true">#abort 文件存储路径</span><span class="token attr-name">abortFile</span><span class="token punctuation">=</span><span class="token attr-value">/opt/store/abort</span></code></pre><h4 id="刷盘机制"><a href="#刷盘机制" class="headerlink" title="刷盘机制"></a>刷盘机制</h4></li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d42e460c861249ab818379cc1fb4cef8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>如上图所示，rocketMQ消息持久化到磁盘，可以分为同步刷盘和异步刷盘；</p><ul><li>同步刷盘：每次消息发送到broker，只有再消息真正写入磁盘，并返回成功ACK响应，生产者端才认为消息发送成功，消息可靠性强，吞吐量低</li><li>异步刷盘：每次消息发送到broker，只要消息被写入pageCache就会返回一个成功ACK响应。消息可能存在丢失情况，但是吞吐量高。<h3 id="消息主从同步"><a href="#消息主从同步" class="headerlink" title="消息主从同步"></a>消息主从同步</h3>如果broker是以集群的方式部署，那么必然存在一主多从之前的数据同步【master复制到slave】，消息复制的方式分为同步复制、异步复制</li><li>同步复制：等master节点和slave节点都写入成功，才给生产者返回写入成功的状态。数据安全性高，吞吐量低</li><li>异步复制：只要master节点写入成功，就给生产者返回写入成功的状态，然后异步从master 复制到 slave。吞吐量高，存在数据丢失的情况。</li><li>如何配置：conf目录下的配置文件，配置 brokerRole 参数，参数类型：ASYNC_MASTER【异步】、 SYNC_MASTER【同步】、SLAVE【从节点接受复制】<h3 id="负载均衡机制"><a href="#负载均衡机制" class="headerlink" title="负载均衡机制"></a>负载均衡机制</h3>rocketMQ 负载均衡分为：<strong>Producer端发送消息时候的负载均衡</strong>、<strong>Consumer端订阅消息的负载均衡</strong></li><li><strong>Producer端发送消息负载均衡</strong>：默认情况下，采用的<strong>随机递增取模</strong>的方式，就是第一次给某个topic发送消息时，会随机获取一个随机数，对consumerQueue的总数取模。然后根据模数从consumerQueue的列表中获取。此后再往该topic发送消息，就再原有的随机数上递增然后再取模。<br>rocketMQ还提供一个<code>sendLatencyFaultEnable</code>参数，在原有的递增取模的基础上，过滤掉上次失败的broker【在一定时间内下】，源码位置：MQFaultStrategy.selectOneMessageQueue()<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> MessageQueue <span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token keyword">final</span> TopicPublishInfo tpInfo<span class="token punctuation">,</span> <span class="token keyword">final</span> String lastBrokerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开启 sendLatencyFaultEnable 配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sendLatencyFaultEnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getSendWhichQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> pos <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">%</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                MessageQueue mq <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getMessageQueueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断是否是之前存在失败的broker，如果是，继续循环选择下一个broker</span>                <span class="token comment" spellcheck="true">// latencyFaultTolerance 该对象的更新操作在发送完成时更新，前提是打开了sendLatencyFaultEnable配置</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span>mq<span class="token punctuation">.</span><span class="token function">getBrokerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> mq<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> String notBestBroker <span class="token operator">=</span> latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">pickOneAtLeast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> writeQueueNums <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">getQueueIdByBroker</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>writeQueueNums <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> MessageQueue mq <span class="token operator">=</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>notBestBroker <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mq<span class="token punctuation">.</span><span class="token function">setBrokerName</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mq<span class="token punctuation">.</span><span class="token function">setQueueId</span><span class="token punctuation">(</span>tpInfo<span class="token punctuation">.</span><span class="token function">getSendWhichQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> writeQueueNums<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> mq<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                latencyFaultTolerance<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>notBestBroker<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error occurred when selecting message queue"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 未开启sendLatencyFaultEnable的情况下，随即递增取模</span>        <span class="token keyword">return</span> tpInfo<span class="token punctuation">.</span><span class="token function">selectOneMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><strong>Consumer端订阅消息负载均衡</strong>：根据消费模式分为广播模式 和 集群模式<ul><li>广播模式下：首先根据topic获取所有的messageQueue，然后遍历所有messageQueue，并拉取消息</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rebalanceByTopic</span><span class="token punctuation">(</span><span class="token keyword">final</span> String topic<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> isOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>messageModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> BROADCASTING<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取topic对应的messageQueue</span>            Set<span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span> mqSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicSubscribeInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mqSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 遍历所有messageQueue，挨个拉取消息</span>                <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateProcessQueueTableInRebalance</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> mqSet<span class="token punctuation">,</span> isOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>changed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">messageQueueChanged</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> mqSet<span class="token punctuation">,</span> mqSet<span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"messageQueueChanged {} {} {} {}"</span><span class="token punctuation">,</span>                        consumerGroup<span class="token punctuation">,</span>                        topic<span class="token punctuation">,</span>                        mqSet<span class="token punctuation">,</span>                        mqSet<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"doRebalance, {}, but the topic[{}] not exist."</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 省略集群模式 部分代码         */</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">updateProcessQueueTableInRebalance</span><span class="token punctuation">(</span><span class="token keyword">final</span> String topic<span class="token punctuation">,</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span> mqSet<span class="token punctuation">,</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Iterator<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>MessageQueue<span class="token punctuation">,</span> ProcessQueue<span class="token operator">>></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一次进入这里必为 空，所以省略</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>PullRequest<span class="token operator">></span> pullRequestList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>PullRequest<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>MessageQueue mq <span class="token operator">:</span> mqSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isOrder <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"doRebalance, {}, add a new mq failed, {}, because lock failed"</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 移除偏移量</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeDirtyOffset</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>            ProcessQueue pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 根据 配置 查看 从哪儿开始消费，从第一个、最后一个、某一时间时间戳 开始消费</span>            <span class="token keyword">long</span> nextOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computePullFromWhere</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextOffset <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ProcessQueue pre <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processQueueTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> pq<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"doRebalance, {}, mq already exists, {}"</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"doRebalance, {}, add a new mq, {}"</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 构建拉取请求</span>                    PullRequest pullRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PullRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    pullRequest<span class="token punctuation">.</span><span class="token function">setConsumerGroup</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pullRequest<span class="token punctuation">.</span><span class="token function">setNextOffset</span><span class="token punctuation">(</span>nextOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pullRequest<span class="token punctuation">.</span><span class="token function">setMessageQueue</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pullRequest<span class="token punctuation">.</span><span class="token function">setProcessQueue</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pullRequestList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pullRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                    changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"doRebalance, {}, add new mq failed, {}"</span><span class="token punctuation">,</span> consumerGroup<span class="token punctuation">,</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 进行拉取消息</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchPullRequest</span><span class="token punctuation">(</span>pullRequestList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> changed<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>集群模式：根据配置的负载均衡策略以及当前消费者的ClientId，进行给每个消费者分配messageQueue<pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> CLUSTERING<span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取topic的所有队列</span>     Set<span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span> mqSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topicSubscribeInfoTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 获取所有消费者</span>     List<span class="token operator">&lt;</span>String<span class="token operator">></span> cidAll <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">findConsumerIdList</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> consumerGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>mqSet <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cidAll <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span> mqAll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         mqAll<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>mqSet<span class="token punctuation">)</span><span class="token punctuation">;</span>         Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>mqAll<span class="token punctuation">)</span><span class="token punctuation">;</span>         Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cidAll<span class="token punctuation">)</span><span class="token punctuation">;</span>         AllocateMessageQueueStrategy strategy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allocateMessageQueueStrategy<span class="token punctuation">;</span>         List<span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span> allocateResult <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 根据当前消费者的ClientId和规则，进行分配messageQueue</span>             allocateResult <span class="token operator">=</span> strategy<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>consumerGroup<span class="token punctuation">,</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>mQClientFactory<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 mqAll<span class="token punctuation">,</span>                 cidAll<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token punctuation">}</span>         Set<span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span> allocateResultSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>allocateResult <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             allocateResultSet<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>allocateResult<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateProcessQueueTableInRebalance</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> allocateResultSet<span class="token punctuation">,</span> isOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span>     <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ul>   <strong>集群负载均衡策略</strong>：<ul><li>AllocateMachineRoomNearby：将同机房的Consumer和Broker优先分配在一起。</li><li>AllocateMessageQueueAveragely：平均分配。将所有MessageQueue平均分给每一个消费者</li><li>AllocateMessageQueueAveragelyByCircle：轮询分配。轮流的给一个消费者分配一个MessageQueue</li><li>AllocateMessageQueueByConfig：不分配，直接指定一个messageQueue列表</li><li>AllocateMessageQueueByMachineRoom：按逻辑机房的概念进行分配</li><li>AllocateMessageQueueConsistentHash：根绝一致性hash算法来分配MessageQueue<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c8e6623cfa54f4190247e39ffad5e49~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><h3 id="消息的重投-重试机制"><a href="#消息的重投-重试机制" class="headerlink" title="消息的重投/重试机制"></a>消息的重投/重试机制</h3><h4 id="生产者-消息重投"><a href="#生产者-消息重投" class="headerlink" title="生产者-消息重投"></a>生产者-消息重投</h4>生产者在发送消息时，出现异常导致消息没有正常发送到broker，同步消息存在重投机制、异步消息存在重试机制、单向消息没有消息安全保障。</li></ul></li><li>retryTimesWhenSendFailed：同步消息发送失败重投次数，默认2次，生产者会重新投递消息 retryTimesWhenSendFailed+1次，且不会选择上次失败的broker。</li><li>retryTimesWhenSendAsyncFailed：异步消息失败重试次数，异步重试不会选择别的broker，仅在同一台broker尝试重试。</li><li>retryAnotherBrokerWhenNotStoreOK：消息持久化超时或者slave同步失败，是否尝试投递其他broker。默认false<h4 id="消费者-消息重试"><a href="#消费者-消息重试" class="headerlink" title="消费者-消息重试"></a>消费者-消息重试</h4>生产者将消息正常发送带broker之后，消息消费失败，消费者会重新拉起消息重新消费。 </li></ul><p>RocketMQ 为每个topic设置了”%RETRY%+consumerGroup“的重试队列，且为需要重试的消息设置重试级别【1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h】，重试次数越多，重试级别越高【投递延时就越大】。</p><p>原理：消息消费失败时，rocketMQ 会将失败的消息发送到topic为”SCHEDULE_TOPIC_XXXX“的延时队列中，后台定时任务按照对应的时间重新将延时队列中的消息移入对应的topic中。</p><p>如果重试18次之后仍然失败，rocketMQ 会将失败的消息发送到死信队列中。</p><h3 id="消息的幂等性"><a href="#消息的幂等性" class="headerlink" title="消息的幂等性"></a>消息的幂等性</h3><p>在确保消息可靠性时，消息重复是不可避免的，如果业务上对于消息重复比较敏感，那么需要在业务层过滤重复的消息。</p><p>这就务必确认消息存在唯一键，可以是msgId，也可以是业务的唯一标识字段，比如订单id。在实际使用上，<strong>尽量使用业务上的唯一标识</strong>，因为有可能存在msgId不一致，但是消息内容一致的情况，如消息重试。</p><h3 id="RocketMQ是否支持高可用？如何实现高可用？"><a href="#RocketMQ是否支持高可用？如何实现高可用？" class="headerlink" title="RocketMQ是否支持高可用？如何实现高可用？"></a>RocketMQ是否支持高可用？如何实现高可用？</h3><p>RocketMQ 本身是不支持高可用的，但是可以基于 DLedger 搭建可以自动容灾切换的 RocketMQ 集群。</p><ol><li>下载rocketMQ 4.5 版本以上</li><li>至少准备三个节点</li><li>正常启动nameServer</li><li>根绝配置文化[<code>../conf/dledger</code>]下的配置文件启动broker即可<h3 id="消息丢失问题"><a href="#消息丢失问题" class="headerlink" title="消息丢失问题"></a>消息丢失问题</h3><h4 id="哪些情况可能存在消息丢失"><a href="#哪些情况可能存在消息丢失" class="headerlink" title="哪些情况可能存在消息丢失"></a>哪些情况可能存在消息丢失</h4>从上文我们大致可以知道消息从发送到消费经历了4个步骤：</li><li>生产者发送消息到mq-master节点的broker</li><li>broker主从同步</li><li>broker持久化到磁盘</li><li>消费者拉取消息消费</li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62c60b7d1e2a43859c51886a056786bb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="怎么防止消息丢失"><a href="#怎么防止消息丢失" class="headerlink" title="怎么防止消息丢失"></a>怎么防止消息丢失</h4><p>在以上4个步骤中均有可能出现消息丢失的情况，那么如何防止消息丢失也从这4点出发</p><ol><li><blockquote><p>生产者使用事务消息保障消息可靠性，可以保障生产者本地事务和发送到broker的消息事务一致性。【1可以避免】</p></blockquote></li><li><blockquote><p>RocketMQ配置同步刷盘+Dledger主从架构保证MQ自身不会丢消息【2、3可以避免】</p></blockquote></li><li><blockquote><p>消费者同步拉取消息，并在本地业务处理完成后，返回消费成功标识【4可以避免】</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文解读 redis 主从/哨兵/集群架构</title>
      <link href="/2021/03/10/%E4%B8%80%E6%96%87%E8%A7%A3%E8%AF%BB%20redis%20%E4%B8%BB%E4%BB%8E%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/"/>
      <url>/2021/03/10/%E4%B8%80%E6%96%87%E8%A7%A3%E8%AF%BB%20redis%20%E4%B8%BB%E4%BB%8E%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h2><p>主从结构示意图：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c8fc51278a04589bb4274db36302ecc~tplv-k3u1fbpfcp-watermark.image">  </p><h3 id="主从架构搭建，配置从节点："><a href="#主从架构搭建，配置从节点：" class="headerlink" title="主从架构搭建，配置从节点："></a>主从架构搭建，配置从节点：</h3><ol><li>复制 redis.conf 文件，并修改如下配置<ul><li>port 8001</li><li>pidfile /var/redis_8001.pid</li><li>logfile 8001.log</li><li>dir /usr/local/redis_8001/data</li></ul></li><li>配置主从配置<ul><li>replicaof 172.0.0.1 8002</li><li>replica-read-only yes</li></ul></li><li>根据配置文件启动redis<ul><li>redis-server redis.conf  </li></ul></li></ol><span id="more"></span><h3 id="主从结构工作原理"><a href="#主从结构工作原理" class="headerlink" title="主从结构工作原理"></a>主从结构工作原理</h3><p>master-slave数据同步过程： </p><p><strong>全量同步</strong>：slave会发送一个<strong>PSYNC</strong>命令给master，master接收到该命令后，会立即进行持久化操作，通过命令<strong>bgsava</strong>生成一个RDB快照文件，持久化期间，如果客户端仍在写入数据，这部分数据会被保存在内存缓冲区（repl buffer）中，持久化完成以后，master会将RDB文件发送给slave，slave 将数据加载到内存中，然后master会将缓冲区的命令发送给slave节点。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ccba6ea8a9ef45619a047fd74e0ee6f5~tplv-k3u1fbpfcp-watermark.image" alt="全量同步">  </p><p><strong>断点续传</strong>：当master和slave由于某些原因断开时，slave重新连接时，会发送 <strong>PSYNC(offset)</strong> 包含一个下标的命令，表示断开之前同步到了哪儿。master节点在写入数据时，会将数据写入一个缓冲区（repl backlog buffer），当master接受到 <strong>PSYNC(offset)</strong> 命令时，会先去查看offset是否在缓冲区，如果在缓存区，会将offset后面的命令发送给slave，否则直接进行一次全量同步</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b535ecf7ddc4b26bca5dbe8aeeb7119~tplv-k3u1fbpfcp-watermark.image" alt="断点续传">  </p><h3 id="主从结构可能发生的问题："><a href="#主从结构可能发生的问题：" class="headerlink" title="主从结构可能发生的问题："></a>主从结构可能发生的问题：</h3><p><strong>主从复制风暴</strong>：多个从节点同时宕机重启后，全部需要进行全量同步，导致master节点压力过大  </p><p><strong>解决方案</strong>： 将将从节点挂载在某个从节点上，数据同步也从这个从节点复制。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a1751533c3c4c36aea8e3eba291aa5b~tplv-k3u1fbpfcp-watermark.image">  </p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>哨兵模式结构示意图：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/389cf3d4bf42416ba7e1e32a51101da7~tplv-k3u1fbpfcp-watermark.image">  </p><h3 id="哨兵模式搭建，配置哨兵"><a href="#哨兵模式搭建，配置哨兵" class="headerlink" title="哨兵模式搭建，配置哨兵"></a>哨兵模式搭建，配置哨兵</h3><ol><li>复制 sentinel.conf 文件到conf目录，并修改如下配置<ul><li>port 26379</li><li>daemonize yes</li><li>pidfile “/var/run/redis-sentinel.pid”</li><li>logfile “redis_sentinel_26379.log”</li><li>dir “/home/redis/redis-6.0.9/sentinel_26379”</li><li>sentinel monitor mymaster 172.19.14.57 6379 2</li></ul></li><li>启动哨兵<ul><li>src/redis-sentinel conf/sentinel.conf</li></ul></li></ol><h3 id="哨兵的工作原理"><a href="#哨兵的工作原理" class="headerlink" title="哨兵的工作原理"></a>哨兵的工作原理</h3><p>sentinel 哨兵是特殊的redis服务，他不对外提供读写服务，只用于监控主从结构的状态。<br>哨兵模式下，client端第一次连接哨兵找出redis主节点并缓存到本地，之后直接访问redis主节点。<br>当redis节点状态发生改变，sentinel哨兵会第一时间感知到，并将新的主节点推送给客户端。（client端订阅sentinel，一有变动直接推送）   </p><p><strong>哨兵leader选举流程</strong><br>当一个 master 服务器被某 sentinel<code>[哨兵]</code>视为下线状态后，该sentinel<code>[哨兵]</code> 会与其他 sentinel<code>[哨兵]</code> 协商选出新的master，进行故障转移工作。</p><p>每个发现master服务器进入下线状态的sentinel<code>[哨兵]</code>都可以要求其他sentinel<code>[哨兵]</code>选自己为“本次决策”的leader，选举是先到先得。</p><p>同时每个sentinel每次选举都会自增配置纪元(选举周期)，每个纪元中只会选择一个sentinel的leader。如果所有超过一半的sentinel选举某sentinel作为leader。</p><p>之后由该sentinel<code>[哨兵leader]</code>进行故障转移操作，从存活的slave中选举出新的master，这个选举过程跟集群的master选举很类似<sub>【请查看下面redis集群模式的选举】</sub>。哨兵集群只有一个哨兵节点，redis的主从也能正常运行以及选举master，如果master挂了，那唯一的那个哨兵节点就是哨兵leader了，可以正常选举新master。不过为了高可用一般都推荐至少部署三个哨兵节点。为什么推荐奇数个哨兵节点原理跟集群奇数个master节点类似。</p><p><strong>哨兵模式其实就是主从结构上加了一个哨兵，所以数据同步原理和主从结构一致</strong></p><h3 id="哨兵模式可能发生的问题："><a href="#哨兵模式可能发生的问题：" class="headerlink" title="哨兵模式可能发生的问题："></a>哨兵模式可能发生的问题：</h3><p><strong>访问瞬断</strong>：在主节点宕机时，哨兵会发起选举。在选举过程中，如果客户端发起请求，会发生异常。当主节点重新选举出来，又会恢复。该问题在哨兵模式下无法避免。</p><h2 id="redis集群架构"><a href="#redis集群架构" class="headerlink" title="redis集群架构"></a>redis集群架构</h2><p>集群图示：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/847252bac04744f6893d264c35175b82~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><ol><li>复制 sentinel.conf 文件到 redis_cluster/8001/redis.conf 目录，并修改如下配置<ul><li>port 8001</li><li>daemonize yes    ######## 守护进程</li><li>pidfile /var/run/redis_8001.pid</li><li>dir /usr/local/redis-cluster/8001/</li><li>replica-read-only yes                 ######## 从节点只读</li><li>appendonly yes    #######开启AOF</li><li>cluster-enabled yes ########开启集群模式</li><li>cluster-config-file nodes-8001.conf ########### 集群信息</li><li>cluster-node-timeout 15000 ############ 集群master 节点失联多久开始选举</li><li>requirepass zhouxh_z  ########当前主机密码</li><li>masterauth zhouxh_z   ########访问其他主机密码</li></ul></li><li>启动集群节点<ul><li>src/redis-server redis_cluster/8001/redis.conf</li></ul></li><li>集群配置<ul><li>src/redis-cli -a zhouxh –cluster create –cluster-replicas 1 172.19.14.57:8001 172.19.14.57:8002 172.19.14.57:8003 172.19.14.57:8004 172.19.14.57:8005 172.19.14.57:8006 </li></ul></li><li>连接客户端<ul><li>src/redis-cli -a zhouxh -c -h 172.19.14.57 -p 8001</li></ul></li><li>查看集群信息<ul><li>cluster info</li></ul></li><li>查看节点列表<ul><li>cluster nodes<h3 id="集群原理"><a href="#集群原理" class="headerlink" title="集群原理"></a>集群原理</h3>集群下的每个小节点的同步复制，和主从一致。</li></ul></li></ol><h4 id="槽位"><a href="#槽位" class="headerlink" title="槽位"></a>槽位</h4><p>并不是真实的物理空间，是一个虚拟的概念。<br>redisCluster 将内存虚拟划分为16384个槽位，分别分配到各个master节点中。redis在存储数据时，会对key进行Hash算法在对16383取余确保，key值必定存在集群槽位上。 </p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f1bd2d4ab6f452f800e4dcc4a0d59bd~tplv-k3u1fbpfcp-watermark.image"></p><h4 id="取余算法"><a href="#取余算法" class="headerlink" title="取余算法"></a>取余算法</h4><p>hash(key) = CRC16(key) % 16383</p><h4 id="跳转重定位"><a href="#跳转重定位" class="headerlink" title="跳转重定位"></a>跳转重定位</h4><p>在集群模式下，在客户向一个redis节点发起操作命令（如 set key value），会通过<strong>取余算法</strong>计算对应的槽位，如果发现对应的槽位不在目前节点上时，会自动进行跳转重定向。 </p><p>如下：原本在 8001 端口的redis，发起set操作，通过<strong>取余算法</strong>计算key，发现zhouxh_1应该命中 8002 端口的redis所在的槽位，reids进行跳转重定向，自动将值set到了对应的槽位，并跳转到了8002 端口</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d627b69392de4a9fb3b1d16c9a096b24~tplv-k3u1fbpfcp-watermark.image">  </p><h4 id="网络抖动"><a href="#网络抖动" class="headerlink" title="网络抖动"></a>网络抖动</h4><p>网络波动可能导致部分master节点在短时间内连接不上，如果不进行限制，可能会发生频繁选举，进而导致脑裂问题。  </p><p><code>cluster-node-timeout 15000</code><br>该配置可以使master节点在失联15000后，再进行选举。有效避免频繁选举问题</p><h4 id="脑裂问题-面试常问"><a href="#脑裂问题-面试常问" class="headerlink" title="脑裂问题* 面试常问"></a>脑裂问题* <sub>面试常问</sub></h4><p>由于网络问题导致master节点和其他节点断开连接，此时master（旧）节点并没有宕机，但是其他节点认为它已经宕机了，此时slave节点将发起选举，产生一个新的master（新）节点。此时存在两个master节点，客户端认为两个master节点都正常工作，此时会向这两个master节点写入数据。当网络重新连接时，由于存在两个master节点，此时集群会将master（旧）设置为从节点（slave），挂载到master（新）上，此时从节点相当于重启，需要从master节点同步数据，这就导致了之前客户端认为正常写入（master【久】）的数据丢失了。<br>解决方法：设置半数写入配置<br><code>min‐slaves‐to‐write 1</code><br>半数写入：即一半的节点认为写入成功才算成功<br>这里的 ”1“ 可变，计算方式：（小的主从节点数-1）/2</p><h4 id="redis选举原理-面试常问"><a href="#redis选举原理-面试常问" class="headerlink" title="redis选举原理* 面试常问"></a>redis选举原理* <sub>面试常问</sub></h4><ol><li>当slave发现自己的master节点 挂了（fail）</li><li>将自己记录的集群 currentEpoch 加1，并广播 FAILOVER_AUTH_REQUEST 信息</li><li>其他节点接收到消息后，由主节点回复 FAILOVER_AUTH_ACK 信息，每个master节点只能发送一次</li><li>对应的slave节点，收集并统计 FAILOVER_AUTH_ACK 信息。</li><li>当收集到超过半数的ACK信息后，该节点自动升级为master节点。</li><li>master（新）会播Pong消息通知其他集群节点，”我已经成功上位，你们可以歇歇了，赶紧更新你们的配置“。</li></ol><p>第1步结束后，第2两步并不是马上执行，中间会有一个延迟时间，每个slave节点的延迟时间不同。<br>计算规则：<code>500ms + random(0 ~ 500ms) + SLAVE_RANK * 1000ms</code><br>SLAVE_RANK：表示此slave已经从master复制数据的总量的rank。Rank越小代表已复制的数据越新。这种方<br>式下，持有最新数据的slave将会首先发起选举（理论上）。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列[1]--RabbitMQ</title>
      <link href="/2021/03/10/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-1-RabbitMQ/"/>
      <url>/2021/03/10/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-1-RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h2><ul><li>消息：请求或应用间传输的数据</li><li>队列：一种先进先出的数据结构</li><li>消息队列：字面意思就是一种存放数据的先进先出的数据结构或者说容器</li></ul><p>总的来说：消息队列是一种服务间 <strong>异步通信组件</strong> ，主要解决应用解耦，异步处理，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性。</p><h2 id="消息队列的使用场景"><a href="#消息队列的使用场景" class="headerlink" title="消息队列的使用场景"></a>消息队列的使用场景</h2><h3 id="1、异步处理"><a href="#1、异步处理" class="headerlink" title="1、异步处理"></a>1、异步处理</h3><span id="more"></span><p>场景：项目之初用户体量小，用户从选商品到支付一条龙，单机完成。后来用户体量扩大，新增很多其他服务，如消费卷，积分等。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6862484dcfda4afc8dd1c743b0c43192~tplv-k3u1fbpfcp-watermark.image"><br>由于调用链路的增长，支付耗时也随之增加，影响用户体验。由此引入消息队列（MQ），通过异步处理，提高响应速度。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17b63a1b22ad4bed9ef0aa217ee3d0b8~tplv-k3u1fbpfcp-watermark.image"><br>支付系统支付成功后，只需要往 MQ 中，写入一条支付成功的消息。其他系统订阅后，异步处理各自业务。用户感觉到的时长就是：支付系统的消耗时间 + 写入MQ的消耗时间。</p><h3 id="2、应用解耦"><a href="#2、应用解耦" class="headerlink" title="2、应用解耦"></a>2、应用解耦</h3><ul><li><p>不引入消息队列（MQ），那支付过程中的消费卷抵扣、积分抵扣等服务，就需要对应系统暴露接口，以便在支付系统中调用。<br>  如果此时需要新增一个邮件/短信系统的功能，就需要修改支付系统后重新发布应用。这也带来的不必要的维护成本。</p></li><li><p>引入消息队列（MQ）后，支付系统不关心有哪些系统需要知道支付成功。支付系统只需向 MQ 中写入一条支付成功的消息，其他系统订阅该消息，在接收到消息时，自发的进行自身的业务即可。</p><h3 id="3、流量削峰"><a href="#3、流量削峰" class="headerlink" title="3、流量削峰"></a>3、流量削峰</h3><p>平时流量比较低，但是一到大促（比如秒杀场景），流量在某一时段突然暴增，可能出现远超服务所能承载的请求打入，导致服务宕机无法对外提供服务。</p></li></ul><p>这种情况下引入消息队列，在大量请求打入服务时，先将请求写入队列，然后服务再按自身处理能力从MQ中拉取消息进行消费，这就达到了流量削峰的作用。</p><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ 虽然再吞吐量上不及 kafka、rocketMQ，但是其高效的响应性，消息可靠性上是无与伦比的。完全可以支持用户体量不是那么高的应用。</p><h3 id="1、RabblitMQ的工作模型"><a href="#1、RabblitMQ的工作模型" class="headerlink" title="1、RabblitMQ的工作模型"></a>1、RabblitMQ的工作模型</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5f657ca2ad545db9d23e3da4c1ffeaa~tplv-k3u1fbpfcp-watermark.image"></p><ul><li>producer：生产者</li><li>connection：生产者/消费者 和 MQ 之间的TCP连接</li><li>channel：connection内部建立的虚拟连接</li><li>broker：MQ 中接受和分发消息的应用</li><li>Virtual Host：为多租户考虑和安全因素考虑的虚拟分组，不同组的用户不能相互访问</li><li>Exchange：交换机，生产者将消息发送到交换机，再有交换机发送到队列中</li><li>Queue：队列，消息在队列中等待被消费者消费</li><li>Binding：交换机和队列的绑定关系</li><li>consumer：消费者，消息的最终使用者</li></ul><p>消息生产者通过connection连接到RabbitMQ，然后建立虚拟连接[channel]，通过channel将消息发送到exchange，因为exchange和queue绑定，所以会通过exchange直接发送并保存在queue队列中，最后消费者通过connection连接到RabbitMQ，然后建立虚拟连接[channel]，通过channel从queue中获取并消费消息。</p><h3 id="2、RabbitMQ-常用的5种工作模式【共7种】"><a href="#2、RabbitMQ-常用的5种工作模式【共7种】" class="headerlink" title="2、RabbitMQ 常用的5种工作模式【共7种】"></a>2、RabbitMQ 常用的5种工作模式【共7种】</h3><ol><li><p>简单模式（hello world）<br>在下图中，“P”表示消息的生产者【producer】，“C”表示消费者【consumer】，中间的框是一个队列-RabbitMQ保留消息的缓冲区。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdb9c94c706947f7a7c1d4b343b29e5a~tplv-k3u1fbpfcp-watermark.image">  </p><blockquote><p>在这种模式下，一个生产者、一个队列、一个消费者（<code>其实还有一个默认的，不需要我们声明的exchange</code>）</p></blockquote></li><li><p>工作队列模式<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1156e55da414d21b5b2aa307616f7d1~tplv-k3u1fbpfcp-watermark.image">  </p><blockquote><p>在这种模式下，一个生产者、一个队列，但是存在<strong>多个消费者</strong>，多个消费者共同消费队列里的消息。在这种模式下<strong>一条消息 只会 被一个消费者消费</strong>（<code>其实还有一个默认的，不需要我们声明的exchange</code>）</p></blockquote></li><li><p>发布订阅模式<br>在下图中，“X”表示交换机【exchange】，需要我们手动声明。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4393b1faa0304f0fb224666847ebc8a5~tplv-k3u1fbpfcp-watermark.image"></p><blockquote><p>在这种模式下，一个生产者，一个交换机，交换机绑定多个队列，每个队列存在一个消费者。这种模式下，生产者发送的消息，每个消费者都会消费（每个消费者收到的消息是一致的）。</p></blockquote></li><li><p>Routing 匹配模式<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6f1812d15194804889ff6ee1c1a798f~tplv-k3u1fbpfcp-watermark.image"></p><blockquote><p>在这种模式下，一个生产者，一个交换机，交换机绑定多个队列，每个队列存在一个消费者。在结构上和发布订阅模式完全一致，<strong>区别在于交换机绑定队列时，给每个队列设置Routing key属性，生产者发送消息时，会携带Routing key，根据Routing key交换机会将消息发送到不同的队列中</strong></p></blockquote></li><li><p>Topic 匹配模式<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ace17680d024f9a9e53841b004229c3~tplv-k3u1fbpfcp-watermark.image"></p><blockquote><p>在这种模式下，一个生产者，一个交换机，交换机绑定多个队列，每个队列存在一个消费者。在结构和原理上和Routing 匹配模式非常相似，<strong>区别在于Routing匹配模式下，routing key 是一个固定的值，需要完成匹配，而Topic 匹配模式支持模糊匹配</strong>。<code>topic 模式通配符：“ * ”：匹配一个词；“ # ”：匹配一个或多个词，ams.* 能匹配 ams.insert； ams.# 可以匹配 ams.insert.abc 和 ams.insert</code></p></blockquote><h3 id="3、RabbitMQ-和SpringBoot-的整合"><a href="#3、RabbitMQ-和SpringBoot-的整合" class="headerlink" title="3、RabbitMQ 和SpringBoot 的整合"></a>3、RabbitMQ 和SpringBoot 的整合</h3><p>整合相关代码已上传至github <a href="https://github.com/zhouxh-z/spring-boot-rabbitmq">zhouxh-z</a></p><h4 id="3-1、生产者"><a href="#3-1、生产者" class="headerlink" title="3.1、生产者"></a>3.1、生产者</h4></li></ol><ul><li>jar包引入<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li>yml配置文件<pre class=" language-proprities"><code class="language-proprities">spring:  rabbitmq:    port: 5672    username: guest    password: guest    host: 101.37.10.135    virtual-host: /    template:      exchange: xxxxExchange      default-receive-queue: xxxxQueue      routing-key: xxxx.#</code></pre></li><li>配置类<br>配置类的作用：项目启动后在 RabbitMQ 中创建队列，创建交换机，并和队列绑定。<br>创建时间：项目启动后第一次连接mq时。<code>如果手动创建队列/交换机，并绑定，则不需要这个配置类</code><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> BeanFactory beanFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.rabbitmq.template.exchange}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String exchangeName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.rabbitmq.template.default-receive-queue}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String queueName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.rabbitmq.template.routing-key}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String routeName<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"exchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Exchange <span class="token function">buildExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> ExchangeBuilder<span class="token punctuation">.</span><span class="token function">topicExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">buildQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"binder"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Binding <span class="token function">buildBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Queue queue <span class="token operator">=</span> <span class="token punctuation">(</span>Queue<span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Exchange exchange <span class="token operator">=</span> <span class="token punctuation">(</span>Exchange<span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"exchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>routeName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>消息发送类<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerSender</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.rabbitmq.template.exchange}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String exchangeName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.rabbitmq.template.routing-key}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String routeName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMSG"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMSG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span>routeName<span class="token punctuation">,</span><span class="token string">"testMSG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-2、消费者"><a href="#3-2、消费者" class="headerlink" title="3.2、消费者"></a>3.2、消费者</h4></li><li>依赖和配置文件<br>与生产者一致</li><li>消息接收类<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ackMode = "MANUAL" 如果需要手动签收消息，则设置，否则不需要</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"zhouxhQueue"</span><span class="token punctuation">,</span>ackMode <span class="token operator">=</span> <span class="token string">"MANUAL"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span>Message ms<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行业务，伪代码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 手动签收</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 拒收,第二个 Boolean 入参表示消息是否 返回 对列，false表示消息直接丢弃</span>        <span class="token comment" spellcheck="true">// 如果返回队列，存在一个问题 ，该消息将一直重新被消费,需要手动实现重试次数，比如重试次数保存到缓存中，进行手动判断</span>        <span class="token comment" spellcheck="true">//channel.basicNack(ms.getMessageProperties().getDeliveryTag(),true,true);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、RebbitMQ-高可用集群搭建"><a href="#4、RebbitMQ-高可用集群搭建" class="headerlink" title="4、RebbitMQ 高可用集群搭建"></a>4、RebbitMQ 高可用集群搭建</h3></li></ul><ol><li>首先搭建好两台单机 RabbitMQ，并分别启动</li><li><code>rabbitmqctl stop_app</code> 两台单机 RabbitMQ 都停止对外服务</li><li><code>rabbitmqctl join_cluster rabbit@101.37.10.135</code> 分别将两台 RabbitMQ 加入服务</li><li><code>rabbitmqctl start_app</code> 分别将两台 RabbitMQ 重新开启对外服务</li><li>通过<code>rabbitmqctl cluster_status</code> 就可以查看 RabbitMQ 的集群状态了<h3 id="5、RabbitMQ-高级特性"><a href="#5、RabbitMQ-高级特性" class="headerlink" title="5、RabbitMQ 高级特性"></a>5、RabbitMQ 高级特性</h3></li></ol><h4 id="5-1、RabbitMQ-消息的可靠性传递是如何保障的？"><a href="#5-1、RabbitMQ-消息的可靠性传递是如何保障的？" class="headerlink" title="5.1、RabbitMQ 消息的可靠性传递是如何保障的？"></a>5.1、RabbitMQ 消息的可靠性传递是如何保障的？</h4><ol><li><p>从生产者到交换机，Confirm 确认模式(springboot-rabbitmq 默认开启)</p><ul><li><p>生产者将消息发送到exchange时，会通过confirm回调，告知生产者发送状态。</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//定义回调</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       *       * @param correlationData 相关配置信息       * @param ack   exchange交换机 是否成功收到了消息。true 成功，false代表失败       * @param cause 失败原因       */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> String cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"confirm方法被执行了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//ack 为  true表示 消息已经到达交换机</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//接收成功</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收成功消息"</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//接收失败</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收失败消息"</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//做一些处理，让消息再次发送。</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>从交换机到队列，return 回退模式 （开启 rabbitmq.publisher-returns: true）</p><ul><li><p>exchange 收到消息后，通过routing key匹配对应的 queue时，会通过return 回调，告知生产者发送状态</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//设置交换机处理失败消息的模式   为true的时候，消息达到不了 队列时，会将消息重新返回给生产者</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义回调</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       *       * @param message   消息对象       * @param replyCode 错误码       * @param replyText 错误信息       * @param exchange  交换机       * @param routingKey 路由键       */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">int</span> replyCode<span class="token punctuation">,</span> String replyText<span class="token punctuation">,</span> String exchange<span class="token punctuation">,</span> String routingKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"return 执行了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message:"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"replyCode:"</span><span class="token operator">+</span>replyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"replyText:"</span><span class="token operator">+</span>replyText<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exchange:"</span><span class="token operator">+</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"routingKey:"</span><span class="token operator">+</span>routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//处理</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>从队列到消费者，签收机制（开启：acknowledge-mode: manual）</p><ul><li>消费者从队列中拉取消息，如果在消息消费过程中出现异常，我们可以手动拒收消息，然后重新拉取消息。否则正常签收。<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 手动签收</span>channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 拒收,第二个 Boolean 入参表示消息是否 返回 对列</span><span class="token comment" spellcheck="true">// 如果返回队列，存在一个问题 ，该消息将一直重新被消费,需要手动实现重试次数，比如保存到缓存中</span>channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>exchange、queue、message 等持久化</p><h4 id="5-2、限流"><a href="#5-2、限流" class="headerlink" title="5.2、限流"></a>5.2、限流</h4><p>在大促或者秒杀场景下，生产者瞬间打入大量消息，可能因为消费者消费能力不够的问题，导致服务宕机。<br>应对这种瞬间的大流量，消费者的限流是非常有必要的。</p></li></ol><p>通过指定监听器工厂，可以达到限流的效果</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CachingConnectionFactory connectionFactory<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"listenerContainer"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SimpleRabbitListenerContainerFactory <span class="token function">listenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SimpleRabbitListenerContainerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置限流数量</span>        factory<span class="token punctuation">.</span><span class="token function">setPrefetchCount</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 <code>@RabbitListener</code> 注解中指定 containerFactory</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"zhouxhQueue"</span><span class="token punctuation">,</span>ackMode <span class="token operator">=</span> <span class="token string">"MANUAL"</span><span class="token punctuation">,</span>containerFactory <span class="token operator">=</span> <span class="token string">"listenerContainer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span>Message ms<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 手动签收</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><h4 id="5-3、延迟队列"><a href="#5-3、延迟队列" class="headerlink" title="5.3、延迟队列"></a>5.3、延迟队列</h4><p>RabbitMQ 没有自带的延迟队列，但是我们可以通过 <strong>TTL队列 和 死信队列</strong> 完成延迟队列的效果。</p><ol><li>TTL：配置了超时时间的队列，该队列中的消息达到超时时间还没有被消费，会得删除</li><li>死信队列：对于RabbitMQ来说，其实是死信交换机，我们在一个队列中绑定一个死信交换机，然后当消息死信后就会通过这个死信交换机，进入一个普通队列。<br>下图中的“DLX”其实就是DEAD LETTER EXCHANGE（死信交换机）。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be55018fc8ec4983ae3c9b7bb64d38fd~tplv-k3u1fbpfcp-watermark.image"></li></ol><p><strong>进入死心队列的三种方式</strong></p><ul><li>队列中的消息已经满了，此时新进入的消息会直接进入死信队列</li><li>消费者拒绝签收，且不重入队列</li><li>原队列设置了超时时间，消息在队列中达到超时时间没有被消费</li></ul><p><strong>那么延迟队列是怎么根据这两种队列完成的呢？</strong><br>以我们在网上购物，下单了但是还没付款这样一个场景来说明：  </p><ol><li>首先我们在订单系统下单，将订单信息发送到TTL队列<sub>[假设订单保存时间为30分钟，即30分钟内付款，订单有效，否则订单过期]</sub></li><li>期间我们都没有付款，那么过了30分钟该订单信息会从TTL队列中删除。</li><li>从TTL队列中删除的订单会被发送到死信队列，然后这个消息会被库存系统消费。判断是取消订单，还是正常发货。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/573a170d9bc6400b868596b28b701f96~tplv-k3u1fbpfcp-watermark.image"><h4 id="5-4、消息幂等性保障（消息重复读取）"><a href="#5-4、消息幂等性保障（消息重复读取）" class="headerlink" title="5.4、消息幂等性保障（消息重复读取）"></a>5.4、消息幂等性保障（消息重复读取）</h4>在发送消息时，携带version，在消费者消费并将消息保存在数据库时，通过乐观锁机制，保障幂等性。</li></ol><h4 id="5-5、消息积压问题"><a href="#5-5、消息积压问题" class="headerlink" title="5.5、消息积压问题"></a>5.5、消息积压问题</h4><p>由于大促或者秒杀等场景，导致的消息积压问题。  </p><ol><li>通过工作队列模式增加消费者，提高消息消费速度。</li><li>消费者先将消息写入数据库，然后业务代码从数据库读取消息进行处理</li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring源码研读-AOP-三步走？</title>
      <link href="/2021/03/10/AOP-%E4%B8%89%E6%AD%A5%E8%B5%B0%EF%BC%9F/"/>
      <url>/2021/03/10/AOP-%E4%B8%89%E6%AD%A5%E8%B5%B0%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>本文将基于java-config（注解）研读 spring-AOP 源码</p><h2 id="AOP的使用"><a href="#AOP的使用" class="headerlink" title="AOP的使用"></a>AOP的使用</h2><ol><li><p>配置类上添加<code>@EnableAspectJAutoProxy</code>注解 <sub>[开启AOP功能]</sub></p></li><li><p>AOP bean对象添加<code>@Aspect</code>注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AOPTest</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.zhouxh.service.componentTest.*(..))"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aop Before start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aop After start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aop Around start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aop Around end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aop AfterReturning start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aop AfterThrowing start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><span id="more"></span><h2 id="1-加载切面"><a href="#1-加载切面" class="headerlink" title="1. 加载切面"></a>1. 加载切面</h2><ol><li><p>我们再开启AOP功能时，在配置类上添加了<code>@EnableAspectJAutoProxy</code>注解。该注解在配置类被解析时，会在spring容器中添加一个<code>AnnotationAwareAspectJAutoProxyCreator</code>后置处理器。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span></code></pre><p> 进入该注解，我们可以看到该注解向spring 容器中注入了<code>AspectJAutoProxyRegistrar</code>类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AspectJAutoProxyRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAspectJAutoProxy</span> <span class="token punctuation">{</span></code></pre><p> 进入<code>AspectJAutoProxyRegistrar</code>类，只有一个构造函数。<br> 这个函数做了两件事情：</p><ul><li>在spring中注入了AnnotationAwareAspectJAutoProxyCreator后置处理器</li><li>判断是否设置proxyTargetClass 和 exposeProxy属性<ul><li>proxyTargetClass 属性，默认为false，如果为true时，表示相关bean对象动态代理强制使用CGLIB</li><li>exposeProxy属性，默认为false，如果为true，有jdk动态代理生成bean对象出现方法内部调用时，也会触发AOP功能。<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 在spring中注入了AnnotationAwareAspectJAutoProxyCreator后置处理器</span>AopConfigUtils<span class="token punctuation">.</span><span class="token function">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取注解@EnableAspectJAutoProxy</span>AnnotationAttributes enableAspectJAutoProxy <span class="token operator">=</span>       AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>importingClassMetadata<span class="token punctuation">,</span> EnableAspectJAutoProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>enableAspectJAutoProxy <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 判断是否设置proxyTargetClass 和 exposeProxy属性</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableAspectJAutoProxy<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"proxyTargetClass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      AopConfigUtils<span class="token punctuation">.</span><span class="token function">forceAutoProxyCreatorToUseClassProxying</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableAspectJAutoProxy<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"exposeProxy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      AopConfigUtils<span class="token punctuation">.</span><span class="token function">forceAutoProxyCreatorToExposeProxy</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>在<a href="https://juejin.cn/post/6912354445082755079">《spring IOC源码解析》</a>这篇文章中，我们知道spring_bean第一次初始化会调用createBean()方法创建一个bean实例。在bean被创建<sub>【doCreateBean方法】</sub>前，通过spring提供的拓展点<sub>【resolveBeforeInstantiation方法】</sub>，将切点和通知包装成<code>Advisors</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/** * 省略部分不相干代码 */</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// spring 容器提供的拓展点，会在此处运行spring前置处理器</span>    Object bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个bean实例</span>    Object beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Finished creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> <span class="token operator">|</span> ImplicitlyAppearedSingletonException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略</span><span class="token punctuation">}</span></code></pre><p> 进入 resolveBeforeInstantiation方法，最终调用 <code>applyBeanPostProcessorsBeforeInstantiation</code> 方法循环调用所有的前置处理器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">applyBeanPostProcessorsBeforeInstantiation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>            Object result <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> 也就是在这里调用了我们在<code>@EnableAspectJAutoProxy</code>注解，给spring容器中添加的<code>AnnotationAwareAspectJAutoProxyCreator</code>后置处理器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// isInfrastructureClass 判断当前beanClass是否被@Aspectj注释，是 返回true，否则返回false</span>        <span class="token comment" spellcheck="true">// AOP 类会被添加到缓存中，然后 保存在advisedBeans缓存中</span>        <span class="token comment" spellcheck="true">// shouldSkip()方法解析各通知，并与切点一起包装成Advisors</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre><code>    省略了部分代码``` return null;</code></pre><p> }</p><pre><code>`shouldSkip()`方法解析各通知，并与切点一起包装成`Advisors`。``` javaprotected boolean shouldSkip(Class&lt;?&gt; beanClass, String beanName) &#123;    // TODO: 查询所有的通知并添加到缓存中，方便调用时获取。    List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();    for (Advisor advisor : candidateAdvisors) &#123;        // 判断AOP是否是通过xml配置的，如果是返回true 【为了兼容xml】        if (advisor instanceof AspectJPointcutAdvisor &amp;&amp;                ((AspectJPointcutAdvisor) advisor).getAspectName().equals(beanName)) &#123;            return true;        &#125;    &#125;    return super.shouldSkip(beanClass, beanName);&#125;</code></pre><p> <code>findCandidateAdvisors()</code>方法查询所有的通知并添加到缓存中，方便调用时获取。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 查找所有继承了 Advisor.class的类【我们通过注解的形式，所以此处查询为空】</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Build Advisors for all AspectJ aspects in the bean factory.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorsBuilder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 真正生效的是 buildAspectJAdvisors() 解析变创建 advisors</span>        advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorsBuilder<span class="token punctuation">.</span><span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> 通过<code>aspectJAdvisorsBuilder.buildAspectJAdvisors()</code>创建advisors并添加到缓存中。</p><ul><li>this.advisorFactory.getAdvisors(factory)通过 解析切面类中方法上的注解 <strong>获取通知</strong> 和 <strong>切点</strong>一起封装到advisor中，将所有<code>advisors</code>根据 Around.class, Before.class, After.class, AfterReturning.class, AfterThrowing.class 的顺序进行排序。</li><li>并将adviors保存在<code>advisorsCache</code>缓存中<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>···此处省略部分判断代码   ···<span class="token comment" spellcheck="true">// 通过解析class类中的方法上的注解 根据 Around.class, Before.class, After.class, AfterReturning.class, AfterThrowing.class 排序</span>List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> classAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将通知和切点 与 当前bean 一起保存在advisorsCache 缓存中</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>···   此处省略部分代码   ···<span class="token punctuation">}</span></code></pre></li></ul></li></ol><h2 id="2-创建代理"><a href="#2-创建代理" class="headerlink" title="2. 创建代理"></a>2. 创建代理</h2><p>spring_bean被创建大致可以分为三步：1. bean的实例化；2. bean属性的注入；3. bean的初始化</p><p>AOP 创建动态代理在第三步：bean的初始化【<code>exposedObject = initializeBean(beanName, exposedObject, mbd);</code>】  </p><p>在bean的初始化完成之后，spring提供了一个调用后置处理器的拓展点，就在此处spring会调用<code>AnnotationAwareAspectJAutoProxyCreator</code>后置处理器的后置处理方法。</p><p>让我们来追溯源码！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">initializeBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ···    省略部分代码：完成spring_bean的初始化工作    ···    <span class="token comment" spellcheck="true">// 在这之前，bean的初始化已经完成。</span>    <span class="token comment" spellcheck="true">// spring提供的拓展点，调用后置处理器的后置处理方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<code>applyBeanPostProcessorsAfterInitialization</code>方法中循环所有后置处理器并调用对应的后置处理方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>Object existingBean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>        <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    Object result <span class="token operator">=</span> existingBean<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor processor <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object current <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>getBeanPostProcessors()</code>获取所有的后置处理器，其中就有 <code>AnnotationAwareAspectJAutoProxyCreator</code><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b5cc16652154aa7a36c74411d9569e1~tplv-k3u1fbpfcp-watermark.image"></p><p>通过调用父类<code>AbstractAutoProxyCreator.postProcessAfterInitialization()</code>方法 —&gt; 最终调用<code>wrapIfNecessary()</code>方法生成动态代理。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyProxyReferences<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span> <span class="token operator">!=</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> Object cacheKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不需要AOP增强的类，直接返回原始对象，不需要动态代理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 再次判断是否需要增强，不需要的直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果需要AOP 增强，创建动态代理</span>       <span class="token comment" spellcheck="true">// 通过 AspectJ 的 api 判断当前类中哪些方法符合哪些通知【通过切点表达式，选择需要增强的内容】</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> DO_NOT_PROXY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 创建动态代理 </span>        Object proxy <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>                bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>看到这里我们还有一个疑问：AOP动态代理是怎么选择JDK动态代理 还是 CGLIB动态代理的？</strong></p><p>继续跟进<code>createProxy()</code>方法，最终进入<code>DefaultAopProxyFactory.createAopProxy()</code>方法</p><ul><li>isProxyTargetClass() —-&gt; 我们在@EnableAspectJAutoProxy()注解中设置 proxyTargetClass = true； <pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></code></pre></li><li>hasNoUserSuppliedProxyInterfaces() —-&gt; true 表示 当前增强类没有实现任何接口<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> AopProxy <span class="token function">createAopProxy</span><span class="token punctuation">(</span>AdvisedSupport config<span class="token punctuation">)</span> <span class="token keyword">throws</span> AopConfigException <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> config<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"TargetSource cannot determine target class: "</span> <span class="token operator">+</span>                  <span class="token string">"Either an interface or a target is required for proxy creation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果目标增强类，是一个接口 或者 是一个代理类 也会使用JDK动态代理</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjenesisCglibAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p><strong>看完这部分代码我们也能得出上面问题的答案了</strong></p><ol><li>如果在开启AOP的注解<code>@EnableAspectJAutoProxy(proxyTargetClass = true)</code>中添加了<code>proxyTargetClass = true</code>，那么spring会使用CGLIB动态代理。</li><li>如果目标增强类没有继承任何接口，那么spring会使用CGLIB动态代理。</li><li>如果目标增强类，是一个接口或者是一个代理类，也会使用JDK动态代理</li><li>否则，会使用JDK动态代理<h2 id="3-调用代理"><a href="#3-调用代理" class="headerlink" title="3. 调用代理"></a>3. 调用代理</h2>我们知道被代理类的方法被执行时，会先调用代理类的代理方法【jdk动态代理的invoke()/CGLIB动态代理的intercept()】。</li></ol><p>我们将以CGLIB动态代理为例，研读Spring AOP是如果调用代理的。</p><p>当被增强类的方法被执行时，spring会先调用CglibAopProxy的内部类DynamicAdvisedInterceptor.intercept()方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Object oldProxy <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>    TargetSource targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            oldProxy <span class="token operator">=</span> AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加载切面时，封装好的adviors集合</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object retVal<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果没有封装好的adviors，直接调用对应方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            retVal <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// AOP 执行通知的入口</span>            retVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> methodProxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        retVal <span class="token operator">=</span> <span class="token function">processReturnType</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> retVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Restore old proxy.</span>            AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上代码核心在于：retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed(); 该方法是 AOP 执行通知的入口。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// currentInterceptorIndex 初始化时为 -1</span>    <span class="token comment" spellcheck="true">// 如果执行到AOP中声明的最后一个通知，调用目标方法。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用目标增强方法</span>        <span class="token keyword">return</span> <span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// interceptorsAndDynamicMethodMatchers 包含所有的通知的集合，每次获取下一个通知</span>    Object interceptorOrInterceptionAdvice <span class="token operator">=</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptorOrInterceptionAdvice <span class="token keyword">instanceof</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略部分代码</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在此处调用对应通知的对应类</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MethodInterceptor<span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>invoke()方法会更根据下图顺序依次调用。<br><code>interceptorsAndDynamicMethodMatchers</code>中的对象</p><h3 id="调用时序图"><a href="#调用时序图" class="headerlink" title="调用时序图"></a>调用时序图</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/182dd05090e04b1babd8bf5a8d4f6b15~tplv-k3u1fbpfcp-watermark.image"></p><h4 id="环绕通知类-AspectJAroundAdvice"><a href="#环绕通知类-AspectJAroundAdvice" class="headerlink" title="环绕通知类 - AspectJAroundAdvice"></a>环绕通知类 - AspectJAroundAdvice</h4><p>该类没有什么特殊的方法，就是调用AOP中被@Around注释的方法</p><pre class=" language-JAVA"><code class="language-JAVA">public Object invoke(MethodInvocation mi) throws Throwable {    if (!(mi instanceof ProxyMethodInvocation)) {        throw new IllegalStateException("MethodInvocation is not a Spring ProxyMethodInvocation: " + mi);    }    ProxyMethodInvocation pmi = (ProxyMethodInvocation) mi;    ProceedingJoinPoint pjp = lazyGetProceedingJoinPoint(pmi);    JoinPointMatch jpm = getJoinPointMatch(pmi);       // 调用环绕通知方法    return invokeAdviceMethod(pjp, jpm, null, null);}</code></pre><p>在环绕通知方法中，先进行前置通知，然后唤醒一个通知，最后进行后置通知。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aop Around start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aop Around end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="前置通知-MethodBeforeAdviceInterceptor"><a href="#前置通知-MethodBeforeAdviceInterceptor" class="headerlink" title="前置通知 - MethodBeforeAdviceInterceptor"></a>前置通知 - MethodBeforeAdviceInterceptor</h4><p>先调用AOP中被@Before注释的方法，然后唤醒下一通知</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>advice<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>mi<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mi<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mi<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="后置通知-AspectJAfterAdvice"><a href="#后置通知-AspectJAfterAdvice" class="headerlink" title="后置通知 - AspectJAfterAdvice"></a>后置通知 - AspectJAfterAdvice</h4><p>先唤醒下一通知，再调用AOP中被@After注释的方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">invokeAdviceMethod</span><span class="token punctuation">(</span><span class="token function">getJoinPointMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="后置返回通知-AfterReturningAdviceInterceptor"><a href="#后置返回通知-AfterReturningAdviceInterceptor" class="headerlink" title="后置返回通知 - AfterReturningAdviceInterceptor"></a>后置返回通知 - AfterReturningAdviceInterceptor</h4><p>唤醒下一通知，再调用AOP中被@AfterReturning注释的方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Object retVal <span class="token operator">=</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>advice<span class="token punctuation">.</span><span class="token function">afterReturning</span><span class="token punctuation">(</span>retVal<span class="token punctuation">,</span> mi<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mi<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mi<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> retVal<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="后置异常通知-AspectJAfterThrowingAdvice"><a href="#后置异常通知-AspectJAfterThrowingAdvice" class="headerlink" title="后置异常通知 - AspectJAfterThrowingAdvice"></a>后置异常通知 - AspectJAfterThrowingAdvice</h4><p>先执行下一通知，如果出现异常，再执行@AfterThrowing注释的方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldInvokeOnThrowing</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">invokeAdviceMethod</span><span class="token punctuation">(</span><span class="token function">getJoinPointMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>在唤醒下一通知前，会判断是否存在下一通知，如果不存在，直接调用目标增强方法。</strong></p><p>该判断在<code>ReflectiveMethodInvocation.proceed()</code>方法中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// currentInterceptorIndex 初始化时为 -1</span>    <span class="token comment" spellcheck="true">// 如果执行到AOP中声明的最后一个通知，调用目标方法。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用目标增强方法</span>        <span class="token keyword">return</span> <span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ····    ····<span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>spring会在doCreateBean之前，会调用 spring 提供的拓展点【resolveBeforeInstantiation】，从所有 beanDefinitionMap 中获取所有的 Object 类型的类，循环判断并获取哪个类被 @Aspectj 注解注释。然后解析该类中被 @Before、@After、@Around、@AfterReturning、@AfterThrowing 注解注释的方法，并与 @Pointcut 注释的切点一起封装在 adviors 中。</p></li><li><p>在 spring 初始化方法中，调用所有后置处理器的后置处理方法，获取所有的 adviors 和当前类进行匹配【匹配方法是调用AspectJ的内部API】。匹配成功的类再由 AOPProxyFactory 根据【是否有接口、是否有proxyTargetClass = true】选择使用CGLIB动态代理还是JDK动态代理。</p></li><li><p>在目标增强方法被执行时，spring 会将adviors转换成Interceptor，然后通过责任链的模式一次进行调用。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文解读 zookeeper</title>
      <link href="/2021/03/09/%E4%B8%80%E6%96%87%E8%A7%A3%E8%AF%BB-zookeeper/"/>
      <url>/2021/03/09/%E4%B8%80%E6%96%87%E8%A7%A3%E8%AF%BB-zookeeper/</url>
      
        <content type="html"><![CDATA[<h2 id="zookeeper-是什么？"><a href="#zookeeper-是什么？" class="headerlink" title="zookeeper 是什么？"></a>zookeeper 是什么？</h2><p>官方文档是这样解读zookeeper的：它是一个<strong>分布式协调框架</strong>，是Apache Hadoop 的一个子项目，它主要是用来 <strong>解决分布式应用中</strong> 经常遇到的一些 <strong>数据管理问题</strong>，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p><h2 id="zookeeper的两大基本特性"><a href="#zookeeper的两大基本特性" class="headerlink" title="zookeeper的两大基本特性"></a>zookeeper的两大基本特性</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>Zookeeper 维护一个类似Linux文件系统的数据结构。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5beb4fd3fcba47f4b520c280ade966a4~tplv-k3u1fbpfcp-watermark.image">  </p><span id="more"></span><p>“/”可以理解为根目录，及其子目录项都被称作为 znode(目录节点)，和文件系统类似，我们能够自由的增加、删除znode，在一个znode下增加、删除子znode。</p><p>zookeeper 有6种节点类型：</p><ol><li>PERSISTENT - 持久化目录节点<ul><li>目录节点一经创建，只要不手动删除该节点，他将永远存在。客户端与zookeeper断开连接，节点不会删除。</li></ul></li><li>PERSISTENT_SEQUENTIAL - 持久化顺序编号目录节点<ul><li>顺序节点在持节化节点的基础上，对目录节点进行顺序标号</li></ul></li><li>EPHEMERAL - 临时目录节点<ul><li>一次session中有效，session 过期就会被删除。客户端与zookeeper断开连接后，哪怕短时间内重连，只要不是同一session登录，该节点也会删除。</li></ul></li><li>EPHEMERAL_SEQUENTIAL - 临时顺序编号目录节点<ul><li>临时顺序节点，在临时节点的基础上，对目录节点进行顺序标号</li></ul></li><li>TTL节点<ul><li>可设置超时时间，一旦超过限定时间就会被删除，zk后台维护了一个定时任务，每60秒扫描一次，过期的删除。【默认禁用，只能通过系统配置zookeeper.extendedTypesEnabled=true 开启，不稳定】</li></ul></li><li>Container - 容器节点<ul><li>3.5.3 版本新增，新建的容器节点和普通节点无异，一旦容器节点下新建过子节点，最后清空子节点，那么该容器节点也会在未来被删除。【zk后台维护了一个定时任务，每60秒扫描一次】<h3 id="节点监听机制"><a href="#节点监听机制" class="headerlink" title="节点监听机制"></a>节点监听机制</h3>zookeeper 服务端提供节点监听功能，以便客户端感知到服务端节点发生变化。<br>zookeeper 提供了三种监听方式：</li></ul></li><li>监听某一节点（get -w /path）<ul><li>当该节点的被删除，或者数据发生修改时，服务端会通知客户端节点发生变化【只会告知是节点被删除，还是节点中的数据发生变化，而不会告知数据变化的结果，需要客户端手动获取新数据】</li></ul></li><li>监听某一目录（ls -w /path）<ul><li>当该目录下有子节点新增或者删除，服务端会通知客户端</li></ul></li><li>监听某个目录的递归子节点（ls -R -w /path）<ul><li>当该根目录的被删除、数据被修改时，或者子目录有新增删除时，会通知客户端</li></ul></li></ol><p><strong>注：zookeeper 所有的监听机制都是单次生效，一旦触发，监听事件就会被移除。如果监听的是目录的递归子节点，每个节点都会触发一次。</strong></p><h3 id="zookeeper-的使用场景"><a href="#zookeeper-的使用场景" class="headerlink" title="zookeeper 的使用场景"></a>zookeeper 的使用场景</h3><p>基于zookeeper的两大特性，可以很方便的完成</p><ol><li><p><strong>分布式配置中心</strong>/<code>分布式注册中心</code>：利用zk的持久化节点以及监听机制，可以很方便的将 <strong>配置</strong>/ <code>应用信息</code> 保存在zk的持久化节点上面，最终通过监听机制，在配置发生改变时，通知各应用。【适合体量不大的应用】</p></li><li><p>分布式锁：利用zk节点的名称的唯一性，可以比较简单的实现分布式锁</p><ul><li><p>公平锁：通过临时持久化顺序节点，让想要获取锁的对象在某一父节点下依次新增顺序节点，然后监听上一个新增的节点。<strong>抢锁条件：序号最小的节点获取锁</strong>。再上一节点释放锁被删除时，下一节点会监听到这一消息，然后进行抢锁工作。  </p><p>  <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6682d5e9cc714564b1114318338a9fd2~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>非公平锁：通过监听某一固定名称的临时节点，实现非公平锁。在请求进来时，先去尝试获取锁（get -w /path），如果获取不到，循环等待。然后等上一个占用锁的线程结束时，服务器通知所有等待获取锁的线程，所有等待线程再竞争锁。【在高并发下，这种方式效率比较低。原因：惊群效应，每次只能一个线程获取锁，但是唤醒了所有线程】   </p><pre><code> ![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfb6ad11f53b46e99739904587b2e3e2~tplv-k3u1fbpfcp-watermark.image)</code></pre></li><li><p>读写锁：在应用中同时存在缓存层和数据库层时，在高并发情况下下，可能出现缓存和数据读写不一致的情况。</p><pre><code> ![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcd59e37ff214f76bfc0a3a6cbdec70b~tplv-k3u1fbpfcp-watermark.image)</code></pre><p> 这种情况下我们需要添加一把读写锁，来确保写操作发生时，读操作不能再进行读取，需等待写操作完成后，才能进行读取；读操作正在发生时，写操作不能进行写，需等待读操作完成后，才能写入。<br>  <strong>监听规则：连续读的情况，监听上一个写，如果之前没有写，无需加锁；写的情况，监听自己上一个节点；</strong><br> <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea3cc8d44cf84fc491455a0df3500011~tplv-k3u1fbpfcp-watermark.image"></p><h2 id="zookeeper-集群"><a href="#zookeeper-集群" class="headerlink" title="zookeeper 集群"></a>zookeeper 集群</h2></li></ul></li><li><p>复制zoo.cfg，并修改如下配置（示范为单机，伪集群配置） </p><ul><li>dataDir=/zookeeper/zk1  </li><li>clientPort=2181  ### 客户端连接端口</li><li>server.1=localhost:2888:3888      ### 2888 集群数据同步通信端口  3888 选举通信端口 </li><li>server.2=localhost:2889:3889  </li><li>server.3=localhost:2890:3890  </li></ul></li><li><p>再对应的dataDir目录下新建myid文件【不带文件格式,server.1服务，myid文件内容就是”1“】 </p></li><li><p>将服务分别启动</p><h3 id="zookeeper-集群选举流程-面试常问"><a href="#zookeeper-集群选举流程-面试常问" class="headerlink" title="zookeeper 集群选举流程* 面试常问 "></a>zookeeper 集群选举流程*<sub> 面试常问 </sub></h3><p>以三个节点的zookeeper节点为例，当两个及以上服务启动后，正式选举开始：</p></li><li><p>第一轮选举：在 ZK 服务启动时，会向配置文件中配置的所有其他节点发送一张选票，选票内容包括 <strong>自身serverId</strong>、<strong>最新数据的ZXID</strong> 等。同时会收到其他应用的选票，将收到的选票和自身选票对比【对比规则：ZXID大的优先，如果ZXID一致，serverId大的优先】</p></li><li><p>第二次选举：各个 ZK 服务，会向其他节点发送，自己所得的所有选票（包括自己）中优先级最高的选票。如果投某一服务的票数超过半数，则选举结束。选举出来的机器，就是leader。</p></li><li><p>之后其他服务连接到集群，就会发现已经存在leader，自动将自身设置为follower。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43ab49311c834de2a2e07187b4322702~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="zookeeper-集群数据同步"><a href="#zookeeper-集群数据同步" class="headerlink" title="zookeeper 集群数据同步"></a>zookeeper 集群数据同步</h3><p>在选举完成后，客户端连接zookeeper - leader节点写入数据，此时leader节点会打开一个socket等待follower节点来连接，follower节点连接上leader节点后，leader节点会持续发送新的数据到follower节点。如果当时没有新的数据写入，且旧数据已经同步完成，leader节点会周期性的发送一些空白的socket信息，用于保持节点间的连接。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring怎么解决循环依赖？</title>
      <link href="/2021/02/20/Spring%20%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%EF%BC%9F/"/>
      <url>/2021/02/20/Spring%20%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="1、什么是循环依赖"><a href="#1、什么是循环依赖" class="headerlink" title="1、什么是循环依赖"></a>1、什么是循环依赖</h1><p>所谓循环依赖是指，在A注入了B，在B中注入了A。初始化A时需要先初始化B，初始化B又需要初始化A，从而出现的类似死锁的现象。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f330358abe1a4ed9b18b2e40b11b98e5~tplv-k3u1fbpfcp-watermark.image"></p><span id="more"></span><h1 id="2、spring-如何解决"><a href="#2、spring-如何解决" class="headerlink" title="2、spring 如何解决"></a>2、spring 如何解决</h1><h2 id="2-1、循环依赖示例"><a href="#2-1、循环依赖示例" class="headerlink" title="2.1、循环依赖示例"></a>2.1、循环依赖示例</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> B b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> A a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<a href="https://juejin.cn/post/6912354445082755079">springIOC初始化过程</a>中，我们了解到非懒加载的单例Bean都是在<code>AbstractApplicationContext.refresh()</code>方法中调用<code>finishBeanFactoryInitialization()</code>方法，最终通过<code>AbstractBeanFactory.doGetBean()</code>方法进行初始化的。<strong>那么spring如何解决循环依赖也必将在这个方法下面</strong>[spring 5.2版本源码]。</p><h2 id="2-2、spring-bean生成时序图"><a href="#2-2、spring-bean生成时序图" class="headerlink" title="2.2、spring_bean生成时序图"></a>2.2、spring_bean生成时序图</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00f0eb010f2b4d94a172070985b14a0e~tplv-k3u1fbpfcp-watermark.image"></p><p>在阅读源码前，先看看bean生成的时序图有助于理解源码。  </p><ol><li>spring尝试通过<code>ApplicationContext.getBean()</code>方法获取A对象的实例，由于spring容器中还没有A对象[<code>getSingleton(A) = null</code>]，因此spring会创建A对象【spring创建一个bean分为三步：1. 实例化bean、 2. 给bean注入属性、3. 初始化bean】。并将A对象的半成品【未注入属性，未初始化】保存在三级缓存中[<code>addSingletonFactory(A)</code>]。</li><li>然后为A对象注入属性B，通过<code>getBean(B)</code>从spring容器中尝试获取B对象，由于spring容器还没有B对象，会创建B对象。<blockquote><ul><li>创建 B 的半成品对象，并保存在三级缓存中[<code>addSingletonFactory(B)</code>]。</li></ul></blockquote></li></ol><pre><code>&gt; - 然后为B对象注入属性A，通过getBean(A)从三级缓存中获取A的半成品对象的引用，将A从三级缓存移入二级缓存。并将它做为属性注入B对象&gt; - 初始化B对象后，返回B对象。将B对象保存到一级缓存中</code></pre><ol start="3"><li>最后将返回的B对象做为属性注入A对象，初始化A，并将A对象保存在一级缓存中。</li></ol><h2 id="2-3、源码解读"><a href="#2-3、源码解读" class="headerlink" title="2.3、源码解读"></a>2.3、源码解读</h2><p>非懒加载的单例Spring_Bean最终都通过<code>AbstractBeanFactory.doGetBean()</code>进行初始化的。我们的源码分析也从这一个方法开始.</p><p>忽略其中与本次关联不大的代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doGetBean</span><span class="token punctuation">(</span>        String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span>        <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object bean<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 检查是否目标bean是否已经注册过.</span>    Object sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 单例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将获取到的bean 加入一级缓存</span>            sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 创建 bean对象 </span>                    <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中值得关注的方法有三个：</p><ol><li>getSingleton(beanName);</li><li>getSingleton(beanName,ObjectFactory);</li><li>createBean(beanName, mbd, args);<br>接下来我们详细看一下这三个方法源码。<h3 id="2-3-1、getSingleton-bean"><a href="#2-3-1、getSingleton-bean" class="headerlink" title="2.3.1、getSingleton(bean)"></a>2.3.1、getSingleton(bean)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 查询一级缓存</span> Object singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 查询二级缓存</span>     singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// Consistent creation of early reference within full singleton lock</span>             singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">// 查询三级缓存</span>                     ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> singletonFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 如果查询到将查询到的数据写入二级缓存，然后从三级缓存中移除</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>该方法分别从一级、二级、三级缓存中尝试获取bean，如果能获取到直接返回该对象，否则返回null。</li><li><code>isSingletonCurrentlyInCreation</code>方法用于判断目标bean是否处于正在创建阶段，如果是返回true。</li><li>如果入参<code>allowEarlyReference</code>为true，才会尝试查询三级缓存。且在三级缓存中查询到之后会将bean对象保存在二级缓存。<h3 id="2-3-2、createBean-beanName-mbd-args"><a href="#2-3-2、createBean-beanName-mbd-args" class="headerlink" title="2.3.2、createBean(beanName, mbd, args)"></a>2.3.2、createBean(beanName, mbd, args)</h3>在<code>getSingleton(beanName,ObjectFactory)</code>方法中的第二个参数由<code>createBean(beanName, mbd, args)</code>提供，所以我们先分析createBean方法。</li></ol><p>createBean(beanName, mbd, args)委托给同类的<code>doCreateBean(beanName, mbdToUse, args)</code>方法实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">doCreateBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// BeanWrapper 是bean的包装类 它提供了 getPropertyDescriptors 方法 获取bean的属性</span>    BeanWrapper instanceWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建bean实例的包装类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// earlySingletonExposure 1. 是单例。2. bean允许循环依赖。3. 该单例bean正在被创建</span>    <span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>            <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Eagerly caching bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                    <span class="token string">"' to allow for resolving potential circular references"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 加入三级缓存   -  getEarlyBeanReference 方法 默认返回入参中的bean对象</span>        <span class="token comment" spellcheck="true">// 此时的bean未注入属性，也就是@Autowried等注解还没有被解析</span>        <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注入属性，@Autowired 等在此处解析</span>        <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// bean初始化</span>        exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 去掉部分相对不重要代码</span>    <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>spring_bean生成的三大步骤：</p><ol><li>实例化：createBeanInstance(beanName, mbd, args)</li><li>属性注入：populateBean(beanName, mbd, instanceWrapper);</li><li>初始化：initializeBean(beanName, exposedObject, mbd);</li></ol><p>在实例化和属性注入之间有一行关键性代码：<code>addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</code></p><p><code>getEarlyBeanReference(beanName, mbd, bean)</code>方法最终会委托<code>AbstractAutoProxyCreator.wrapIfNecessary()</code>实现动态代理返回一个bean对象的代理类。</p><pre class=" language-java"><code class="language-java">Object<span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> DO_NOT_PROXY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object proxy <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>    bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> proxy<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后通过addSingletonFactory()将该代理类加入到三级缓存。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> singletonFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>singletonFactory<span class="token punctuation">,</span> <span class="token string">"Singleton factory must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registeredSingletons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="populateBean-beanName-mbd-instanceWrapper"><a href="#populateBean-beanName-mbd-instanceWrapper" class="headerlink" title="populateBean(beanName, mbd, instanceWrapper)"></a>populateBean(beanName, mbd, instanceWrapper)</h4><p>该方法会解析bean类中需要注入的属性，如果需要注入的是一个bean对象，spring通过反射获取对应的bean，最终还是调用<code>getBean()</code>方法。</p><p>由于本次例子中是通过<code>@Autowired</code>注解进行属性注入，@Autowired其实是通过<code>AutowiredAnnotationBeanPostProcessor</code>后置处理器进行属性注入的。</p><p>我们来看看属性是如何注入</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取需要注入的 被@Autowired修饰的属性</span>InjectionMetadata metadata <span class="token operator">=</span> <span class="token function">findAutowiringMetadata</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从metadata中获取需要注入的bean_name,然后最终通过getBean()方法进行获取</span>    metadata<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终调用descriptor.resolveCandidate(autowiredBeanName, type, this)；获取需要注入的bean</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">resolveCandidate</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> requiredType<span class="token punctuation">,</span> BeanFactory beanFactory<span class="token punctuation">)</span>        <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这边调用链路有点长，此处就不做赘述。有兴趣的可以根据以下链路自行查看</p><ul><li>AbstractAutowireCapableBeanFactory.populateBean() </li><li>AutowiredAnnotationBeanPostProcessor.postProcessProperties()</li><li>AutowiredAnnotationBeanPostProcessor.inject()</li><li>DefaultListableBeanFactory.resolveDependency()</li><li>DefaultListableBeanFactory.doResolveDependency()</li><li>DependencyDescriptor.resolveCandidate()</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>查看完以上源码，我们再次回顾一下本次的面试题《spring 怎么解决循环依赖？》</p><p>spring容器中存在三级缓存【分别是singletonObjects、earlySingletonObjects、singletonFactories】，spring在实例化bean之后，会将bean对象的引用添加到三级缓存中，在循环依赖发生时，spring会将正在初始化过程中的不完全bean的引用先作为属性注入。最终将bean对象初始化后添加到一级缓存【singletonObjects】中。</p><p>假设存在A 和 B 存在循环依赖，此时先将A注册到spring容器中。  </p><ol><li>先尝试在spring的三级缓存中获取bean对象，如果获取不到，创建一个新的bean A</li><li>先实例化A，然后将不完全的A对象的引用，保存到三级缓存中。</li><li>再对A进行属性B的注入，发现B对象还没有再spring容器中，创建B<ul><li>实例化B，然后将不完全的B对象的引用，保存在三级缓存中。</li><li>然后对B进行属性A的注入，通过查询发现A对象存在于三级缓存中，将A对象保存到二级缓存中。然后注入B中。【B对象中注入的是A对象的引用】</li><li>初始化B之后，此时对象B是一个完整的bean，将它保存在一级缓存中。</li></ul></li><li>B创建成功后，返回一个B对象的引用。并将其注入A。</li><li>A进行初始化【A初始化完成后，A也是一个完整的bean，那么B中A属性引用对象也完整了】，然后保存到一级缓存中。</li></ol><h3 id="虽然存在循环依赖，但是在构造器注入的情况下，循环依赖仍然会报错。"><a href="#虽然存在循环依赖，但是在构造器注入的情况下，循环依赖仍然会报错。" class="headerlink" title="虽然存在循环依赖，但是在构造器注入的情况下，循环依赖仍然会报错。"></a>虽然存在循环依赖，但是在构造器注入的情况下，循环依赖仍然会报错。</h3><p>根据源码我们得知setter注入和注解注入，是在populateBean方法上进行的递归（getBean），此时三级缓存已经保存，所以循环依赖不会出错。</p><p>但是构造器注入的递归操作发生在createBeanInstance(beanName, mbd, args)这个方法中。此时三级缓存还没有保存，在缓存中获取失败时，又会重新create新的bean。这也就出现了循环依赖。</p><p>有兴趣的小伙伴可以跟一下源码。</p><p>代码链路：</p><ul><li>createBeanInstance(beanName, mbd, args)</li><li>AbstractAutowireCapableBeanFactory.autowireConstructor()</li><li>ConstructorResolver.autowireConstructor()</li><li>ConstructorResolver.resolveConstructorArguments()</li><li>BeanDefinitionValueResolver.resolveValueIfNecessary();</li><li>BeanDefinitionValueResolver.resolveReference()<ul><li>最终在这个方法中调用了getBean()方法</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring IOC源码解析</title>
      <link href="/2020/12/31/spring-IOC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/12/31/spring-IOC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>spring 是当前最广泛使用的开源框架，而spring framework 则是spring全家桶的基础。spring framework最重要的是 IOC 和 AOP。其中 IOC 又是Spring framework 的基础。<br>今天我们要做的就是解析IOC，总的来说IOC有两点至关重要：1、创建bean容器；2、初始化bean。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>本文以JAVA_CONFIG（注解）来解读spring IOC 源码。  </p><p>下面我们从一段简单的代码出发分析</p><span id="more"></span> <p><strong>配置类</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.zhouxh"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span>                 <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TestService testService <span class="token operator">=</span> <span class="token punctuation">(</span>TestService<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"testService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testService<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>service类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zhouxh<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"testService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过注解<code>@Configuration</code>将Main类标记为配置类，并通过<code>@ComponentScan(&quot;com.zhouxh&quot;)</code>指定bean扫描路径。</p><h3 id="Spring-IoC容器的加载过程"><a href="#Spring-IoC容器的加载过程" class="headerlink" title="Spring IoC容器的加载过程"></a>Spring IoC容器的加载过程</h3><h4 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9935c26c2b74b2ea571ed5b4ac2e7ee~tplv-k3u1fbpfcp-watermark.image"><br>1.实例化容器 AnnotationConfigApplicationContext</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该有参构造的简单说明:</p><ul><li>可以接收多个配置类，不过一般情况下，只会传入一个配置类</li><li>这个配置类有两种情况，一种是传统意义上的带上<code>@Configuration</code>注解的配置类，还有一种是没有带上@Configuration，但是带有<code>@Component</code>，<code>@Import</code>，<code>@ImportResouce</code>，<code>@Service</code>，<code>@ComponentScan</code>等注解的配置类，在Spring内部把前者称为Full配置类，把后者称之为Lite配置类。在本源码分析中，有些地方也把Lite配置类称为普通Bean。<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> componentClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用无参构造函数</span>  <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 注册配置类</span>  <span class="token function">register</span><span class="token punctuation">(</span>componentClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// IOC 容器刷新接口</span>  <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="this"><a href="#this" class="headerlink" title="this()"></a>this()</h4></li></ul><p>在通过this()方法调用无参构造函数时，会隐式的调用父类的构造函数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行父类无参构造，设置bean工厂类</span>    <span class="token comment" spellcheck="true">/**     *  public GenericApplicationContext() {     *      this.beanFactory = new DefaultListableBeanFactory();     *  }     */</span>    <span class="token comment" spellcheck="true">// 设置读取配置类</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置扫描类，默认情况下没有使用，除非外部显示的调用scan()方法指定扫描路径</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>AnnotatedBeanDefinitionReader【beanDefinition读取器】</strong><br>主要做了2件事情</p><ol><li>注册内置BeanPostProcessor</li><li>注册相关的BeanDefinition<br>通过对<code>new AnnotatedBeanDefinitionReader(this)</code>代码的追踪发现真正做事情的<code>AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</code>由于该方法代码较多，这里只把最核心的代码贴出来。<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>ConfigurationClassPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>在该方法中存在较多的类似的代码。其主要目的就是为了给容器添加内置组件</li><li>判断容器中是否已经存在了ConfigurationClassPostProcessor Bean</li><li>如果不存在（第一次运行必然不存在），就通过RootBeanDefinition的构造方法获得ConfigurationClassPostProcessor的BeanDefinition，RootBeanDefinition是BeanDefinition的子类</li><li>执行registerPostProcessor方法，registerPostProcessor方法内部就是注册Bean，当然这里注册其他Bean也是一样的流程。</li></ol><p>该方法最终会将ContextAnnotationAutowireCandidateResolver,<code>ConfigurationClassPostProcessor【bean的扫描和注册】</code>,CommonAnnotationBeanPostProcessor,<code>AutowiredAnnotationBeanPostProcessor【@Autowired属性的自动注入】</code>,PersistenceAnnotationBeanPostProcessor 这5个组件添加到spring容器中。</p><h4 id="register-componentClasses"><a href="#register-componentClasses" class="headerlink" title="register(componentClasses);"></a>register(componentClasses);</h4><p>register 是将传入的配置类解析成beanDefinition，并注册到容器中。</p><ol><li><p>包装成 BeanDefinition</p></li><li><p>判断条件是否满足 @condition</p></li><li><p>设置bean作用域</p></li><li><p>解析通用注解（@Lazy、@Primary、@DependsOn、@Role、@Description），并将属性设置到beanDefinition中</p></li><li><p>将beanDefinition注册到容器中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">doRegisterBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> beanClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String name<span class="token punctuation">,</span>     <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> qualifiers<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>T<span class="token operator">></span> supplier<span class="token punctuation">,</span>     <span class="token annotation punctuation">@Nullable</span> BeanDefinitionCustomizer<span class="token punctuation">[</span><span class="token punctuation">]</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将beanClass 包装成 BeanDefinition</span> AnnotatedGenericBeanDefinition abd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedGenericBeanDefinition</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//判断是否需要跳过注解，spring中有一个@Condition注解，当不满足条件，这个bean就不会被解析</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>abd<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> abd<span class="token punctuation">.</span><span class="token function">setInstanceSupplier</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置bean作用域 spring 默认 singleton</span> ScopeMetadata scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span> abd<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String beanName <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解析通用注解（@Lazy、@Primary、@DependsOn、@Role、@Description），并将属性设置到beanDefinition中</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>qualifiers <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> qualifier <span class="token operator">:</span> qualifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>Primary<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>             abd<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Lazy<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>             abd<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>             abd<span class="token punctuation">.</span><span class="token function">addQualifier</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AutowireCandidateQualifier</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>customizers <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionCustomizer customizer <span class="token operator">:</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>         customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> BeanDefinitionHolder definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span> definitionHolder <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将beanDefinition 添加到map缓存中</span> BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="refresh"><a href="#refresh" class="headerlink" title="refresh();"></a>refresh();</h3><p>到这里为止，我们想要注入的testService类还没有被扫描，在上面的方法中只注册了默认的内置bean和配置类。</p></li></ol><p>真正的重点代码在这个refresh()刷新方法中。</p><h4 id="脑图-1"><a href="#脑图-1" class="headerlink" title="脑图"></a>脑图</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e526a2c3158410f9f05d2394ed5073d~tplv-k3u1fbpfcp-watermark.image"></p><h4 id="prepareRefresh"><a href="#prepareRefresh" class="headerlink" title="prepareRefresh();"></a>prepareRefresh();</h4><p>开始刷新方法的准备工作，主要记录容器开始时间、启动标识之类的<br>需要注意的只有两行代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//初始化属性，由字类覆盖实现</span><span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 验证必要属性是否都已经被解析</span><span class="token comment" spellcheck="true">// see ConfigurablePropertyResolver#setRequiredProperties</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateRequiredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>initPropertySources</code>方法，我们可以继承该类并重写该方法，通过然后给Environment中添加某参数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"扩展initPropertySource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里添加了一个username属性到Environment里面，以方便我们在后面用到</span>    <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"bobo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里要求Environment中必须包含username属性，如果不包含，则抛出异常</span>    <span class="token comment" spellcheck="true">// 在这里设置会被getEnvironment().validateRequiredProperties();检验到。</span>    <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRequiredProperties</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     </code></pre><h4 id="prepareBeanFactory-beanFactory"><a href="#prepareBeanFactory-beanFactory" class="headerlink" title="prepareBeanFactory(beanFactory)"></a>prepareBeanFactory(beanFactory)</h4><p>给beanFactory添加必要的组件<br>需要关注的代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// BeanFactory接口未在普通工厂中注册为可解析类型。 MessageSource注册为Bean（并发现用于自动装配）。</span><span class="token comment" spellcheck="true">// 意味着以下4各类可以在任意组件中自动装配，第一个参数是自动装配的类型，第二个字段是自动装配的值</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>BeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ResourceLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ApplicationEventPublisher<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span>ApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加一个后置处理器：ApplicationListenerDetector，此后置处理器实现了BeanPostProcessor接口</span>beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="postProcessBeanFactory-beanFactory"><a href="#postProcessBeanFactory-beanFactory" class="headerlink" title="postProcessBeanFactory(beanFactory)"></a>postProcessBeanFactory(beanFactory)</h4><p>spring提供的拓展点，以便子类继承后对beanFactory进行个性化设置。</p><h4 id="invokeBeanFactoryPostProcessors-beanFactory"><a href="#invokeBeanFactoryPostProcessors-beanFactory" class="headerlink" title="invokeBeanFactoryPostProcessors(beanFactory)"></a>invokeBeanFactoryPostProcessors(beanFactory)</h4><p>需关注如下代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>        ConfigurableListableBeanFactory beanFactory<span class="token punctuation">,</span>         List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> beanFactoryPostProcessors<span class="token punctuation">)</span> </code></pre><p>参数里的 <code>beanFactoryPostProcessors</code> 不是spring管理的 <code>beanFactoryPostProcessor</code> 而是从外部通过如下代码添加的,如果没有通过该方法添加 默认为空</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>applicationContext<span class="token punctuation">.</span><span class="token function">addBeanFactoryPostProcessor</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>invokeBeanFactoryPostProcessors方法中存在三段类似的代码，此处只粘贴一段进行分析</strong>  </p><p>这三段相似代码意味着：<code>BeanFactoryPostProcessor</code>按照代码先后顺序依次执行</p><ol><li>首先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessors。bean定义后置注册处理器</li><li>然后执行实现Ordered接口的BeanDefinitionRegistryPostProcessors。</li><li>最后执行普通的bean定义注册后置处理器<pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>     beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="invokeBeanDefinitionRegistryPostProcessors"><a href="#invokeBeanDefinitionRegistryPostProcessors" class="headerlink" title="invokeBeanDefinitionRegistryPostProcessors"></a>invokeBeanDefinitionRegistryPostProcessors</h6>以上代码大致逻辑为：选择出对应类型的BeanFactoryPostProcessor，然后通过<code>invokeBeanDefinitionRegistryPostProcessors</code>方法扫描出需要注册的bean,并加入到注册表中。</li></ol><p>调用invokeBeanDefinitionRegistryPostProcessors方法最终是调用<code>processConfigBeanDefinitions</code>方法</p><p>该方法大致做以下几件事：</p><ol><li><p>扫描已经注册的bean中被@Configuration修饰的配置类，获取他的扫描路径</p></li><li><p>将配置类排序</p></li><li><p>通过扫描路径，扫描路径下所有被@PropertySource、@ComponentScan、@Import、@ImportResource、@Bean修饰的类和方法，并添加到对应的集合中。</p></li><li><p>从集合中去除beanDefinition 并注册。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processConfigBeanDefinitions</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span> List<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> configCandidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里就是需要注册的所有bean 的 name</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> candidateNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 循环选择出需要注册bean中的配置类 @Configuration </span> <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>     BeanDefinition beanDef <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDef<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span>CONFIGURATION_CLASS_ATTRIBUTE<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean definition has already been processed as a configuration class: "</span> <span class="token operator">+</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         configCandidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Return immediately if no @Configuration classes were found</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>configCandidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 根据 @Order注解的排序 ，排位靠前的先注册</span> configCandidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bd1<span class="token punctuation">,</span> bd2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> i1 <span class="token operator">=</span> ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>bd1<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> i2 <span class="token operator">=</span> ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>bd2<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Detect any custom bean name generation strategy supplied through the enclosing application context</span> SingletonBeanRegistry sbr <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果是单例的</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>registry <span class="token keyword">instanceof</span> <span class="token class-name">SingletonBeanRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     sbr <span class="token operator">=</span> <span class="token punctuation">(</span>SingletonBeanRegistry<span class="token punctuation">)</span> registry<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>localBeanNameGeneratorSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>         BeanNameGenerator generator <span class="token operator">=</span> <span class="token punctuation">(</span>BeanNameGenerator<span class="token punctuation">)</span> sbr<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span>                 AnnotationConfigUtils<span class="token punctuation">.</span>CONFIGURATION_BEAN_NAME_GENERATOR<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>generator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanBeanNameGenerator <span class="token operator">=</span> generator<span class="token punctuation">;</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator <span class="token operator">=</span> generator<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  ConfigurationClassParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">(</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanBeanNameGenerator<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>configCandidates<span class="token punctuation">)</span><span class="token punctuation">;</span> Set<span class="token operator">&lt;</span>ConfigurationClass<span class="token operator">></span> alreadyParsed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>configCandidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 解析配置类，解析扫描路径下被@PropertySource、@ComponentScan、@Import、@ImportResource、@Bean修饰的类和方法，并添加到对应的集合中。</span>     parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span>     parser<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Set<span class="token operator">&lt;</span>ConfigurationClass<span class="token operator">></span> configClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getConfigurationClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     configClasses<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>alreadyParsed<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// Read the model and create bean definitions based on its content</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassBeanDefinitionReader</span><span class="token punctuation">(</span>                 registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sourceExtractor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator<span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getImportRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">// 从对应的集合中取出将beanDefinition注册</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>     alreadyParsed<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>     candidates<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 判断是否有新的bean注册，有就注册 </span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> candidateNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> newCandidateNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Set<span class="token operator">&lt;</span>String<span class="token operator">></span> oldCandidateNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>candidateNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Set<span class="token operator">&lt;</span>String<span class="token operator">></span> alreadyParsedClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>ConfigurationClass configurationClass <span class="token operator">:</span> alreadyParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>             alreadyParsedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>configurationClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>String candidateName <span class="token operator">:</span> newCandidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldCandidateNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>candidateName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 BeanDefinition bd <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>candidateName<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                         <span class="token operator">!</span>alreadyParsedClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> candidateName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         candidateNames <span class="token operator">=</span> newCandidateNames<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>candidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sbr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sbr<span class="token punctuation">.</span><span class="token function">containsSingleton</span><span class="token punctuation">(</span>IMPORT_REGISTRY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     sbr<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>IMPORT_REGISTRY_BEAN_NAME<span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getImportRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory <span class="token keyword">instanceof</span> <span class="token class-name">CachingMetadataReaderFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span>     <span class="token comment" spellcheck="true">// for a shared cache since it'll be cleared by the ApplicationContext.</span>     <span class="token punctuation">(</span><span class="token punctuation">(</span>CachingMetadataReaderFactory<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="registerBeanPostProcessors-beanFactory"><a href="#registerBeanPostProcessors-beanFactory" class="headerlink" title="registerBeanPostProcessors(beanFactory)"></a>registerBeanPostProcessors(beanFactory)</h4><p>实例化和注册beanFactory中扩展了BeanPostProcessor的bean。<br>例如：<br><code>AutowiredAnnotationBeanPostProcessor</code>(处理被@Autowired注解修饰的bean并注入)<br><code>RequiredAnnotationBeanPostProcessor</code>(处理被@Required注解修饰的方法)<br><code>CommonAnnotationBeanPostProcessor</code>(处理@PreDestroy、@PostConstruct、@Resource等多个注解的作用)等</p></li></ol><h4 id="initMessageSource-【非IOC主线代码】"><a href="#initMessageSource-【非IOC主线代码】" class="headerlink" title="initMessageSource()【非IOC主线代码】"></a>initMessageSource()【非IOC主线代码】</h4><p>初始化国际化资源处理器</p><h4 id="initApplicationEventMulticaster"><a href="#initApplicationEventMulticaster" class="headerlink" title="initApplicationEventMulticaster()"></a>initApplicationEventMulticaster()</h4><p>初始化创建事件多播器。</p><h4 id="registerListeners"><a href="#registerListeners" class="headerlink" title="registerListeners()"></a>registerListeners()</h4><p>注册监听器</p><p>以上两个方法【<code>initApplicationEventMulticaster</code>/<code>registerListeners</code>】和spring的事件监听机制密切相关。</p><h4 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh()"></a>onRefresh()</h4><p>spring提供的拓展点，在springboot中有被使用</p><h4 id="finishBeanFactoryInitialization"><a href="#finishBeanFactoryInitialization" class="headerlink" title="finishBeanFactoryInitialization()"></a>finishBeanFactoryInitialization()</h4><p>完成上下文的bean工厂的初始化，初始化所有剩余的单例bean。<br>需要关注的核心代码</p><ol><li><p>将所有beanDefinition设置为不可变，避免在实例化时，bean定义发生改变</p></li><li><p>实例化所有单例bean</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 将所有beanDefinition设置为不可变，避免在实例化时，bean定义发生改变</span>beanFactory<span class="token punctuation">.</span><span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例化所有单例bean</span>beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="DefaultListableBeanFactory-preInstantiateSingletons"><a href="#DefaultListableBeanFactory-preInstantiateSingletons" class="headerlink" title="DefaultListableBeanFactory.preInstantiateSingletons()"></a>DefaultListableBeanFactory.preInstantiateSingletons()</h5></li><li><p>获取之前保存在beanDefinitionNames中的所有的beanName</p></li><li><p>循环bean，获取作用域为单例的bean</p></li><li><p>判断是否是factoryBean类型【bean继承FactoryBean，通过重写getObject()，自定义传入bean】</p></li><li><p>非factoryBean，通过getBean实例化,并将bean实例保存在容器(DefaultSingletonBeanRegistry.singletonObjects)中</p></li><li><p>调用所有实例化完成的bean的回调方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Pre-instantiating singletons in "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 获取之前保存在beanDefinitionNames中的beanName</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 循环bean，获取单例bean</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>     RootBeanDefinition bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 判断是否是factoryBean</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             Object bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>                 <span class="token keyword">boolean</span> isEagerInit<span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     isEagerInit <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>                             <span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>isEagerInit<span class="token punctuation">,</span>                             <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token keyword">else</span> <span class="token punctuation">{</span>                     isEagerInit <span class="token operator">=</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span> <span class="token operator">&amp;&amp;</span>                             <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>isEagerInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 没有继承FacetoryBean的bean，通过getBean实例化</span>             <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 触发所有实例化bean的回调方法</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Object singletonInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token keyword">instanceof</span> <span class="token class-name">SmartInitializingSingleton</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         SmartInitializingSingleton smartSingleton <span class="token operator">=</span> <span class="token punctuation">(</span>SmartInitializingSingleton<span class="token punctuation">)</span> singletonInstance<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                 smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> null<span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>             smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="finishRefresh"><a href="#finishRefresh" class="headerlink" title="finishRefresh()"></a>finishRefresh()</h4><p>发布相应的事件</p></li><li><p>清除上下文资源缓存（如扫描中的ASM元数据）</p></li><li><p>初始化上下文的生命周期处理器，并刷新（找出Spring容器中实现了Lifecycle接口的bean并执行start()方法）。</p></li><li><p>发布ContextRefreshedEvent事件告知对应的ApplicationListener进行响应的操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 清除上下文的资源缓存（例如来自扫描的ASM元数据）。</span> <span class="token function">clearResourceCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化生命周期处理器</span> <span class="token function">initLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 首先将刷新传播到生命周期处理器。</span> <span class="token function">getLifecycleProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 推送上下文刷新完毕事件到相应的监听器</span> <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Participate in LiveBeansView MBean, if active.</span> LiveBeansView<span class="token punctuation">.</span><span class="token function">registerApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此Spring IOC 初始化和spring bean加载过程就结束.  </p></li></ol><p><strong>Spring IOC 初始化</strong>: 创建<code>beanFactory</code>实例对象,创建<code>BeanDefinitionReader</code>,创建<code>BeanDefinitionScanner</code>,将<code>ContextAnnotationAutowireCandidateResolver</code>,<code>ConfigurationClassPostProcessor【bean的扫描和注册】</code>,<code>CommonAnnotationBeanPostProcessor</code>,<code>AutowiredAnnotationBeanPostProcessor【@Autowired属性的自动注入】</code>,<code>PersistenceAnnotationBeanPostProcessor</code> 这5个组件添加到spring容器中。</p><p><strong>spring bean加载过程</strong>: </p><ul><li>通过<code>BeanDefinitionReader</code>将bean配置类从java_config中读取出来</li><li>再由<code>ConfigurationClassPostProcessor</code>解析配置类 </li><li>通过<code>BeanDefinitionScanner</code>扫描配置类中的配置的扫描路径</li><li>由<code>ConfigurationClassPostProcessor</code>包装成beanDefinition,注册到（put）beanDefinitionMap中。</li><li>最后通过<code>beanFactory</code>的<code>getBean</code>方法将bean实例化.<ul><li>在这过程中会调用<code>registerBeanPostProcessors</code>方法注册的后置处理器,对bean进行数据填充</li><li><blockquote><p><code>AutowiredAnnotationBeanPostProcessor</code>(处理被@Autowired注解修饰的bean并注入)<br><code>RequiredAnnotationBeanPostProcessor</code>(处理被@Required注解修饰的方法)<br><code>CommonAnnotationBeanPostProcessor</code>(处理@PreDestroy、@PostConstruct、@Resource等多个注解的作用)等</p></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1 - 带你了解线程池</title>
      <link href="/2020/12/22/%E4%BB%8E0%E5%88%B01%20-%20%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2020/12/22/%E4%BB%8E0%E5%88%B01%20-%20%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-线程"><a href="#1-线程" class="headerlink" title="1. 线程"></a>1. 线程</h2><p>线程是调度CPU的最小单位，线程模型分为 ULT 和 KLT。  </p><p>JVM 使用的是KLT模型，java线程和操作系统os线程保持着一对一的映射关系，也就是说每创建一个java线程就意味着在操作系统里新建了一个os线程。</p><span id="more"></span> <p> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a70a7afd767f49fba65759ca08927bc4~tplv-k3u1fbpfcp-watermark.image"></p><p>JVM是运行在用户空间的，如果需要创建和销毁线程，需要将线程从用户态切换到内核态（比较耗时，性能较低）。如果并发请求非常多，但是每个线程运行时间比较短。这样就会频繁的创建和销毁线程。可能会出现 <strong>创建和销毁线程</strong> 比 <strong>实际业务处理花费</strong> 的时间和资源 还要多。  </p><p>因此引入了<strong>线程池</strong>的概念</p><h2 id="2-线程池"><a href="#2-线程池" class="headerlink" title="2. 线程池"></a>2. 线程池</h2><p>线程池 顾名思义就是一个线程缓存。线程是稀缺资源，如果放任代码无限制的创建，不仅会消耗服务器资源，也会影响系统的稳定。因此 JAVA 提供了线程池对线程的统一创建、分配、调优和监控。</p><h3 id="2-1-线程池如何使用"><a href="#2-1-线程池如何使用" class="headerlink" title="2.1 线程池如何使用"></a>2.1 线程池如何使用</h3><pre class=" language-java"><code class="language-java">ThreadPoolExecutor tpe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span>    TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tpe<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tpe<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><h3 id="2-2-线程池创建的主要参数"><a href="#2-2-线程池创建的主要参数" class="headerlink" title="2.2 线程池创建的主要参数"></a>2.2 线程池创建的主要参数</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>         Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>corePoolSize：核心线程数</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程最大空闲时间</li><li>unit：时间单位</li><li>workQueue：阻塞队列，存放未执行的任务</li><li>Executors.defaultThreadFactory()：线程创建工厂方法</li><li>defaultHandler：线程超过最大线程数时的拒绝策略</li></ul><h3 id="2-3-线程池工作流程"><a href="#2-3-线程池工作流程" class="headerlink" title="2.3 线程池工作流程"></a>2.3 线程池工作流程</h3><p> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f1f7af96f7c4fbbb7706b54a66a461d~tplv-k3u1fbpfcp-watermark.image"></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 【1】</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 【2】</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 【3】</span>            <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 重复检验，防止并发问题</span>                <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拒绝策略</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 【4】</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>【1】 ctl ：该参数包含线程池的两个重要参数：1. 线程池运行状态【32位的前3位】 、2. 线程池中运行的线程数（核心线程+非核心线程）。    重复获取的原因是：ctl.get()不是原子性的，防止并发访问时，数据的脏读。</li></ul><pre class=" language-java"><code class="language-java">    RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1110 0000 0000 0000 0000 0000 0000 0000</span>    SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0000 0000</span>    STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0010 0000 0000 0000 0000 0000 0000 0000</span>    TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0100 0000 0000 0000 0000 0000 0000 0000</span>    TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0110 0000 0000 0000 0000 0000 0000 0000</span></code></pre><ul><li><p>workerCountOf(c)：通过位运算获取线程池中运行的线程数</p></li><li><p>【2】 addWorker(command, true)：将任务封装成 <strong>worker对象</strong>，并初始化并执行线程。</p></li><li><p>【3】 如果核心线程已经满了，则将任务加入到阻塞队列中等待。</p></li><li><p>【4】 阻塞队列加入失败，创建非核心线程，如果失败，执行失败策略 </p></li></ul><h4 id="2-3-1-worker对象"><a href="#2-3-1-worker对象" class="headerlink" title="2.3.1 worker对象"></a>2.3.1 worker对象</h4><p>线程池并 <strong>不直接执行</strong> 我们提交的任务，而是将任务重新封装成 worker 对象。ThreadPool维护的 其实是一组worker对象。</p><p>worker类继承了AQS，使用AQS来实现独占锁的功能（不可重入）。   </p><p>并实现了Runnable接口，所以worker对象本身也是一个线程，在 启动的时候会调用Worker类中的run方法。  </p><p>类属性：</p><ul><li>firstTask：用它来保存传入的任务</li><li>thread：在调用构造方法时通过 ThreadFactory 来创 建的线程，是用来处理任务的线程</li></ul><h4 id="2-3-2-addWorker-方法"><a href="#2-3-2-addWorker-方法" class="headerlink" title="2.3.2 addWorker 方法"></a>2.3.2 addWorker 方法</h4><p><strong>execute方法中，会调用addWorker来创建并执行线程（核心+非核心）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>        retry<span class="token operator">:</span>        <span class="token comment" spellcheck="true">/* 保证线程安全代码 */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>                   firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>                   <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                    wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span> retry<span class="token punctuation">;</span>                c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                    <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*上面代码是为了线程安全，判断线程池是否存活、核心线程是否空余等（多线程情况下，可能会有核心线程空余出来）*/</span>            <span class="token comment" spellcheck="true">/*新建线程并执行*/</span>        <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>                mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/*判断线程池是存活的*/</span>                    <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                        <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span>                            largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                        workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/*执行任务*/</span>                    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>                <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>以上代码真正用于创建并执行任务的代码只有三行，其余代码都是为了保证并发安全。</p><pre class=" language-java"><code class="language-java">w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建worker，并绑定线程</span><span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行线程</span></code></pre><p><strong>t.start(); 执行后，worker对象会被调用并执行 worker.run() 方法</strong></p><h4 id="2-3-3-Worker类的-runWorker-方法"><a href="#2-3-3-Worker类的-runWorker-方法" class="headerlink" title="2.3.3 Worker类的 runWorker 方法"></a>2.3.3 Worker类的 runWorker 方法</h4><p>runWorker 方法的执行过程：</p><ul><li>先获取worker对象中的任务 firstTask</li><li>如果 firstTask 为空，则循环中队列里拉取任务。</li><li> 如果线程池正在停止，那么要保证当前线程是中断状态，否则要保证当前线程不是中断状态；</li><li>队列任务全部执行完成，执行processWorkerExit，然后销毁线程。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread wt <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Runnable task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> null<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * getTask：         *         核心线程：通过take直接获取，如果队列为空，则阻塞等待获取。         *         非核心线程：通过poll获取并设置超时时间，获取时如果超过keepAliveTime         *                  则获取失败返回null         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 判断线程处于stop状态时，线程一定是中断的             * stop状态：不接受新的任务，也不从队列里拉取新的线程，并中断正在处理的线程             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span>                    <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 空方法，允许子类重写</span>                Throwable thrown <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 真正执行任务</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 空方法，允许子类重写</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                task <span class="token operator">=</span> null<span class="token punctuation">;</span>                w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-4-getTask-方法"><a href="#2-3-4-getTask-方法" class="headerlink" title="2.3.4  getTask 方法"></a>2.3.4  getTask 方法</h4><p>核心线程：通过take直接获取，如果队列为空，则阻塞等待获取。<br>非核心线程：通过poll获取并设置超时时间，获取时如果超过keepAliveTime，则获取失败返回null</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Runnable <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Did the last poll() time out?</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断线程是否已经stop，如果是工作线程数-1，并返回null </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> STOP <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 核心线程没有超时设置，</span>        <span class="token comment" spellcheck="true">// 非核心线程需要超时设置</span>        <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">></span> corePoolSize<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// wc > maximumPoolSize：当前线程数>最大线程数，最大线程数可能被其他线程修改。</span>        <span class="token comment" spellcheck="true">// timed &amp;&amp; timedOut 为true 表示执行的是非核心线程，且已经超时（超时除了性能问题，就是队列已经为空）。</span>        <span class="token comment" spellcheck="true">// 以上两种情况说明：该非核心线程已经没有必要存在，可以销毁。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wc <span class="token operator">></span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>wc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Runnable r <span class="token operator">=</span> timed <span class="token operator">?</span>                workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">:</span>                workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>            timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在执行execute方法时，如果当前线程池的线程数量超过了corePoolSize且小于 maximumPoolSize，并且workQueue已满时，则可以增加工作线程，但这时如果超时没 有获取到任务，也就是timedOut为true的情况，说明workQueue已经为空了，也就说明了 当前线程池中不需要那么多线程来执行任务了，可以把多于corePoolSize数量的线程销毁掉，保持线程数量在corePoolSize即可。</p><h4 id="2-3-5-processWorkerExit-方法"><a href="#2-3-5-processWorkerExit-方法" class="headerlink" title="2.3.5 processWorkerExit 方法"></a>2.3.5 processWorkerExit 方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">,</span> <span class="token keyword">boolean</span> completedAbruptly<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果runWorker方法没有发生异常，这段代码不执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>completedAbruptly<span class="token punctuation">)</span>             <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            completedTaskCount <span class="token operator">+=</span> w<span class="token punctuation">.</span>completedTasks<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 从workers中移除，也就表示着从线程池中移除了一个工作线程</span>            workers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 根据线程池状态进行判断是否结束线程池</span>        <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当线程池是RUNNING或SHUTDOWN状态时，如果worker是异常结束，那么会直接addWorker；</span>        <span class="token comment" spellcheck="true">// 如果allowCoreThreadTimeOut=true，并且等待队列有任务，至少保留一个worker；</span>        <span class="token comment" spellcheck="true">// 如果allowCoreThreadTimeOut=false，workerCount不少于corePoolSize。还存在非核心线程</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateLessThan</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>completedAbruptly<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> min <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> corePoolSize<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">>=</span> min<span class="token punctuation">)</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// replacement not needed</span>            <span class="token punctuation">}</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-3-拒绝策略"><a href="#2-3-拒绝策略" class="headerlink" title="2.3 拒绝策略"></a>2.3 拒绝策略</h3><p>如果创建非核心线程失败，线程池有4中拒绝策略</p><ul><li><p>CallerRunsPolicy：谁调用谁执行。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> ThreadPoolExecutor e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>AbortPolicy：抛出 RejectedExecutionException 异常</p></li><li><p>DiscardPolicy：空实现，等待子类重写</p></li><li><p>DiscardOldestPolicy：从队列里移除一个，再加入</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> ThreadPoolExecutor e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-最佳线程数量设置"><a href="#2-4-最佳线程数量设置" class="headerlink" title="2.4 最佳线程数量设置"></a>2.4 最佳线程数量设置</h3><p>最佳线程数 = CPU核数*[1+(I/O耗时/CPU耗时)]</p>]]></content>
      
      
      <categories>
          
          <category> 线程池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】删库跑路？了解下bin-log！</title>
      <link href="/2020/12/16/%E3%80%90MySQL%E3%80%91%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF%EF%BC%9F%E4%BA%86%E8%A7%A3%E4%B8%8Bbin-log%EF%BC%81/"/>
      <url>/2020/12/16/%E3%80%90MySQL%E3%80%91%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF%EF%BC%9F%E4%BA%86%E8%A7%A3%E4%B8%8Bbin-log%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>操作生产数据库时每一个操作都需要反复审核。任意的小错误，都会导致线上“大灾难”！<br>“从删库到跑路”，可以说是IT业内老梗了。  </p><p>但是真的不小心误删了，真的就无法挽救了吗？  </p><p>其实也没这么夸张，真实的生产数据库往往“热备”和“冷备”同时进行。万一出现删库的情况，还是可以通过备份文件进行恢复。这里提到的备份文件可以是<strong>数据库某一时刻的快照</strong>，也可以是<strong>bin-log文件</strong>。</p><span id="more"></span><h2 id="bin-log-归档"><a href="#bin-log-归档" class="headerlink" title="bin-log 归档"></a>bin-log 归档</h2><h3 id="什么是-bin-log"><a href="#什么是-bin-log" class="headerlink" title="什么是 bin-log"></a>什么是 bin-log</h3><p>bin-log是一种由MySQL提供的记录数据库操作（CUD操作）的二进制日志文件。<br>它有以下两个特点：</p><blockquote><ol><li>Binlog为逻辑日志,记录的是一条语句的原始逻辑</li><li>Binlog不限大小,追加写入,不会覆盖以前的日志</li></ol></blockquote><h3 id="如何使用bin-log"><a href="#如何使用bin-log" class="headerlink" title="如何使用bin-log"></a>如何使用bin-log</h3><p>修改mysql配置文件/etc/my.cnf</p><pre class=" language-java"><code class="language-java">log‐bin<span class="token operator">=</span> <span class="token operator">/</span>data<span class="token operator">/</span>mysql<span class="token operator">/</span>bin<span class="token operator">/</span>mysql<span class="token operator">-</span>bin# mysql 版本高于<span class="token number">5.7</span> 需要额外配置，唯一idserver‐id<span class="token operator">=</span> <span class="token number">1212</span># binlog格式，有<span class="token number">3</span>种statement<span class="token punctuation">,</span>row<span class="token punctuation">,</span>mixedbinlog‐format<span class="token operator">=</span>ROW# 什么时候进行刷盘，配置<span class="token number">1</span>就是每次操作都进行刷盘写入，<span class="token number">0</span> 则是将刷盘交给系统决什么时候进行sync‐binlog<span class="token operator">=</span><span class="token number">1</span></code></pre><p>检查开启状态</p><pre class=" language-JAVA"><code class="language-JAVA">show variables like '%log_bin%';</code></pre><p>如果得到如下（log_bin | ON）表示正常开启，如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> Variable_name                   <span class="token operator">|</span> Value                           <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> log_bin                         <span class="token operator">|</span> ON                              <span class="token operator">|</span><span class="token operator">|</span> log_bin_basename                <span class="token operator">|</span> <span class="token operator">/</span>data<span class="token operator">/</span>mysql<span class="token operator">/</span>bin<span class="token operator">/</span>mysql<span class="token operator">-</span>bin       <span class="token operator">|</span><span class="token operator">|</span> log_bin_index                   <span class="token operator">|</span> <span class="token operator">/</span>data<span class="token operator">/</span>mysql<span class="token operator">/</span>bin<span class="token operator">/</span>mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span>index <span class="token operator">|</span><span class="token operator">|</span> log_bin_trust_function_creators <span class="token operator">|</span> OFF                             <span class="token operator">|</span><span class="token operator">|</span> log_bin_use_v1_row_events       <span class="token operator">|</span> OFF                             <span class="token operator">|</span><span class="token operator">|</span> sql_log_bin                     <span class="token operator">|</span> ON                              <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></code></pre><h2 id="模拟删库"><a href="#模拟删库" class="headerlink" title="模拟删库"></a>模拟删库</h2><p>通过 <code>reset master;</code>将数据库历史的binlog文件还原，然后新增库 test 新增表 test;  </p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a33201fa186e498f9fc7b1fc1a0f573e~tplv-k3u1fbpfcp-watermark.image">  </p><p>新增一条记录</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b298f4a5e374790be502b346b744337~tplv-k3u1fbpfcp-watermark.image"></p><p>查看binlog日志文件，可以发现已经记录了日志。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abc10d560c1246aa9825b1bba227894f~tplv-k3u1fbpfcp-watermark.image"></p><p>然后删除库，也会进行记录。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa0237523e354ea69b654d955788a7c2~tplv-k3u1fbpfcp-watermark.image"><br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12679e6963844951b60e76a3c9e4ac61~tplv-k3u1fbpfcp-watermark.image"></p><h2 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><p>通过mysql提供的 mysqlbinlog 命令查看日志文件，找到需要恢复的位子。</p><pre class=" language-JAVA"><code class="language-JAVA">/usr/local/mysql/bin/mysqlbinlog --no-defaults /data/mysql/bin/mysql-bin.000001</code></pre><p>可以看到一些库以及表的信息。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17d10bf3549d45b2829a5ada491d6163~tplv-k3u1fbpfcp-watermark.image"></p><p>选择需要恢复的内容，并记录行号。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c30460c80ff948679081e6d40c79403b~tplv-k3u1fbpfcp-watermark.image"></p><p>通过以下命令，进行恢复（恢复之前需要新建一个和原来一样的库）</p><pre class=" language-JAVA"><code class="language-JAVA">## 行号/usr/local/mysql/bin/mysqlbinlog --no-defaults --start-position="1491" --stop-position="2424" /data/mysql/bin/mysql-bin.000001 |./mysql -u root -p test ## 通过时间/usr/local/mysql/bin/mysqlbinlog --no-defaults /data/mysql/bin/mysql-bin.000001 --stop-date= "2020-11-24 00:00:00"  --start-date= "2020-11-24 11:55:00"| ./mysql -u root -p test## 全部恢复/usr/local/mysql/bin/mysqlbinlog --no-defaults /data/mysql/bin/mysql-bin.000001 |./mysql -u root -p test</code></pre><p>效果如下：   </p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34ed0c014b6e41cb948aec2c896a3b73~tplv-k3u1fbpfcp-watermark.image"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JVM调优】调优命令/线上调优分析</title>
      <link href="/2020/12/11/%E3%80%90JVM%E8%B0%83%E4%BC%98%E3%80%91%E8%B0%83%E4%BC%98%E5%91%BD%E4%BB%A4-%E7%BA%BF%E4%B8%8A%E8%B0%83%E4%BC%98%E5%88%86%E6%9E%90/"/>
      <url>/2020/12/11/%E3%80%90JVM%E8%B0%83%E4%BC%98%E3%80%91%E8%B0%83%E4%BC%98%E5%91%BD%E4%BB%A4-%E7%BA%BF%E4%B8%8A%E8%B0%83%E4%BC%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="常用-JVM-调优命令"><a href="#常用-JVM-调优命令" class="headerlink" title="常用 JVM 调优命令"></a>常用 JVM 调优命令</h2><h3 id="JPS-—-查看程序对应的PID"><a href="#JPS-—-查看程序对应的PID" class="headerlink" title="JPS — 查看程序对应的PID"></a>JPS — 查看程序对应的PID</h3><pre class=" language-JAVA"><code class="language-JAVA">[root@ams_cms01 tes]# jps25841 Starter26691 jar13332 jar20134 BrokerStartup6361 jar18668 NamesrvStartup</code></pre><span id="more"></span><h3 id="JMAP-—查找线程内存使用情况"><a href="#JMAP-—查找线程内存使用情况" class="headerlink" title="JMAP —查找线程内存使用情况"></a>JMAP —查找线程内存使用情况</h3><h4 id="JMAP打印线程内类实例数和内存量"><a href="#JMAP打印线程内类实例数和内存量" class="headerlink" title="JMAP打印线程内类实例数和内存量"></a>JMAP打印线程内类实例数和内存量</h4><pre class=" language-JAVA"><code class="language-JAVA">// 可以查看线程中类的实例数和内存量jmap -histo 13332</code></pre><pre class=" language-JAVA"><code class="language-JAVA"> num     #instances         #bytes  class name----------------------------------------------   1:         15760       47434048  [B   2:        161343       21937496  [C   3:         48290        7713600  [Ljava.lang.Object;   4:        140621        3374904  java.lang.String   5:         29745        2617560  java.lang.reflect.Method   6:         11216        1876680  [I   7:          2418        1586208  io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueue   8:         14127        1571504  java.lang.Class   9:         47662        1525184  java.util.concurrent.ConcurrentHashMap$Node  10:         27057        1103008  [Ljava.lang.String;  11:         31809        1017888  java.lang.ref.WeakReference</code></pre><h4 id="JMAP打印堆栈信息"><a href="#JMAP打印堆栈信息" class="headerlink" title="JMAP打印堆栈信息"></a>JMAP打印堆栈信息</h4><pre class=" language-JAVA"><code class="language-JAVA">jmap -heap 13332</code></pre><pre class=" language-JAVA"><code class="language-JAVA">Attaching to process ID 13332, please wait...Debugger attached successfully.Server compiler detected.JVM version is 25.172-b11using thread-local object allocation.Parallel GC with 13 thread(s)Heap Configuration:   MinHeapFreeRatio         = 0   MaxHeapFreeRatio         = 100   MaxHeapSize              = 268435456 (256.0MB)   NewSize                  = 44564480 (42.5MB)   MaxNewSize               = 89128960 (85.0MB)   OldSize                  = 89653248 (85.5MB)   NewRatio                 = 2   SurvivorRatio            = 8   MetaspaceSize            = 21807104 (20.796875MB)   CompressedClassSpaceSize = 1073741824 (1024.0MB)   MaxMetaspaceSize         = 17592186044415 MB   G1HeapRegionSize         = 0 (0.0MB)Heap Usage:PS Young GenerationEden Space:   capacity = 41418752 (39.5MB)   used     = 15461184 (14.74493408203125MB)   free     = 25957568 (24.75506591796875MB)   37.32894704311709% usedFrom Space:   capacity = 1572864 (1.5MB)   used     = 700480 (0.66802978515625MB)   free     = 872384 (0.83197021484375MB)   44.535319010416664% usedTo Space:   capacity = 1572864 (1.5MB)   used     = 0 (0.0MB)   free     = 1572864 (1.5MB)   0.0% usedPS Old Generation   capacity = 133169152 (127.0MB)   used     = 109122936 (104.06774139404297MB)   free     = 24046216 (22.93225860595703MB)   81.94310345987635% used</code></pre><h3 id="Jstack-—-查看线程情况"><a href="#Jstack-—-查看线程情况" class="headerlink" title="Jstack — 查看线程情况"></a>Jstack — 查看线程情况</h3><pre class=" language-JAVA"><code class="language-JAVA">jstack 13332</code></pre><pre class=" language-JAVA"><code class="language-JAVA">"DubboServerHandler-172.10.0.7:28999-thread-79" #539 daemon prio=5 os_prio=0 tid=0x00007eff2c05e000 nid=0x1164 waiting on condition [0x00007efe3b9f8000]   java.lang.Thread.State: WAITING (parking)        at sun.misc.Unsafe.park(Native Method)        - parking to wait for  <0x00000000f25f76b8> (a java.util.concurrent.SynchronousQueue$TransferStack)        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:458)        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:362)        at java.util.concurrent.SynchronousQueue.take(SynchronousQueue.java:924)        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)        at java.lang.Thread.run(Thread.java:748)"DubboServerHandler-172.10.0.7:28999-thread-78" #534 daemon prio=5 os_prio=0 tid=0x00007eff2c05d000 nid=0x939 waiting on condition [0x00007efe3bbfa000]   java.lang.Thread.State: WAITING (parking)        at sun.misc.Unsafe.park(Native Method)        - parking to wait for  <0x00000000f25f76b8> (a java.util.concurrent.SynchronousQueue$TransferStack)        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:458)        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:362)        at java.util.concurrent.SynchronousQueue.take(SynchronousQueue.java:924)        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)        at java.lang.Thread.run(Thread.java:748)</code></pre><h3 id="JSTAT-—-调优重点：查看-GC-情况"><a href="#JSTAT-—-调优重点：查看-GC-情况" class="headerlink" title="JSTAT — 调优重点：查看 GC 情况"></a>JSTAT — 调优重点：查看 GC 情况</h3><pre class=" language-JAVA"><code class="language-JAVA">// 监控pid = 13332 的线程，每过 1 秒打印 1 次，打印 10 次jstat -gc 13332 1000 10</code></pre><pre class=" language-JAVA"><code class="language-JAVA"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   1536.0 1536.0 448.0   0.0   40448.0   5105.7   130048.0   106565.4  79664.0 75844.2 9776.0 9048.1   4082   33.338  248    31.693   65.0321536.0 1536.0 448.0   0.0   40448.0   5109.8   130048.0   106565.4  79664.0 75844.2 9776.0 9048.1   4082   33.338  248    31.693   65.0321536.0 1536.0 448.0   0.0   40448.0   5225.4   130048.0   106565.4  79664.0 75844.2 9776.0 9048.1   4082   33.338  248    31.693   65.0321536.0 1536.0 448.0   0.0   40448.0   5225.4   130048.0   106565.4  79664.0 75844.2 9776.0 9048.1   4082   33.338  248    31.693   65.032</code></pre><p><strong>字段意义</strong></p><pre class=" language-JAVA"><code class="language-JAVA">S0C：第一个幸存区的大小，单位KBS1C：第二个幸存区的大小S0U：第一个幸存区的使用大小S1U：第二个幸存区的使用大小EC：伊甸园区的大小EU：伊甸园区的使用大小OC：老年代大小OU：老年代使用大小MC：方法区大小(元空间)MU：方法区使用大小CCSC:压缩类空间大小CCSU:压缩类空间使用大小YGC：年轻代垃圾回收次数YGCT：年轻代垃圾回收消耗时间，单位sFGC：老年代垃圾回收次数FGCT：老年代垃圾回收消耗时间，单位sGCT：垃圾回收消耗总时间，单位s</code></pre><h2 id="调用命令的使用场景"><a href="#调用命令的使用场景" class="headerlink" title="调用命令的使用场景"></a>调用命令的使用场景</h2><h3 id="JMAP"><a href="#JMAP" class="headerlink" title="JMAP"></a>JMAP</h3><p>应用出现OOM等内存问题时，可以通过JMAP分析</p><h3 id="Jstack"><a href="#Jstack" class="headerlink" title="Jstack"></a>Jstack</h3><p>应用出现死锁等线程问题时，可以使用</p><h2 id="线上调优分析"><a href="#线上调优分析" class="headerlink" title="线上调优分析"></a>线上调优分析</h2><p>上个月有个新项目上线了，中间好像也没什么告警报错。<br>今天上生产环境查看运行情况时发现，该应用已经进行了近250次 Full GC 了。平均3个小时发生一次！emmm…. 好在还没人投诉。  </p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4548dd5e57d1408cbdddbe0d3e995421~tplv-k3u1fbpfcp-watermark.image"></p><p><strong>jmap -heap</strong>查看程序内存：</p><pre class=" language-JAVA"><code class="language-JAVA">Heap Configuration:   MinHeapFreeRatio         = 0   MaxHeapFreeRatio         = 100   MaxHeapSize              = 268435456 (256.0MB)   NewSize                  = 44564480 (42.5MB)   MaxNewSize               = 89128960 (85.0MB)   OldSize                  = 89653248 (85.5MB)   NewRatio                 = 2   SurvivorRatio            = 8   MetaspaceSize            = 21807104 (20.796875MB)   CompressedClassSpaceSize = 1073741824 (1024.0MB)   MaxMetaspaceSize         = 17592186044415 MB   G1HeapRegionSize         = 0 (0.0MB)</code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d582001ea5ea47fb82acd7586513861d~tplv-k3u1fbpfcp-watermark.image"><br>小小的脑袋，大大的疑惑，为啥只有256M的堆内存？！  </p><p>通过 <strong>JSTAT -GC</strong> 命令发现在每日高峰期，平均每分钟产生 20M 的对象，会在2-3分钟占满Eden区，并触发Minor GC，会有<strong>8M</strong>上下的存活对象被移到Survivor区(2 * 15M)。<br>下次 Minor GC时，会进行<strong>对象动态年龄判断</strong>，发现上次一Minor GC 产生的对象已经超过S1区的**50%**，此时会将上次Minor GC存活的对象直接移入老年代（100M）。<br>所以高峰期，老年代会在30分钟内被占满，并进行一次 <strong>Full GC</strong>。</p><p>所以通过以上分析，造成应用程序频繁GC的原因有两个：</p><ol><li>堆内存太小。</li><li>对象动态年龄判断，导致对象过早的被放进老年代。</li></ol><p>解决方案：</p><ol><li>扩大堆内存大小：-Xms 1024M -Xmx 1024M</li><li>由于应用程序中的对象基本上都是 ”朝生夕死“，所以老年代没有太大的必要，所以修改新生代和老年代的比例/或者扩大大新生代的大小：-XX:NewRatio=1 / -Xmn600M</li></ol>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾回收算法和常见的垃圾回收器（CMS+G1）</title>
      <link href="/2020/12/09/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E5%92%8C%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%EF%BC%88CMS-G1%EF%BC%89/"/>
      <url>/2020/12/09/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E5%92%8C%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%EF%BC%88CMS-G1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h1><h2 id="垃圾回收算法分类"><a href="#垃圾回收算法分类" class="headerlink" title="垃圾回收算法分类"></a>垃圾回收算法分类</h2><p> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcddca883b54b199442900c0df37c1c~tplv-k3u1fbpfcp-watermark.image">  </p><span id="more"></span><h3 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h3><p>现在市面上常见的垃圾回收器都采用了分代收集理论。<br>所谓分代收集就是根据对象的存活周期将内存分为新生代和老年代。详细可查看<a href="https://juejin.im/post/6894122672645472270">JAVA内存模型</a><br>在<strong>新生代</strong>对象“朝生夕死”，每次收集都有大量对象（99%）死去，所以可以选择<strong>标记-复制算法</strong>，只需要付出少量对象的复制成本就可以完成每次垃圾收集。<br>而<strong>老年代</strong>对象生存几率比较高，存活对象比较多，如果选择复制算法需要付出较高的IO成本，而且没用额外的空间可以用于复制，此时选择<strong>标记-清除</strong>或者<strong>标记-整理</strong>就比较合理。</p><h3 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h3><p>标记-复制算法将内存分为两块相同大小的区域（比如新生代的Survivor区），每次在其中一块区域分配元素，当这块区域内存占满时，就会将存活下来的元素复制到另一块内存区域并清空当前内存区域。  </p><ul><li>缺点：浪费一半的内存空间。  </li><li>优点：简单高效。</li></ul><p><strong>JVM在Eden区保存新对象，在GC时，将Eden和Survivor中存活对象复制到Survivor的另一个分区。这是JVM对复制算法的一个优化。只浪费了1/10的内存空间【JVM的Eden区和Survivor区的比例为 8:2】</strong><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/111e7e24c3904dfd98f7210c23b3b484~tplv-k3u1fbpfcp-watermark.image">  </p><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>算法包括<strong>标记</strong>和<strong>清除</strong>两个阶段，标记存活的对象，统一回收未标记的对象（一般情况是这种），也可以反过来，标记所有需要回收的对象并回收（标记成本相对较大）。</p><ul><li>优点：最基础的收集算法，比较简单</li><li>缺点：效率不高（如果需要标记的对象比较多），空间问题（标记清除后会产生大量不连续的内存空间）</li></ul><p><strong>空间问题可能出现的问题：在发生GC之后，内存回收了大量死亡对象，出现大量空余内存，此时系统生成一个较大的对象，可能由于没有足够大的连续的内存空间，导致对象生成失败。【空间足够多，但是没有足够大的连续空间】</strong><br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/310249cbb25747f1ba4f531022e65e03~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p><strong>解决了标记清除中的空间问题。</strong><br>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b4599b60a944fbebbb020f92e8044c1~tplv-k3u1fbpfcp-watermark.image"></p><h1 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h1><p>目前市面上主流的垃圾收集器有：Serial收集器、<strong>Parallel Scavenge收集器</strong>【JDK8 默认收集器】、ParNew收集器、<strong>CMS收集器</strong>、<strong>G1收集器</strong>。</p><h2 id="Serial-收集器-XX-UseSerialGC-XX-UseSerialOldGC"><a href="#Serial-收集器-XX-UseSerialGC-XX-UseSerialOldGC" class="headerlink" title="Serial 收集器 | -XX:+UseSerialGC -XX:+UseSerialOldGC"></a>Serial 收集器 | -XX:+UseSerialGC -XX:+UseSerialOldGC</h2><p>单线程垃圾收集器，最古老的的垃圾收集器，在Serial收集器执行期间会 “STOP THE WORLD”<br><strong>STOP THE WORLD</strong>：只运行GC线程，暂停其他线程。  </p><p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong><br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7c3ee470e3e441a89a8dc95c7ad34c0~tplv-k3u1fbpfcp-watermark.image"><br>它简单而高效（与其他收集器的单线程相比）。Serial收集器由于没有线程交互的开销，可以获得很高的单线程收集效率。</p><h2 id="Parallel-Scavenge-收集器-XX-UseParallelGC-XX-UseParallelOldGC"><a href="#Parallel-Scavenge-收集器-XX-UseParallelGC-XX-UseParallelOldGC" class="headerlink" title="Parallel Scavenge 收集器 | -XX:+UseParallelGC -XX:+UseParallelOldGC"></a>Parallel Scavenge 收集器 | -XX:+UseParallelGC -XX:+UseParallelOldGC</h2><p>相当与Serial收集器的多线程版本，默认开启的GC线程数，和CPU核数一致（-XX:ParallelGCThreads 可以修改GC线程数，但<strong>不推荐修改</strong>）<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8c61e2e78fb455fa2dc565592a727b1~tplv-k3u1fbpfcp-watermark.image"><br><strong>Parallel Scavenge收集器的注点是吞吐量（高效率的利用CPU）。CMS等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是CPU中用于运行用户代码的时间与CPU总消耗时间的比值。</strong></p><h2 id="ParNew-收集器-XX-UseParNewGC"><a href="#ParNew-收集器-XX-UseParNewGC" class="headerlink" title="ParNew 收集器 | -XX:+UseParNewGC"></a>ParNew 收集器 | -XX:+UseParNewGC</h2><p>ParNew 和 Parallel Scavenge收集器极其相识，可以理解为ParNew是为配合<strong>CMS收集器</strong>开发的新一代 Parallel Scaenge收集器。</p><h2 id="CMS-收集器-XX-UseConcMarkSweepGC"><a href="#CMS-收集器-XX-UseConcMarkSweepGC" class="headerlink" title="CMS 收集器 | -XX:+UseConcMarkSweepGC"></a>CMS 收集器 | -XX:+UseConcMarkSweepGC</h2><p>CMS收集器是一种老年代区域的垃圾收集器，往往配合ParNew 收集器来使用。<br>它适合在注重用户体验的应用上使用，实现了GC线程和用户线程并发进行（部分步骤）。<br>采用了<strong>标记-清除</strong>算法。回收过程大致分为5个步骤：  </p><ol><li><strong>初始标记</strong>：暂停其他线程（STW），标记GC roots 直接引用的对象。<strong>过程很快</strong></li><li><strong>并发标记</strong>：从GC roots 直接引用的对象出发向下查找所有引用的对象。这个过程最耗时，和用户线程并发执行。【这个过程可能出现的问题：用户线程执行中可能产生新的垃圾（浮动垃圾），无法被标记。】</li><li><strong>重新标记</strong>：为修正 <strong>并发标记</strong> 中产生变动的对象标识，主要用<strong>三色标记</strong>中的增量更新算法来进行标记。这个过程会暂停其他进程（STW）。</li><li><strong>并发清除</strong>：将标记为可回收的对象进行回收，和用户线程并发执行。【*这个过程也会产生新垃圾对象（浮动垃圾），这些对象将在下次GC时回收】</li><li><strong>并发重置</strong>：将标记为不可回收的对象的标志清除。</li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5b33257ec9145658c1b1f2e770c887a~tplv-k3u1fbpfcp-watermark.image"></p><h2 id="G1-收集器-XX-UseG1GC-官网"><a href="#G1-收集器-XX-UseG1GC-官网" class="headerlink" title="G1 收集器 | -XX:+UseG1GC 官网"></a>G1 收集器 | -XX:+UseG1GC <sub><a href="https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html">官网</a></sub></h2><h3 id="堆结构"><a href="#堆结构" class="headerlink" title="堆结构"></a>堆结构</h3><p>G1 收集器采用了和此前完全不同的堆内存分配方式，他将堆内存分为2048个相同大小的region(<strong>单个大小为1MB~32MB</strong>)。</p><h3 id="堆内存的分配"><a href="#堆内存的分配" class="headerlink" title="堆内存的分配"></a>堆内存的分配</h3><p>这些regions在逻辑上被动态的分为Eden、Survivor（新生代）、old generation（老年代）。这些区域不一定是连续的。  </p><p>除了这三种之外，G1还新增一种新的类型：Humongous regions。如果对象超过所在regions的50%，就会被移入这个类型的region。<strong>这种大对象应尽量避免创建</strong><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/068d73bcdf5743d9925f1c470f7a85b4~tplv-k3u1fbpfcp-watermark.image" alt="G1 oracle官网图片"></p><h3 id="期望GC-STW时间"><a href="#期望GC-STW时间" class="headerlink" title="期望GC-STW时间"></a>期望GC-STW时间</h3><p>G1 新增一个配置（-XX:MaxGCPauseMillis=200），来设置我们期望每次GC-STW的时间。这是一个相对值，不会严格按照这个时间执行，jvm 会评估GC总的时间，如果不能满足这个期望时间，JVM 会通过一定的算法，只回收部分性价比高的内存空间，来达到这个目标。</p><h3 id="Young-GC"><a href="#Young-GC" class="headerlink" title="Young GC"></a>Young GC</h3><p>新生代内存初始化默认分配堆内存的5%，当新生代内存被占满时，JVM会评估回收新生代所需要的时间，如果比期望GC-STW时间短，不会马上触发Young GC，而是对新生代进行扩容。否则触发Young GC。</p><p>young GC 通过复制算法将存活的对象复制到Survivor region。并清空原来的region。  </p><ul><li>**这个过程会 “stop the world”**，并且重新计算并保存新生代的大小，以便下一次GC快速进行。</li><li>young GC 是多线程的.<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62ae69ac601344f9a91895012185b46a~tplv-k3u1fbpfcp-zoom-1.image"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf06e44617874f4eb712311e3d8d7a45~tplv-k3u1fbpfcp-zoom-1.image"></li></ul><h3 id="Mixed-GC"><a href="#Mixed-GC" class="headerlink" title="Mixed GC"></a>Mixed GC</h3><p>整个堆占用率达到(-XX:InitiatingHeapOccupancyPercent=45)时,触发Mixed GC  </p><h4 id="Mixed-GC-过程"><a href="#Mixed-GC-过程" class="headerlink" title="Mixed GC 过程"></a>Mixed GC 过程</h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4cd6ac8424840f39b34841f8682b7a0~tplv-k3u1fbpfcp-watermark.image"></p><ol><li><strong>初始标记</strong>：暂停其他线程（STW），标记GC roots 直接引用的对象。<strong>过程很快</strong></li><li><strong>并发标记</strong>：从GC roots 直接引用的对象出发向下查找所有引用的对象。这个过程最耗时，和用户线程并发执行。【官网说这里会标记空白的region —- 暂时无法理解,期待了解的大佬赐教~~~】</li><li><strong>重新标记</strong>：为修正 <strong>并发标记</strong> 中产生变动的对象标识，这个过程会暂停其他进程（STW）。【然后在这一步空白的region被回收】</li><li><strong>并发清除</strong>：这个阶段G1会对<strong>老年代</strong>各个region区域进行比较,其中”活性”低的region会被优先回收(<strong>活性:存活对象最少的,复制成本低,回收更快</strong>)。老年代和新生代一起回收.</li><li><strong>复制幸存者对象</strong>：将之前回收区域幸存的对象复制到一个未使用的region区,并压缩.</li></ol><h3 id="G1的官方推荐"><a href="#G1的官方推荐" class="headerlink" title="G1的官方推荐"></a>G1的官方推荐</h3><ol><li><strong>不要设置年轻代大小</strong><ul><li>设置年轻一代的大小会禁用期望GC-STW时间的目标。</li><li>G1不再能够根据需要扩展和缩小年轻一代的空间。由于尺寸是固定的，因此无法更改尺寸。</li></ul></li><li><strong>期望GC-STW时间</strong><ul><li>最好不要设置平均GC时间,而是使用 90% 的GC时间.</li></ul></li><li><strong>Mixed GC 中 Evacuation Failure</strong><ul><li>当没有更多的空闲region被提升到老一代或者复制到幸存空间时，并且由于堆已经达到最大值，堆不能扩展，从而发生Evacuation Failure。此时会触发full GC ，<strong>类似与 Serial 收集器的单线程垃圾回收,非常耗时</strong></li><li>增加(-XX:G1ReservePercent=10)的大小</li><li>降低(-XX:InitiatingHeapOccupancyPercent=45)的大小</li><li>增加(-XX:ConcGCThreads=n)并发标记线程数</li></ul></li></ol><p><a href="https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html">G1 JVM参数请参照官网</a></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM对象创建和内存分配机制</title>
      <link href="/2020/12/08/JVM%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/12/08/JVM%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM对象创建"><a href="#JVM对象创建" class="headerlink" title="JVM对象创建"></a>JVM对象创建</h1><h2 id="JVM对象创建的主流程"><a href="#JVM对象创建的主流程" class="headerlink" title="JVM对象创建的主流程"></a>JVM对象创建的主流程</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bac452bdc6b4453b839112afbd5975d1~tplv-k3u1fbpfcp-watermark.image"></p><span id="more"></span><ol><li>类加载检查：<ul><li>虚拟机在接收到一条new 指令时，会先检查对象是否被加载到内存中，如果没有进入<a href="https://juejin.im/post/6893401741736280072">类加载流程</a></li></ul></li><li>分配内存：<ul><li>在类加载完成时，类对象所需的内存大小就已经确认下来，所以虚拟机只需要在java堆中划分一块固定大小的区域来保存对象。</li><li>内存分配方式：<ul><li>指针碰撞：在内存空间中维护一个指针，每次指针向后移动一段与对象大小一致的距离。这种方法保证内存空间时规整的，已经使用的在指针前面，未使用的在指针后面。</li><li>空闲列表：如果内存空间是散乱的，已使用和未使用的区域相互交错，虚拟机就会维护一个空闲列表来记录哪些区域是可用的。在保存对象时，会查找一块足够大的内存空间来保存对象，并更新空闲列表。</li></ul></li><li>高并发下内存争抢问题:<ul><li>CAS：采用CAS算法，让线程A尝试获取保存对象，如果保存不成功，则重试，直到成功。</li><li>本地线程分配缓冲（Thread Local Allocation Buffer,TLAB）：java线程开启时，在内存空闲划分一块区域来保存该线程产生的对象。可以通过 <strong>-XX:+UseTLAB</strong>（默认开启），通过 <strong>-XX:TLABSize=4k</strong> 设置分配区域大小。</li></ul></li></ul></li><li>初始化：<ul><li>将分配到的内存都设置为0值（二级制码都是0/1），这保证了java代码在不赋予初值的情况下也能被使用。</li></ul></li><li>设置<a href="">对象头</a>：<ul><li>初始化零值之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的对象头Object Header之中。</li></ul></li><li>执行init方法：<ul><li>给对象的属性赋值。</li></ul></li></ol><h1 id="对象内存分配"><a href="#对象内存分配" class="headerlink" title="对象内存分配"></a>对象内存分配</h1><h2 id="对象内存分配流程"><a href="#对象内存分配流程" class="headerlink" title="对象内存分配流程"></a>对象内存分配流程</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/707c62c19d094ba7a8b4fc29234ed924~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="对象栈内分配"><a href="#对象栈内分配" class="headerlink" title="对象栈内分配"></a><strong>对象栈内分配</strong></h3><p>我们知道对象是在堆内进行分配内存的，当对象没有被引用时，我们需要依靠 GC 进行回收，当临时对象过多时，会对 GC 造成很大的压力，从而影响应用的性能（GC 会导致STOP THE WORLD）。为了避免这种情况，JVM通过 <strong>逃逸分析</strong> 来判断对象是否在方法外被引用。<br>如果对象没有逃逸且栈帧空间足够的情况下，JVM会将对象保存在栈帧中，这样在方法结束时，该对象会随着栈帧的出栈而被销毁，进而减轻 GC 的压力。<br>通过开启逃逸分析参数(-XX:+DoEscapeAnalysis)，<strong>JDK7之后默认开启逃逸分析</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对象没有逃逸</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Something st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">setThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存数据操作</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对象逃逸</span><span class="token keyword">public</span> Something <span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Something st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">setThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> st<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a><strong>标量替换</strong></h3><p>在通过逃逸分析判断对象没有被外部引用时，会将对象进行分解，不在栈帧中创建，而是将该对象成员变量分解若干个被这个方法使用的成员变量所代替。<br>在JVM将对象保存到栈帧中时，可能出现栈帧中存在足够的空间但是空间不连续的情况，这个时候需要我们开启JVM的标量替换功能。<br>开启标量替换参数(-XX:+EliminateAllocations)，<strong>JDK7之后默认开启</strong>。</p><h3 id="大对象"><a href="#大对象" class="headerlink" title="大对象"></a><strong>大对象</strong></h3><p>JVM在判断大对象时，会将大对象直接放入老年代。<br><strong>如何判断大对象？</strong><br>JVM参数 -XX:PretenureSizeThreshold 可以设置大对象的阈值。<br><strong>为什么设置大对象？</strong><br>避免在minor GC 过程中，大对象的复制操作带来的性能问题。  </p><h3 id="对象动态年龄判断"><a href="#对象动态年龄判断" class="headerlink" title="对象动态年龄判断"></a>对象动态年龄判断</h3><p>如果对象年龄n1+n2+…+n<sub>x</sub>的大小超过S0/S1的**50%**，那么年龄 <strong>x</strong> 及以上的对象会被直接移入老年代。这个规则其实是希望那些可能是长期存活的对象，尽早进入老年代。<br>可以通过-XX:TargetSurvivorRatio 指定大小。</p><h3 id="老年代空间分配担保机制"><a href="#老年代空间分配担保机制" class="headerlink" title="老年代空间分配担保机制"></a>老年代空间分配担保机制</h3><p>年轻代每次minor gc之前JVM都会计算下老年代剩余可用空间。<br>如果这个可用空间小于年轻代里现有的所有对象大小之和(包括垃圾对象)，就会看一个“-XX:-HandlePromotionFailure”(jdk1.8默认就设置了)的参数是否设置了。<br>如果有这个参数，就会看看老年代的可用内存大小，是否大于之前每一次minor gc后进入老年代的对象的平均大小。<br>如果上一步结果是小于或者之前说的参数没有设置，那么就会触发一次Full gc，对老年代和年轻代一起回收一次垃圾，如果回收完还是没有足够空间存放新的对象就会发生”OOM”<br>当然，如果minor gc之后剩余存活的需要挪动到老年代的对象大小还是大于老年代可用空间，那么也会触发full gc，full gc完之后如果还是没有空间放minor gc之后的存活对象，则也会发生“OOM”</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存模型和垃圾回收机制</title>
      <link href="/2020/12/07/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/12/07/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h1><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee3daff157d243b9822781a475bc5219~tplv-k3u1fbpfcp-watermark.image">  </p><span id="more"></span><p><strong>JVM内存大致分为以下几个区域</strong>  </p><ol><li>堆：保存对象（存放使用new创建的对象，全局变量，方法中使用final修饰的局部变量）</li><li>栈：线程运行时创建，主要用于存放局部变量。<ul><li>堆帧：程序运行时的每个方法都会分配一个独立的 堆帧 ，每个方法的局部变量都保存在对应的堆帧中，方法结束，该区域则销毁<ul><li>局部表量表：程序运行时，局部变量的保存空间（int a = 1 中，a 就是局部变量）</li><li>操作数栈：程序在运行时，操作数保存的临时空间（int a = 1 中，1就是操作数）</li><li>动态链接：程序运行时将符号引用转换成直接引用（将方法区、栈中的引用指向堆中的实际地址）</li><li>方法出口：主线程调用方法时，给方法分配一个方法出口，记录着该方法结束时，执行主线程的哪行代码</li></ul></li></ul></li><li>本地方法区：程序运行时，存在  通过本地方法（native） 与 底层C交互时，会创建一个本地方法栈。</li><li>方法区（元空间）：常量、静态变量、类信息（存放基本类型的变量数据和对象的引用）</li><li>程序计数器：记录代码运行的位置/行号。<pre class=" language-!"><code class="language-!">其中栈、程序计数器、本地方法区 是每个线程私有的堆、元空间 是公用的</code></pre></li></ol><p><strong>通过代码说明各内存的作用</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yanhua<span class="token punctuation">.</span>standard<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Solution sl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> convert <span class="token operator">=</span> sl<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>convert<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b3e444571c04fb488b5e9ce07be7908~tplv-k3u1fbpfcp-watermark.image"></p><p>我们还可以通过 jdk 提供 javap 命令 <strong>javap -c Solution.class</strong>或者<strong>javap -v Solution.class</strong> （-v 可以获取更加详细的命令集），将它编译成JVM汇编命令集  </p><p>通过 <strong>javap -v Solution.class</strong> 获取的代码：<br>1、动态链接：代码中的#XX，会在程序运行时被替换成指向堆中实际地址。<br>2、方法区（元空间）：代码中的类信息、和常量池（Constant pool）</p><pre class=" language-java"><code class="language-java">Classfile <span class="token operator">/</span>D<span class="token operator">:</span><span class="token operator">/</span>PROJECT<span class="token operator">/</span>cmhk<span class="token operator">-</span>ams<span class="token operator">/</span>ams<span class="token operator">-</span>parent<span class="token operator">/</span>ams<span class="token operator">-</span>service<span class="token operator">-</span>mq<span class="token operator">/</span>target<span class="token operator">/</span>classes<span class="token operator">/</span>com<span class="token operator">/</span>yanhua<span class="token operator">/</span>standard<span class="token operator">/</span>mq<span class="token operator">/</span>util<span class="token operator">/</span>Solution<span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token class-name">Last</span> modified <span class="token number">2020</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">;</span> size <span class="token number">879</span> bytes  MD5 checksum 7e0c624f3f4d194e32d2a3f642ad844b  Compiled from <span class="token string">"Solution.java"</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>yanhua<span class="token punctuation">.</span>standard<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Solution</span>  minor version<span class="token operator">:</span> <span class="token number">0</span>  major version<span class="token operator">:</span> <span class="token number">52</span>  flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_SUPERConstant pool<span class="token operator">:</span>   #<span class="token number">1</span> <span class="token operator">=</span> Methodref          #<span class="token number">8</span><span class="token punctuation">.</span>#<span class="token number">33</span>         <span class="token comment" spellcheck="true">// java/lang/Object."&lt;init>":()V</span>   #<span class="token number">2</span> <span class="token operator">=</span> Class              #<span class="token number">34</span>            <span class="token comment" spellcheck="true">// com/yanhua/standard/mq/util/Solution</span>   #<span class="token number">3</span> <span class="token operator">=</span> Methodref          #<span class="token number">2</span><span class="token punctuation">.</span>#<span class="token number">33</span>         <span class="token comment" spellcheck="true">// com/yanhua/standard/mq/util/Solution."&lt;init>":()V</span>   #<span class="token number">4</span> <span class="token operator">=</span> Methodref          #<span class="token number">2</span><span class="token punctuation">.</span>#<span class="token number">35</span>         <span class="token comment" spellcheck="true">// com/yanhua/standard/mq/util/Solution.convert:()I</span>   #<span class="token number">5</span> <span class="token operator">=</span> Fieldref           #<span class="token number">36</span><span class="token punctuation">.</span>#<span class="token number">37</span>        <span class="token comment" spellcheck="true">// java/lang/System.out:Ljava/io/PrintStream;</span>   #<span class="token number">6</span> <span class="token operator">=</span> Methodref          #<span class="token number">38</span><span class="token punctuation">.</span>#<span class="token number">39</span>        <span class="token comment" spellcheck="true">// java/io/PrintStream.println:(I)V</span>   #<span class="token number">7</span> <span class="token operator">=</span> Fieldref           #<span class="token number">2</span><span class="token punctuation">.</span>#<span class="token number">40</span>         <span class="token comment" spellcheck="true">// com/yanhua/standard/mq/util/Solution.num:I</span>   #<span class="token number">8</span> <span class="token operator">=</span> Class              #<span class="token number">41</span>            <span class="token comment" spellcheck="true">// java/lang/Object</span>   #<span class="token number">9</span> <span class="token operator">=</span> Utf8               num  #<span class="token number">10</span> <span class="token operator">=</span> Utf8               I  #<span class="token number">11</span> <span class="token operator">=</span> Utf8               <span class="token operator">&lt;</span>init<span class="token operator">></span>  #<span class="token number">12</span> <span class="token operator">=</span> <span class="token function">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span>V  #<span class="token number">13</span> <span class="token operator">=</span> Utf8               Code  #<span class="token number">14</span> <span class="token operator">=</span> Utf8               LineNumberTable  #<span class="token number">15</span> <span class="token operator">=</span> Utf8               LocalVariableTable  #<span class="token number">16</span> <span class="token operator">=</span> Utf8               <span class="token keyword">this</span>  #<span class="token number">17</span> <span class="token operator">=</span> Utf8               Lcom<span class="token operator">/</span>yanhua<span class="token operator">/</span>standard<span class="token operator">/</span>mq<span class="token operator">/</span>util<span class="token operator">/</span>Solution<span class="token punctuation">;</span>  #<span class="token number">18</span> <span class="token operator">=</span> Utf8               convert  #<span class="token number">19</span> <span class="token operator">=</span> <span class="token function">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span>I  #<span class="token number">20</span> <span class="token operator">=</span> Utf8               a  #<span class="token number">21</span> <span class="token operator">=</span> Utf8               b  #<span class="token number">22</span> <span class="token operator">=</span> Utf8               c  #<span class="token number">23</span> <span class="token operator">=</span> Utf8               main  #<span class="token number">24</span> <span class="token operator">=</span> <span class="token function">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>V  #<span class="token number">25</span> <span class="token operator">=</span> Utf8               args  #<span class="token number">26</span> <span class="token operator">=</span> Utf8               <span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span>  #<span class="token number">27</span> <span class="token operator">=</span> Utf8               d  #<span class="token number">28</span> <span class="token operator">=</span> Utf8               sl  #<span class="token number">29</span> <span class="token operator">=</span> Utf8               MethodParameters  #<span class="token number">30</span> <span class="token operator">=</span> Utf8               <span class="token operator">&lt;</span>clinit<span class="token operator">></span>  #<span class="token number">31</span> <span class="token operator">=</span> Utf8               SourceFile  #<span class="token number">32</span> <span class="token operator">=</span> Utf8               Solution<span class="token punctuation">.</span>java  #<span class="token number">33</span> <span class="token operator">=</span> NameAndType        #<span class="token number">11</span><span class="token operator">:</span>#<span class="token number">12</span>        <span class="token comment" spellcheck="true">// "&lt;init>":()V</span>  #<span class="token number">34</span> <span class="token operator">=</span> Utf8                  #<span class="token number">35</span> <span class="token operator">=</span> NameAndType        #<span class="token number">18</span><span class="token operator">:</span>#<span class="token number">19</span>        <span class="token comment" spellcheck="true">// convert:()I</span>  #<span class="token number">36</span> <span class="token operator">=</span> Class              #<span class="token number">42</span>            <span class="token comment" spellcheck="true">// java/lang/System</span>  #<span class="token number">37</span> <span class="token operator">=</span> NameAndType        #<span class="token number">43</span><span class="token operator">:</span>#<span class="token number">44</span>        <span class="token comment" spellcheck="true">// out:Ljava/io/PrintStream;</span>  #<span class="token number">38</span> <span class="token operator">=</span> Class              #<span class="token number">45</span>            <span class="token comment" spellcheck="true">// java/io/PrintStream</span>  #<span class="token number">39</span> <span class="token operator">=</span> NameAndType        #<span class="token number">46</span><span class="token operator">:</span>#<span class="token number">47</span>        <span class="token comment" spellcheck="true">// println:(I)V</span>  #<span class="token number">40</span> <span class="token operator">=</span> NameAndType        #<span class="token number">9</span><span class="token operator">:</span>#<span class="token number">10</span>         <span class="token comment" spellcheck="true">// num:I</span>  #<span class="token number">41</span> <span class="token operator">=</span> Utf8               java<span class="token operator">/</span>lang<span class="token operator">/</span>Object  #<span class="token number">42</span> <span class="token operator">=</span> Utf8               java<span class="token operator">/</span>lang<span class="token operator">/</span>System  #<span class="token number">43</span> <span class="token operator">=</span> Utf8               out  #<span class="token number">44</span> <span class="token operator">=</span> Utf8               Ljava<span class="token operator">/</span>io<span class="token operator">/</span>PrintStream<span class="token punctuation">;</span>  #<span class="token number">45</span> <span class="token operator">=</span> Utf8               java<span class="token operator">/</span>io<span class="token operator">/</span>PrintStream  #<span class="token number">46</span> <span class="token operator">=</span> Utf8               println  #<span class="token number">47</span> <span class="token operator">=</span> <span class="token function">Utf8</span>               <span class="token punctuation">(</span>I<span class="token punctuation">)</span>V<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> I    flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_STATIC  <span class="token keyword">public</span> com<span class="token punctuation">.</span>yanhua<span class="token punctuation">.</span>standard<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>V    flags<span class="token operator">:</span> ACC_PUBLIC    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment" spellcheck="true">// Method java/lang/Object."&lt;init>":()V</span>         <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>      LineNumberTable<span class="token operator">:</span>        line <span class="token number">3</span><span class="token operator">:</span> <span class="token number">0</span>      LocalVariableTable<span class="token operator">:</span>        Start  Length  Slot  Name   Signature            <span class="token number">0</span>       <span class="token number">5</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   Lcom<span class="token operator">/</span>yanhua<span class="token operator">/</span>standard<span class="token operator">/</span>mq<span class="token operator">/</span>util<span class="token operator">/</span>Solution<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>I    flags<span class="token operator">:</span> ACC_PUBLIC    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> iconst_1         <span class="token number">1</span><span class="token operator">:</span> istore_1         <span class="token number">2</span><span class="token operator">:</span> iconst_2         <span class="token number">3</span><span class="token operator">:</span> istore_2         <span class="token number">4</span><span class="token operator">:</span> iload_1         <span class="token number">5</span><span class="token operator">:</span> iload_2         <span class="token number">6</span><span class="token operator">:</span> iadd         <span class="token number">7</span><span class="token operator">:</span> iconst_2         <span class="token number">8</span><span class="token operator">:</span> imul         <span class="token number">9</span><span class="token operator">:</span> istore_3        <span class="token number">10</span><span class="token operator">:</span> iload_3        <span class="token number">11</span><span class="token operator">:</span> ireturn      LineNumberTable<span class="token operator">:</span>        line <span class="token number">6</span><span class="token operator">:</span> <span class="token number">0</span>        line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">2</span>        line <span class="token number">8</span><span class="token operator">:</span> <span class="token number">4</span>        line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">10</span>      LocalVariableTable<span class="token operator">:</span>        Start  Length  Slot  Name   Signature            <span class="token number">0</span>      <span class="token number">12</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   Lcom<span class="token operator">/</span>yanhua<span class="token operator">/</span>standard<span class="token operator">/</span>mq<span class="token operator">/</span>util<span class="token operator">/</span>Solution<span class="token punctuation">;</span>            <span class="token number">2</span>      <span class="token number">10</span>     <span class="token number">1</span>     a   I            <span class="token number">4</span>       <span class="token number">8</span>     <span class="token number">2</span>     b   I           <span class="token number">10</span>       <span class="token number">2</span>     <span class="token number">3</span>     c   I  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>V    flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_STATIC    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> iconst_1         <span class="token number">1</span><span class="token operator">:</span> istore_1         <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// class com/yanhua/standard/mq/util/Solution</span>         <span class="token number">5</span><span class="token operator">:</span> dup         <span class="token number">6</span><span class="token operator">:</span> invokespecial #<span class="token number">3</span>                  <span class="token comment" spellcheck="true">// Method "&lt;init>":()V</span>         <span class="token number">9</span><span class="token operator">:</span> astore_2        <span class="token number">10</span><span class="token operator">:</span> aload_2        <span class="token number">11</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>                  <span class="token comment" spellcheck="true">// Method convert:()I</span>        <span class="token number">14</span><span class="token operator">:</span> istore_3        <span class="token number">15</span><span class="token operator">:</span> getstatic     #<span class="token number">5</span>                  <span class="token comment" spellcheck="true">// Field java/lang/System.out:Ljava/io/PrintStream;</span>        <span class="token number">18</span><span class="token operator">:</span> iload_3        <span class="token number">19</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment" spellcheck="true">// Method java/io/PrintStream.println:(I)V</span>        <span class="token number">22</span><span class="token operator">:</span> <span class="token keyword">return</span>      LineNumberTable<span class="token operator">:</span>        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">0</span>        line <span class="token number">14</span><span class="token operator">:</span> <span class="token number">2</span>        line <span class="token number">15</span><span class="token operator">:</span> <span class="token number">10</span>        line <span class="token number">16</span><span class="token operator">:</span> <span class="token number">15</span>        line <span class="token number">17</span><span class="token operator">:</span> <span class="token number">22</span>      LocalVariableTable<span class="token operator">:</span>        Start  Length  Slot  Name   Signature            <span class="token number">0</span>      <span class="token number">23</span>     <span class="token number">0</span>  args   <span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span>            <span class="token number">2</span>      <span class="token number">21</span>     <span class="token number">1</span>     d   I           <span class="token number">10</span>      <span class="token number">13</span>     <span class="token number">2</span>    sl   Lcom<span class="token operator">/</span>yanhua<span class="token operator">/</span>standard<span class="token operator">/</span>mq<span class="token operator">/</span>util<span class="token operator">/</span>Solution<span class="token punctuation">;</span>           <span class="token number">15</span>       <span class="token number">8</span>     <span class="token number">3</span> convert   I    MethodParameters<span class="token operator">:</span>      Name                           Flags      args  <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>V    flags<span class="token operator">:</span> ACC_STATIC    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span>         <span class="token number">0</span><span class="token operator">:</span> iconst_4         <span class="token number">1</span><span class="token operator">:</span> putstatic     #<span class="token number">7</span>                  <span class="token comment" spellcheck="true">// Field num:I</span>         <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>      LineNumberTable<span class="token operator">:</span>        line <span class="token number">4</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span>SourceFile<span class="token operator">:</span> <span class="token string">"Solution.java"</span></code></pre><p>对以上代码存在疑问的请查阅 <a href="https://juejin.im/post/6894055000033460238/">JVM指令指南</a>  </p><h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><h2 id="GC内存示意图"><a href="#GC内存示意图" class="headerlink" title="GC内存示意图"></a>GC内存示意图</h2><p>垃圾回收区域分为<strong>新生代</strong>和<strong>老年代</strong>，其中新生代又分 <strong>Eden区</strong> 和 <strong>Survivor区</strong> ，Survivor 又均分为两个区（这两个区无差别）。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7f1dd2c0de1457cbe8abc204b9707e6~tplv-k3u1fbpfcp-watermark.image">  </p><h3 id="新生代-minor-GC-过程"><a href="#新生代-minor-GC-过程" class="headerlink" title="新生代 minor GC 过程"></a>新生代 minor GC 过程</h3><p>当程序新增对象时，默认放入Eden区，当Eden区内存占满时，会触发minor GC，将Eden和其中一块Survivor区（S0）仍 “存活” 的对象复制到另一块Survivor区（S1），同时对象的分代年龄+1，并将 Eden 区 和 S0 区全量删除，下次再触发minor GC 时，则复制Eden区和S1区 “存活” 的对象到 S0 区，删除Eden和S1区，如此往复，直到S0/S1被占满 或者 对象的分代年龄达到15，将对象移入老年代。</p><h3 id="老年代-full-GC-过程"><a href="#老年代-full-GC-过程" class="headerlink" title="老年代 full GC 过程"></a>老年代 full GC 过程</h3><p>当老年代内存占满时，会触发 full GC，会将新生代和老年代所有的对象进行判断，失活的对象将被删除。</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>JVM 会在堆、栈、方法区中查找GC Roots对象，并从这些对象开始往下搜索，能搜索到的对象都是可达对象，不能被搜索到的对象会被标记可回收对象。当两次查找都被标记为可回收对象时，该对象就会被GC回收掉。</p><p><em><strong>无论新生代GC，还是老年代GC都会导致应用程序停止等待GC结束（STOP THE WORLD），所以应该尽量避免GC，特别是Full GC</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM类加载机制和双亲委派机制</title>
      <link href="/2020/12/07/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%92%8C%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/12/07/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%92%8C%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="JVM-类加载流程"><a href="#JVM-类加载流程" class="headerlink" title="JVM 类加载流程"></a>JVM 类加载流程</h3><p> <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0dea772073bf4552987860f7af1da3b9~tplv-k3u1fbpfcp-watermark.image">  </p><span id="more"></span><p> 其中classLoader.loadClass 分如下7步：<br> 加载&gt;验证&gt;准备&gt;解析&gt;初始化&gt;使用&gt;卸载  </p><ol><li>加载：再硬盘上通过io读入字节码文件，使用类时才会加载。比如：调用main方法\new一个对象等。加载过程中会在内存中生成一个class对象，作为后续操作的入口。</li><li>验证：验证字节码文件的是否正确</li><li>准备：给类的静态变量分配内存空间，并赋予默认值</li><li>解析：将符号引用替换成直接引用的过程。（将一些静态方法替换成指向内存的指针或句柄）。</li><li>初始化：给类的静态变量赋值，加载静态方法。  </li></ol><p><em>类被加载到方法区中后主要包含 运行时常量池、类型信息、字段信息、方法信息、类加载器的引用、对应class实例的引用等信息。</em>  </p><p><strong>主类在运行过程中如果使用到其它类，会逐步加载这些类。jar包或war包里的类不是一次性全部加载的，是使用到时才加载。</strong>  </p><h3 id="类加载器和双亲委派机制"><a href="#类加载器和双亲委派机制" class="headerlink" title="类加载器和双亲委派机制"></a>类加载器和双亲委派机制</h3><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><ol><li>引导类加载器：负责加载支撑jvm运行的核心类（jdk lib目录下的核心包）</li><li>拓展类加载器：负责加载jdk 下的 lib/ext目录下的jar。</li><li>应用程序类加载器：负责加载自己引入的 jar 和 项目中自定义的类。</li></ol><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef0038f66b8b49e5a503587a1b545b52~tplv-k3u1fbpfcp-watermark.image"></p><h5 id="源码"><a href="#源码" class="headerlink" title="*源码"></a>*源码</h5><p>ClassLoader.loadClass() 方法</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>        <span class="token keyword">throws</span> ClassNotFoundException    <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首先检查这个class是否被当前加载器加载过。</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果没有，检查父加载器是否加载过</span>                        c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 由于引导类加载器 由c++实现，所以拓展类加载器的parent 无法识别，其实就是引导类加载器。 </span>                        c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// ClassNotFoundException thrown if class not found</span>                    <span class="token comment" spellcheck="true">// from the non-null parent class loader</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果所有加载器都没有加载过，则先由引导类加载器尝试加载</span>                    <span class="token comment" spellcheck="true">// 加载顺序：引导类加载器》拓展类加载器》应用程序类加载器》自定义类加载器</span>                    <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// this is the defining class loader; record the stats</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>以上代码一句话归结就是：先找父亲加载，失败再由儿子加载。</p><p>如果想要分版本加载全限定名相同的类，需要打破双亲委派机制，如同一个容器中，需要加载不同版本的spring。</p><p>如何打破双亲委派机制？</p><p>继承 ClassLoader 并重写 loadClass 方法</p><p>例如</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// First, check if the class has already been loaded</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If still not found, then invoke findClass in order</span>                <span class="token comment" spellcheck="true">// to find the class.</span>                <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// this is the defining class loader; record the stats</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样可以简单的打破双亲委派机制  </p><h5 id="双亲委派机制存在的意义"><a href="#双亲委派机制存在的意义" class="headerlink" title="双亲委派机制存在的意义"></a>双亲委派机制存在的意义</h5><ol><li>沙箱安全：自定义的核心类不会加载，有效防止核心API库被篡改，保证了代码的安全性。</li><li>避免不必要的类被重复加载：当父类加载过某个类，子类不需要再加载，确保内存中只存在一个实例。</li></ol><h4 id="全盘负责委托机制"><a href="#全盘负责委托机制" class="headerlink" title="全盘负责委托机制"></a>全盘负责委托机制</h4><p>当一个classLoader装载了一个类，该类的所依赖和引入的类都用这个加载器加载。除非显示的通过其他加载器手动加载。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuickSort</title>
      <link href="/2020/10/22/QuickSort/"/>
      <url>/2020/10/22/QuickSort/</url>
      
        <content type="html"><![CDATA[<p>坚持学习，坚持写博客，努力向大佬前进！ QAQ ………<br>之前面试被算法虐惨了，所以决定开一个算法的分类，记录一些日常算法</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>我们先通过图片看下快排到底是怎样实现的<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ca1d4110f7d4f69a03ff1dd60dea204~tplv-k3u1fbpfcp-zoom-1.image"></p><span id="more"></span><p>然后就是上代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>util<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * @author zhouxh */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">arrayToString</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token string">"排序前"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">arrayToString</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token string">"排序后"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 快速排序     * @param num    排序的数组     * @param left    数组的前针     * @param right 数组后针     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 排除 死循环的可能</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> num<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 倒序 找一个比 key 小的</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span>key<span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 正序 找一个比 key 大的</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>key<span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果大的在小的右边，交换位子</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 以上循环替换直到所以比key值小的 都在右边 大的都在右边时 结束</span>        <span class="token comment" spellcheck="true">// 将之后一个小的 和 key互换，以达到 key左边都比key小，右边都比key大</span>        num<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 此时根据 key 分成的左右两边分别排序</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将一个int类型数组转化为字符串     * @param arr     * @param flag     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">arrayToString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span>String flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"数组为("</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">")："</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            str <span class="token operator">+=</span> a <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法整理</title>
      <link href="/2020/10/21/Markdown/"/>
      <url>/2020/10/21/Markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h2><hr><p>最近写博文的时候，经常需要 google Markdown的语法，就觉得很麻烦，所以自己来整理一下，md常用的语法。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><hr><pre class=" language-Markdown"><code class="language-Markdown">最多支持6级标题，字体逐渐表小# date## date### date#### date##### date###### date</code></pre><h3 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h3><hr><p><strong>换行</strong><br>段尾两个空格加回车</p><span id="more"></span><pre class=" language-Markdown"><code class="language-Markdown">换行  // 此处存在两个空格段尾两个空格加回车</code></pre><p><strong>开始新的段落</strong>  </p><p>中间空一行来表示重新开始一个段落</p><pre class=" language-Markdown"><code class="language-Markdown">**开始新的段落**  中间空一行来表示重新开始一个段落</code></pre><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><hr><p><strong>加粗</strong></p><pre class=" language-Markdown"><code class="language-Markdown">**加粗**__加粗__</code></pre><p><em>斜体</em></p><pre class=" language-Markdown"><code class="language-Markdown">*斜体*_斜体_</code></pre><p><em><strong>斜体加粗</strong></em></p><pre class=" language-Markdown"><code class="language-Markdown">***斜体加粗***___斜体加粗___</code></pre><p><font face="华文彩云" >字体样式</font></p><pre class=" language-Markdown"><code class="language-Markdown">// 直接在face中注明字体<font face="微软雅黑" >微软雅黑</font><font face="华文彩云" >华文彩云</font></code></pre><p><font color=#FF000 >字体颜色</font></p><pre class=" language-Markdown"><code class="language-Markdown"><font color=#FF000 >红色</font><font color=#008000 >绿色</font><font color=#FFFF00 >黄色</font></code></pre><p>字体大小</p><pre class=" language-Markdown"><code class="language-Markdown">// size 1-7 默认：3<font size=5 >字体大小</font></code></pre><h3 id="常用的线"><a href="#常用的线" class="headerlink" title="常用的线"></a>常用的线</h3><hr><p><strong>分隔线</strong></p><hr><pre class=" language-Markdown"><code class="language-Markdown">// 需3个以上减号线：---星号：***下划线：___</code></pre><p><strong><del>删除线</del></strong>  </p><pre class=" language-Markdown"><code class="language-Markdown">~~删除线~~</code></pre><p><u>下划线</u></p><pre class=" language-Markdown"><code class="language-Markdown"><u>下划线</u></code></pre><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><hr><p>hexo <strong>hexo-renderer-markdown</strong> 插件不支持<em>脚注</em><br>请安装 <strong>hexo-renderer-markdown-it</strong><br>语法如下：</p><pre class=" language-Markdown"><code class="language-Markdown">创建脚注格式类似这样  [^脚注]。[^脚注]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><hr><p><strong>无序列表</strong></p><ul><li>第一</li><li>第二</li></ul><pre class=" language-Markdown"><code class="language-Markdown">// 可以用 * + - * 第一* 第二</code></pre><p><strong>有序列表</strong></p><ol><li>第一项、</li><li>第二项、</li></ol><pre class=" language-Markdown"><code class="language-Markdown">// 必须时英文状态下的.+空格1. 第一项、2. 第二项、</code></pre><p>有序和无序列表<strong>可混合使用</strong><br>效果如下：</p><ol><li>第一项<ul><li>第一项的第一元素</li></ul></li><li>第二项<ul><li>第二项的第一元素</li></ul></li></ol><pre class=" language-Markdown"><code class="language-Markdown">1. 第一项    - 第一项的第一元素2. 第二项    - 第二项的第一元素</code></pre><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><hr><blockquote><p>区块引用<br>区块展示<br>代码如下</p><blockquote><p>可以多层，最后6层</p></blockquote></blockquote><pre class=" language-Markdown"><code class="language-Markdown">> 区块引用> 区块展示> 代码如下>> 可以多层，最后6层</code></pre><p><strong>区块可以和列表配合使用</strong></p><ul><li>第一层<blockquote><p>第一层内容<br>展示如下</p></blockquote></li><li>第二层<blockquote><p>代码如下</p></blockquote></li></ul><pre class=" language-Markdown"><code class="language-Markdown">- 第一层    > 第一层内容    > 展示如下- 第二层    > 代码如下</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><hr><p><strong><code>单行代码块</code></strong>  </p><pre class=" language-Markdown"><code class="language-Markdown">` 单行代码块 `</code></pre><pre class=" language-Markdown"><code class="language-Markdown">多行代码块 </code></pre><pre class=" language-Markdown"><code class="language-Markdown">```多行代码块 ​```</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><hr><p><a href="wwww.baidu.com">百度</a></p><pre class=" language-Markdown"><code class="language-Markdown">[百度](wwww.baidu.com)</code></pre><p><strong>高级用法</strong><br>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="https://baidu.com/">百度</a><br>然后在文档的结尾为变量赋值（网址）</p><pre class=" language-Markdown"><code class="language-Markdown">这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [百度][baidu]然后在文档的结尾为变量赋值（网址）[1]: http://www.google.com/[baidu]: https://wwww.baidu.com/</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><hr><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><pre class=" language-Markdown"><code class="language-Markdown">![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis_详解</title>
      <link href="/2020/10/20/redis/"/>
      <url>/2020/10/20/redis/</url>
      
        <content type="html"><![CDATA[<p>坚持学习，坚持写博客，努力向大佬前进！ QAQ ………</p><h2 id="redis-概述"><a href="#redis-概述" class="headerlink" title="redis 概述"></a><strong>redis</strong> 概述</h2><hr><p>在web应用发展初期，web站点访问量不高，与用户交予较少，因此关系型数据库受到广泛的应用。但是随着互联网的发展，web站点的访问量提升，使用关系型数据库（基于磁盘的读写操作）在性能上出现了I/O上的瓶颈。在一瞬间大量请求同时命中数据库时，复杂的I/O操作使得数据库很难承受这样高速读写的压力，此时必须有一个更高效的中间件，来缓解数据库的压力。</p><span id="more"></span><h2 id="redis-是什么"><a href="#redis-是什么" class="headerlink" title="redis 是什么"></a>redis 是什么</h2><hr><p>为解决数据库在高并发情况下的压力，非关系型数据（NoSQL）也就进入我们的视野。Redis是现在最受欢迎的NoSQL数据库之一</p><h2 id="redis-的自有数据结构"><a href="#redis-的自有数据结构" class="headerlink" title="redis 的自有数据结构"></a>redis 的自有数据结构</h2><hr><ul><li>String<ul><li>它是一个二进制安全的字符串，不仅能够存储字符串、还能存储图片、视频等。单个最大512M</li></ul></li><li>Hash</li><li>该类型是由field和关联的value组成的map。其中，field和value都是字符串类型的。</li><li>List<ul><li>插入顺序排序的字符串元素集合，基于双向链表</li></ul></li><li>Set<ul><li>无序集合，数据唯一，可用于去重</li></ul></li><li>Zset<ul><li>有序集合类型，每个元素都会关联一个double类型的分数权值，通过这个权值来为集合中的成员进行从小到大的排序。<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// keyName 用作主键id</span>  <span class="token comment" spellcheck="true">// orderNum1 用作就是分数id 用于排序</span>  zadd keyName orderNum1  v1 orderNum1 v2 orderNum1 v3</code></pre>更多请查看<a href="http://www.redis.cn/topics/data-types-intro.html">redis中文网站 - 数据类型</a></li></ul></li></ul><h2 id="redis-的使用场景"><a href="#redis-的使用场景" class="headerlink" title="redis 的使用场景"></a>redis 的使用场景</h2><hr><ul><li>缓存系统热点数据<ul><li>如：系统中频繁被请求的静态数据</li></ul></li><li>计数器<ul><li>如：基于redis的主键生成策略、分布式计数。</li></ul></li><li>排行榜，消息队列<ul><li>如：计算日排行、月排行等，可以通过zset类型添加。</li><li>消息队列（订阅发布模式）：<pre class=" language-java"><code class="language-java">  发布：  publish channel message  例如：publish msg1 发送内容  订阅：  subscribe channel <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  例如：subscribe msg1 </code></pre></li></ul></li><li>分布式锁，共享session<ul><li>分布式锁：通过setnx实现<br><code>setnx(key,value,time,&#39;时间类型【时/分/秒/毫秒/微秒等】&#39;)</code></li></ul></li></ul><h2 id="redis-的持久化"><a href="#redis-的持久化" class="headerlink" title="redis 的持久化"></a>redis 的持久化</h2><hr><p>Redis持久化分为RDB持久化和AOF持久化</p><h4 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h4><p>RDB 其实就是在指定时间间隔中将内存中的数据集快照写入磁盘。这是redis 默认开启的持久化方式。</p><p><strong>RDB 持久化过程</strong><br>当 Redis 需要保存 dump.rdb 文件时， 服务器执行以下操作:</p><ul><li>Redis 调用forks. 同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。  </li></ul><p><strong>RDB的优点</strong>  </p><ul><li>rdb 是一个非常紧凑的单一文件，,非常适用于数据集的备份（比如每个小时报保存一下过去24小时内的数据,同时每天保存过去30天的数据），这样即使出现问题也可以根据某时刻的备份恢复到之前的版本。</li><li>由于rdb生成的文件时单一的，这也很方便用于同步数据（比如，集群情况下，某台redis主机宕机，可以通过rdb文件恢复） </li><li>rdb 同步时是从父线程fork一个子线程来完成这个操作，这意味着父线程不需要做其他额外的I/O操作，最大的发挥redis的性能。</li><li>和AOF相比，在大数据集的保存上，RDB 有明显的性能优势。  </li></ul><p>*<strong>RDB的缺点</strong>      </p><ul><li>由于RDB 保存的数据是某个时刻的快照，这意味着在保存快照操作开始到下次保存快照之间新增的数据集，是有可能丢失的，比如在下次保存之前意外断电或宕机。</li><li>由于RDB是保存某一时刻的全量数据，即使是从父线程 fork 一个子线程，也难免消耗性能。</li></ul><h4 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h4><p>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大.<br><strong>如何开启AOF</strong><br>在配置文件中打开AOF方式</p><pre class=" language-xml"><code class="language-xml">appendonly yes</code></pre><p><strong>持久化策略</strong></p><ul><li>每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全</li><li>每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。</li><li>从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。</li><li>推荐（并且也是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</li></ul><p>*<strong>AOF持久化过程</strong>  </p><ul><li>Redis 执行 fork() ，同时拥有父进程和子进程。</li><li>子进程开始将新 AOF 文件的内容写入到临时文件。</li><li>对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 AOF 文件的末尾,这样样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。</li><li>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。</li><li>Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。</li></ul><p><strong>AOF的优点</strong></p><ul><li>AOF 文件是一个只进行追加的日志文件，不需要写入seek,,即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令,你也也可使用redis-check-aof工具修复这些问题.</li><li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写，整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</li><li>AOF 文件有序地保存了对数据库执行的所有写入操作</li><li>AOF 提供了多种同步策略：无fsync,每秒fsync,每次写的时候fsync。默认使用每秒同步。这样即使出现异常（如断电、宕机），也只丢失一秒的数据。</li><li>通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</li></ul><p>*<strong>AOF的缺点</strong></p><ul><li>相同的数据集，AOF文件的体积要比RDB更大。</li><li>即使选择每秒同步，AOF的速度还是比RDB慢</li></ul><p><strong>在RDB和AOF同时开启的情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据</strong></p><h2 id="redis-在sprinBoot中的使用"><a href="#redis-在sprinBoot中的使用" class="headerlink" title="redis 在sprinBoot中的使用"></a>redis 在sprinBoot中的使用</h2><hr><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.redis.cluster.max-redirects</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span class="token attr-name">spring.redis.cluster.nodes</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1:6590,127.0.0.1:6591</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">Pass_123</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">5000</span></code></pre><h3 id="代码中的使用"><a href="#代码中的使用" class="headerlink" title="代码中的使用"></a>代码中的使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> ops <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 分布式锁</span>ops<span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>msgId<span class="token punctuation">,</span>msgId<span class="token punctuation">,</span>1800L<span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span></code></pre><h2 id="redis-常见面试题"><a href="#redis-常见面试题" class="headerlink" title="redis 常见面试题"></a>redis 常见面试题</h2><ol><li><strong>redis为什么可以快速执行?</strong><ul><li>绝大多数请求都是基于内存操作的</li><li>采用单线程，避免不必要的上下文切换，不需要各种锁的性能消耗。</li><li>非阻塞IO-IO多路复用（多网络连接，复用一个线程）</li><li>Redis采用自己实现的事件分离器</li></ul></li><li><strong>缓存雪崩</strong><ul><li>缓存雪崩是指在某台缓存主机宕机时，所有请求直接访问数据库，导致数据库宕机的请况。</li><li>解决方案：<ul><li>确保redis的高可用：多台 redis 主机同时工作，互为主备，及搭建 redis 集群。</li><li>限流降级：只允许一个线程同时访问数据库（分布式锁），当一个线程访问时，其他线程等待。</li><li>数据预热：在正式上线之前，先对可能大量访问的数据进行预先访问，使其存在缓存中，同时设置超时时间，使缓存失效时间尽量分布均匀</li></ul></li></ul></li><li><strong>缓存穿透</strong><ul><li>是直接访问一个 redis 中不存在的key，缓存没有命中，直接访问数据库。在这种请求下大量访问类似的key，也会出现数据库宕机的请况。</li><li>解决方案：<ul><li>布隆过滤器：将数据库可以查询的key 以hash的类型缓存到 bitmap中，当一个一定不存在的key访问时，会被直接拦截</li><li>缓存空对象：如果key值在缓存和数据库都没有命中的情况下，直接缓存一个空对象（需要设置超时时间），下次访问这个key就不会命中数据库。</li></ul></li></ul></li><li><strong>缓存击穿</strong><ul><li>指某个热点key，在高并发的情况下突然失效，并发直接请求数据库，导致数据库宕机的请求</li><li>解决方案：<ul><li>互斥锁(mutex key)：在出现热点key 失效时，通过redis的setnx（key，value，timeout）方法，实现单一线程进行读写操作。<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置一个缓存（存在超时时间）表示，目前有一个线程正在读写操作</span><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span>key_mutex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>value <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expire_secs<span class="token punctuation">)</span><span class="token punctuation">;</span>redis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>key_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//热点key设置完成后，将之前key_mutex删除，防止下次击穿时，无法进行读取db</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//这个时候代表同时期的线程进入等待，等待结束再次进行读取操作</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重试</span><span class="token punctuation">}</span> </code></pre>```java</li></ul></li><li>永远不过期：<br>  物理不过期：不设置超时时间，也就不存在过期问题。但是会出现数据不自动更新，无法保证一致性。<br>  异步不过期：设置超时时间，同时添加异步线程，发现热点key快过期的时候，重新设置热点key，但是会出现异步线程更新key时，其他线程访问的还是老数据。<br>```</li></ul></li><li><strong>过期机制</strong><ul><li>在内存充足的情况下，redis 对已经过期的 key 进行清理</li><li>常见的过期机制有三种：<ul><li>定时过期：设置对每个设置过期时间的 key 创建一个定时器，再key一到过期时间，就会立即删除。该策略对内存友好，但是对CPU消耗极大，影响redis的响应时间和吞吐量。</li><li>惰性过期：访问 key 的时候，采取校验是否过期，如果过期则删除。该策略对CPU友好，但是对内存极不友好。</li><li>定期过期：每隔一段时间，检查数据库 expires字典中的 key ，是否过期，过期则删除。</li></ul></li><li>redis采用<strong>惰性过期和定期过期</strong>，优化内存和CPU的性能，使其达到平衡。 </li></ul></li><li><strong>淘汰机制</strong><ul><li>是指再redis 缓存内存不足时的，如何处理新入库的数据的解决方案。</li><li>淘汰机制分6种：<ul><li>noeviction:不删除策略，达到最大内存限制时，如果需要更多内存，直接返回错误信息。</li><li>allkeys-lru:所有key通用，优先删除最近最少使用的(less recently used,LRU)key.</li><li>allkeys-random:所有key通用，随机删除一部分key.</li><li>volatile-random:只限于设置了expire的部分，删除一部分expire的key.</li><li>volatile-ttl:只限于设置了expire的部分，优先删除剩余时间(time to live,TTL)短的key.</li><li>volatile-lru：只限于设置过期时间的数据集，优先删除最近最少使用的数据淘汰</li><li><ul><li>如何配置 淘汰策略：redis.conf 中maxmemory 设置最大内存，超出时，自动触发 maxmemory-policy 中配置的策略</li></ul></li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合_详解(HashMap源码剖析)</title>
      <link href="/2020/10/10/Collection/"/>
      <url>/2020/10/10/Collection/</url>
      
        <content type="html"><![CDATA[<p>有生以来，第一次写自己的博客，希望自个坚持学习，坚持写博客，努力向大佬前进！ QAQ ………</p><p>废话不多说，直接开撸！</p><h2 id="集合框架图"><a href="#集合框架图" class="headerlink" title="集合框架图"></a><strong>集合框架图</strong></h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif" alt="ps.图片来自菜鸟教程" title="collection"></p><p>如上图所见，集合主要分为两类，Collection 和 Map，其中Collection又分为List、Set和Queue。本次我们主要来说说List、Set 和 Map。</p><span id="more"></span> <h3 id="1、Collection-下的子类-List-和-Set"><a href="#1、Collection-下的子类-List-和-Set" class="headerlink" title="1、Collection 下的子类 List 和 Set"></a><strong>1、Collection 下的子类 List 和 Set</strong></h3><p>上面的架构图相对复杂，咱简化一下。（以下箭头并非严格的父子关系 ^-^）<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b35234760cc045ee950566edf2ee3f19~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="1-1、List"><a href="#1-1、List" class="headerlink" title="1.1、List"></a><strong>1.1、List</strong></h4><p>List 下有 ArrayList、LinkedList、Vector。</p><ul><li>ArrayList<ul><li>特点：底层数据结构是数组，所以查询快</li><li>缺点：也因为是数组，所以增删慢，线程不安全(效率相对较高)</li></ul></li><li>LinkedList<ul><li>特点：底层数据结构是双向链表，增删快。</li><li>缺点：线程不安全(效率相对高),底层是链表,导致查询较慢.</li></ul></li><li>Vector<ul><li>特点：线程安全，底层数据结构是数组，所以查询快。</li><li>缺点：效率低</li></ul></li></ul><p><em>数组和链表的区别</em></p><pre class=" language-java"><code class="language-java">数组： <span class="token number">1</span>、在内存中分配一个连续的区域来保存数据，并且是在编译阶段就要确定空间大小，同时在运行阶段是不允许改变的<span class="token punctuation">(</span>不可扩容<span class="token punctuation">)</span>。 <span class="token number">2</span>、在查找时，直接从数组的首地址向后偏移就可以访问到了，所以他的时间复杂度为 <span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>。 <span class="token number">3</span>、新增时，头插法需要将所有元素后移，时间复杂度为<span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>。尾插法，直接插入，无需移动，时间复杂度为 <span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>删除也一样。 <span class="token number">4</span>、扩容时，数组是无法在运行期间修改容量的，所以在扩容时，新申请一个更大容量的数组，再将原数组的数据 COPY 过去。链表： <span class="token number">1</span>、内存中分配的区域非连续、非顺序，链表中的节点，存在一个指针，指向下一个元素。（单向链表）。结点可以在运行时动态生成<span class="token punctuation">(</span>可扩容<span class="token punctuation">)</span>。 <span class="token number">2</span>、查找时，由于链表的空间是分散的，所以不具有随机访问性，如果要查找，必须从第一个开始，向下查找，所以它的时间复杂度为<span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>。 <span class="token number">3</span>、新增时，由于空间分散，无需移动，可直接插入，只需将上一节点指针，指向新元素，所以时间复杂度为<span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>。 <span class="token number">4</span>、扩容时，动态申请，动态移除，扩容方便，且利用率高。</code></pre><h4 id="1-2、Set"><a href="#1-2、Set" class="headerlink" title="1.2、Set"></a><strong>1.2、Set</strong></h4><p>Set 下有 HashSet、linkedHashSet、TreeSet。</p><ul><li>HashSet<ul><li>特点：底层数据结构为 HashMap【设置key-value键值对，其中value为new object()】，元素无序且唯一，效率高</li><li>缺点：线程不安全</li></ul></li><li>linkedHashSet<ul><li>特点：底层数据结构为 linkedHashMap，元素有序且唯一【按插入顺序】</li><li>缺点：线程不安全    </li></ul></li><li>TreeSet<ul><li>特点：底层数据结构为 TreeMap，元素默认自然排序【还可以自定义排序规则：可以在自定义的对象类中继承Comparable，并重写compareTo方法】</li><li>缺点：线程不安全    </li></ul></li></ul><p>由于 set 集合，底层基本上通过 Map 实现，此次不展开赘述。会在下面 Map 中展开！ </p><h3 id="2、重中之重的-Map"><a href="#2、重中之重的-Map" class="headerlink" title="2、重中之重的 Map"></a><strong>2、重中之重的 Map</strong></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b3ac614c06948d8b6cf10f19079ac39~tplv-k3u1fbpfcp-zoom-1.image"></p><p>Map 下有 HasMap、LinkedHashMap、HashTable、TreeMap，</p><ul><li>HashMap<ul><li>特点：底层数据结构为 数组+链表+红黑树【jdk1.8新特性】</li><li>缺点：线程不安全</li></ul></li><li>LinkedHashMap<ul><li>特点：底层数据结构为 HashMap+双向链表，有序，出入一致</li><li>缺点：线程不安全</li></ul></li><li>HashTable <ul><li>特点：底层数据结构为 数组+链表，线程安全</li><li>缺点：无序</li></ul></li><li>TreeMap<ul><li>特点：底层数据结构为红黑树，有序，元素默认自然排序【还可以自定义排序规则：可以在自定义的对象类中继承Comparable，并重写compareTo方法】</li><li>缺点：线程不安全</li></ul>  <strong>面试必问之HashMap</strong><br>  <em>HashMap</em> <em>put过程源码解析【以下为jdk1.8 源码】</em></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过 hash 方法获取key的 hash 值 ，见下方key的 hash 算法</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断Map是否初始化，如果没有初始化，进行第一次扩容，长度为16</span>        <span class="token comment" spellcheck="true">// 扩容详细 见下方扩容机制</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// n = map 的长度，&amp; 相当于 hash 对 n-1 求与</span>    <span class="token comment" spellcheck="true">// 计算对应key在 HashMap 数组中的下标位置</span>    <span class="token comment" spellcheck="true">// 判断下标位置是否存在值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果该下标为 null，新增一个链表，并将链表的第一位指向数组对应下标处</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 下标位置已经存在值时 </span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断新增的 key 的 hash 和 equals ，和当前已存在的 key 的 hash 和 equals 是否一致</span>        <span class="token comment" spellcheck="true">// 这就是为什么 自定义对象重写equals方法时，必须重写hash方法。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果key值的hash 和 equals 都一致，直接替换。</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断当前节点类型是否为红黑树</span>            <span class="token comment" spellcheck="true">// 如果是直接插入</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是链表</span>            <span class="token comment" spellcheck="true">// 循环查找链表的最后一个节点</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 查找到之后，新建一个节点，并将上一节点的next属性，设置为新增节点</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                        <span class="token comment" spellcheck="true">// 如果链表长度超过 8 ，则转换成红黑树</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//treeifyBin 方法中会判断map的长度，如果小于64，则进行扩容，而不树化</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果是链表中的存在的key 直接替换value值，并返回 旧的value值//</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一句话概括hashMap的put操作：</p><pre class=" language-java"><code class="language-java">首先判断Map是否初始化，没有则新建一个。    然后判断是否存在新增的key值，如果存在就替换。    否则判断新增key对应节点的数据类型。        如果红黑树直接插入。        如果是链表，尾部插入，插入后判断链表长度。            如果超过<span class="token number">8</span>位，则转换成红黑树。</code></pre><p><em>HashMap</em> <em>hash算法源码解析【以下为jdk1.8 源码】</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**      * 取key的hash值 与 它的高16位 进行异或运算【确认key在map中的位置时，     * hash值会对Map的长度进行取余，和高16位异或计算，可以使高16位也参与到取余计算中】     * 目的：使key的散列性更好，尽量避免hash碰撞，【可降低链表长度 和 红黑树深度】,让hashMap更加高效     */</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><em>HashMap</em> <em>扩容机制源码解析【以下为jdk1.8 源码】</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// newCap表示新map的大小，newThr表示新map的扩容阈值 </span>    <span class="token comment" spellcheck="true">// 如果map已经实例化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果map长度大于最大长度，不扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                 oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// double threshold</span>            <span class="token comment" spellcheck="true">// 扩大1倍</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults</span>        <span class="token comment" spellcheck="true">// 未初始化时，重新参数初始化</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 重新计算数组下标位置：</span>                    <span class="token comment" spellcheck="true">// 要么在原位置，要么在原位置+新数组长度/2 下标位置</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 首先由于扩容导致 hash &amp; （newCap - 1）值发生改变，所以会进行拆树</span>                    <span class="token comment" spellcheck="true">// 要么在原位置 和 在原位置+新数组长度/2 下标位置，生成两个红黑树</span>                    <span class="token comment" spellcheck="true">// 在判断红黑树的长度是否小于 6 （红黑树的阈值*扩容系数），小于则转换成链表（去树化）</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">// preserve order</span>                    当链表中存在值时，通过循环进行尾插法（jdk1<span class="token number">.7</span>为头插法）                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
